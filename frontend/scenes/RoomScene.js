// frontend/scenes/RoomScene.js
import { Container, Text, TextStyle } from "pixi.js";
import { GameButton } from "../components/GameButton.js";
import { getRoomStateData, assignSlot, startGame } from "../api.js"; // <<< ‡πÉ‡∏ä‡πâ new API function >>>
import { GameEvents } from "../SceneFSM.js";
import {
  connect as connectSocket,
  on as onSocketEvent,
  disconnect as disconnectSocket,
  off as offSocketEvent,
  getSocketReadyState,
} from "../socketManager.js";

export class RoomScene extends Container {
  // constructor ‡∏£‡∏±‡∏ö roomId, playerName ‡πÅ‡∏•‡∏∞ callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ trigger FSM event
  constructor(roomId, playerName, triggerFSMEvent) {
    super();

    console.log("üîµ Entered RoomScene");

    this.layout = {
      width: "100%",
      flexDirection: "column",
      alignItems: "center",
      padding: 16,
      gap: 16,
    };

    this.roomId = roomId;
    this.playerName = playerName;
    this.triggerFSMEvent = triggerFSMEvent;

    this.slots = ["P1", "P2", "P3", "P4"];
    this.slotLabels = {};
    this.latestSlots = {};
    this.openSlots = [];

    const title = new Text({
      text: `üì¶ Room ID: ${roomId}`,
      style: new TextStyle({ fill: "#ffffff", fontSize: 22 }),
    });

    const headerRow = new Container();
    headerRow.layout = {
      flexDirection: "row",
      justifyContent: "flex-end",
      alignItems: "center",
      width: "100%",
      height: 30,
    };

    this.playerTable = new Container();
    this.playerTable.layout = {
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      width: "100%",
    };

    headerRow.addChild(title);
    this.addChild(headerRow, this.playerTable);

    this.renderSlots();
    this.refreshRoomState();
    this.setupWebSocketListeners();

    this.startButton = new GameButton({
      label: "Start Game",
      onClick: async () => {
        try {
          await startGame(this.roomId);
          console.log("üöÄ Game started!");
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å triggerFSMEvent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á FSM ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
          this.triggerFSMEvent(GameEvents.GAME_STARTED);
        } catch (err) {
          console.error("‚ùå Failed to start game", err);
        }
      },
    });

    this.exitButton = new GameButton({
      label: "Exit",
      onClick: async () => {
        try {
          await fetch(
            `/api/exit-room?room_id=${this.roomId}&name=${this.playerName}`,
            {
              method: "POST",
            }
          );
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å triggerFSMEvent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á FSM ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
          this.triggerFSMEvent(GameEvents.EXIT_ROOM);
        } catch (err) {
          console.error("‚ùå Failed to exit", err);
        }
      },
    });

    const footerRow = new Container();
    footerRow.layout = {
      flexDirection: "row",
      justifyContent: "space-between",
      width: "100%",
      height: "auto",
    };

    this.startButton.setEnabled(false); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏° Start ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    footerRow.addChild(this.exitButton.view, this.startButton.view);
    this.addChild(footerRow);
  }

  async refreshRoomState() {
    try {
      const result = await getRoomStateData(this.roomId);
      if (result && result.slots && result.host_name !== undefined) {
        this.isHost = result.host_name === this.playerName;
        this.updateSlotViews(result.slots);
      } else {
        console.error("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏à‡∏≤‡∏Å getRoomStateData:", result);
        alert(
          "Room state invalid or room may have been closed. Returning to Lobby."
        );
        this.triggerFSMEvent(GameEvents.EXIT_ROOM);
      }
    } catch (err) {
      console.error("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á:", err);
      alert(
        `Error fetching room state: ${
          err.message || "Unknown error"
        }. Returning to Lobby.`
      );
      this.triggerFSMEvent(GameEvents.EXIT_ROOM);
    }
  }

  // renderSlots() - ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°: ‡∏™‡∏£‡πâ‡∏≤‡∏á Container ‡πÅ‡∏•‡∏∞ Text/Button elements
  // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô logic ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏ï‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡πà‡∏≠‡∏ô updateSlotViews
  renderSlots() {
    for (const slot of this.slots) {
      const row = new Container();
      row.layout = {
        flexDirection: "row",
        alignItems: "center",
        justifyContent: "flex-end",
        width: "100%",
        padding: 10,
      };

      const slotText = new Text({
        text: `${slot}: ...`, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        style: new TextStyle({ fill: "#ffffff", fontSize: 18 }),
      });

      const textContainer = new Container();
      textContainer.layout = {
        alignSelf: "center",
        justifyContent: "flex-start",
        width: "100%",
        height: "100%",
        marginTop: 10,
      };

      const slotBtn = new GameButton({
        label: "Add bot", // Initial label, will be updated by updateSlotViews
        height: 30,
        width: 100,
        onClick: async () => {
          const slotId = slot; // "P1", "P2"
          const slotIndex = parseInt(slotId[1]) - 1; // 0, 1, 2, 3
          const info = this.latestSlots[slotId]; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á slot ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏≤‡∏Å Frontend (‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á API)
          console.log(
            `[RoomScene.onClick] Player '${this.playerName}' clicked slot ${slotId} (index ${slotIndex}). Current Frontend Info:`,
            info
          );

          try {
            if (this.isHost) {
              // --- Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HOST ---
              if (!info) {
                // Slot ‡∏ß‡πà‡∏≤‡∏á (null) --> HOST ‡∏Å‡∏î "Add bot" (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó)
                console.log(
                  `[RoomScene.onClick] Host adding bot to empty slot ${slotId}.`
                );
                await assignSlot(
                  this.roomId,
                  `Bot ${slotIndex + 1}`,
                  slotIndex
                );
              } else if (info.is_bot) {
                // Slot ‡πÄ‡∏õ‡πá‡∏ô Bot --> HOST ‡∏Å‡∏î "Open" (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ß‡πà‡∏≤‡∏á)
                console.log(
                  `[RoomScene.onClick] Host opening slot ${slotId} from bot.`
                );
                await assignSlot(this.roomId, null, slotIndex); // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ slot ‡∏ß‡πà‡∏≤‡∏á
              } else if (info.name && info.name !== this.playerName) {
                // Slot ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô --> HOST ‡∏Å‡∏î "Add bot" (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
                console.log(
                  `[RoomScene.onClick] Host kicking player '${info.name}' from slot ${slotId} and replacing with Bot.`
                );
                await assignSlot(
                  this.roomId,
                  `Bot ${slotIndex + 1}`,
                  slotIndex
                );
              } else {
                console.warn(
                  `[RoomScene.onClick] Host clicked on unexpected slot state for action. Info:`,
                  info
                );
                return;
              }
            } else {
              // --- Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PLAYER (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Host) ---
              if (!info) {
                // Slot ‡∏ß‡πà‡∏≤‡∏á (Player ‡∏Å‡∏î "Join")
                console.log(
                  `[RoomScene.onClick] Player '${this.playerName}' attempting to join empty slot ${slotId}.`
                );
                await assignSlot(this.roomId, this.playerName, slotIndex);
              } else {
                console.warn(
                  `[RoomScene.onClick] Player clicked on non-empty slot:`,
                  info
                );
                return;
              }
            }

            console.log(
              `[RoomScene.onClick] assignSlot API call sent for slot ${slotIndex}.`
            );
            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å getRoomStateData ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á assignSlot ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Debug
            const serverStateAfterClick = await getRoomStateData(this.roomId);
            console.log(
              "[RoomScene.onClick] Server State AFTER API Call (for Debug):",
              serverStateAfterClick
            );

            console.log(`[RoomScene.onClick] Awaiting WS update...`);
          } catch (err) {
            console.error("‚ùå [RoomScene.onClick] Failed to toggle slot", err);
            alert(`Failed to change slot: ${err.message || err.detail}`);
          }
        },
      });

      textContainer.addChild(slotText);
      const btnContainer = new Container();
      btnContainer.layout = {
        alignItems: "center",
        justifyContent: "flex-end",
        width: "100%",
        height: 40,
      };
      btnContainer.addChild(slotBtn.view);

      row.addChild(textContainer, btnContainer);

      this.slotLabels[slot] = { label: slotText, joinBtn: slotBtn };
      this.playerTable.addChild(row);
    }
  }

  updateSlotViews(slots) {
    console.log(
      "[RoomScene.updateSlotViews] Called with new slots data:",
      slots
    );
    console.log("[RoomScene.updateSlotViews] Current isHost:", this.isHost);
    this.latestSlots = slots;

    for (const slot of this.slots) {
      const info = slots[slot];
      const { label, joinBtn } = this.slotLabels[slot];
      console.log(
        `[RoomScene.updateSlotViews] Processing slot ${slot}. Info:`,
        info
      );

      if (!info) {
        // Slot ‡∏ß‡πà‡∏≤‡∏á (null)
        if (this.isHost) {
          label.text = `${slot}: (Open)`; // Host ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î (‡∏ß‡πà‡∏≤‡∏á)
          joinBtn.setText("Add bot"); // Host ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ "Add bot"
          joinBtn.view.visible = true;
          console.log(
            `  - Slot ${slot} (empty), Host view: label='(Open)', btn='Add bot', visible=true`
          );
        } else {
          label.text = `${slot}: Open`; // Player ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î (‡∏ß‡πà‡∏≤‡∏á)
          joinBtn.setText("Join"); // Player ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ "Join"
          joinBtn.view.visible = true;
          // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î onClick ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "Join" ‡∏Ç‡∏≠‡∏á Player
          joinBtn.onClick = async () => {
            try {
              console.log(
                `[RoomScene.onClick] Player '${this.playerName}' attempting to join open slot ${slot}.`
              );
              await assignSlot(
                this.roomId,
                this.playerName,
                parseInt(slot[1]) - 1
              );
            } catch (err) {
              console.error("‚ùå [RoomScene.onClick] Failed to join slot", err);
              alert(`Failed to join slot: ${err.message || err.detail}`);
            }
          };
          console.log(
            `  - Slot ${slot} (empty), Player view: label='Open', btn='Join', visible=true`
          );
        }
      } else if (info.is_bot) {
        // Slot ‡∏°‡∏µ Bot
        label.text = `${slot}: ü§ñ ${info.name}`; // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏à‡∏£‡∏¥‡∏á‡πÜ (Bot 2, Bot 3)
        if (this.isHost) {
          joinBtn.setText("Open"); // Host ‡∏Å‡∏î‡πÅ‡∏•‡πâ‡∏ß Slot ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ß‡πà‡∏≤‡∏á (Open)
          joinBtn.view.visible = true;
          // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î onClick ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "Open" ‡∏Ç‡∏≠‡∏á Host ‡∏ó‡∏µ‡πà Bot
          joinBtn.onClick = async () => {
            try {
              console.log(
                `[RoomScene.onClick] Host attempting to open slot ${slot} from Bot ${info.name}.`
              );
              await assignSlot(this.roomId, null, parseInt(slot[1]) - 1); // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ slot ‡∏ß‡πà‡∏≤‡∏á
            } catch (err) {
              console.error(
                "‚ùå [RoomScene.onClick] Failed to open slot from bot",
                err
              );
              alert(`Failed to open slot: ${err.message || err.detail}`);
            }
          };
        } else {
          joinBtn.view.visible = false; // Player ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°
        }
        console.log(
          `  - Slot ${slot} (bot), Host view (${this.isHost}): label='ü§ñ ${
            info.name
          }', btn='Open' (if Host), visible=${this.isHost ? "true" : "false"}`
        );
      } else if (info.name === this.playerName) {
        // Slot ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á
        label.text = `${slot}: ${info.name} <<`;
        joinBtn.view.visible = false; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        console.log(
          `  - Slot ${slot} (self), Host view (${this.isHost}): label='<<', btn visible=false`
        );
      } else {
        // Slot ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô
        label.text = `${slot}: ${info.name}`;
        if (this.isHost) {
          joinBtn.setText("Add bot"); // Host ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ "Add bot" (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
          joinBtn.view.visible = true;
          // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î onClick ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "Add bot" ‡∏Ç‡∏≠‡∏á Host ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô
          joinBtn.onClick = async () => {
            try {
              console.log(
                `[RoomScene.onClick] Host attempting to kick player '${info.name}' from slot ${slot} and replace with Bot.`
              );
              await assignSlot(
                this.roomId,
                `Bot ${parseInt(slot[1])}`,
                parseInt(slot[1]) - 1
              ); // ‡πÉ‡∏ä‡πâ Slot Index ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó
            } catch (err) {
              console.error(
                "‚ùå [RoomScene.onClick] Failed to kick player",
                err
              );
              alert(`Failed to kick player: ${err.message || err.detail}`);
            }
          };
        } else {
          joinBtn.view.visible = false; // Player ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏°
        }
        console.log(
          `  - Slot ${slot} (other player), Host view (${
            this.isHost
          }): label='${info.name}', btn='Add bot' (if Host), visible=${
            this.isHost ? "true" : "false"
          }`
        );
      }
    }

    // ‡∏õ‡∏∏‡πà‡∏° Start Game: ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Host ‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏ï‡πá‡∏°
    const isReady = Object.values(slots).every(
      (info) => info && (info.is_bot || info.name)
    );
    this.startButton.setEnabled(isReady);
    this.startButton.view.visible = this.isHost;
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WebSocket Listeners
  setupWebSocketListeners() {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ RoomScene
    connectSocket(this.roomId);

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå 'room_state_update'
    this.handleRoomStateUpdate = (data) => {
      console.log("[RoomScene.handleRoomStateUpdate] Received data:", data); // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô
      this.isHost = data.host_name === this.playerName;
      console.log(
        `[RoomScene.handleRoomStateUpdate] isHost: ${this.isHost}, playerName: ${this.playerName}, host_name from data: ${data.host_name}`
      ); // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô
      this.updateSlotViews(data.slots);
      console.log("[RoomScene.handleRoomStateUpdate] updateSlotViews called.");
    };

    onSocketEvent("room_state_update", this.handleRoomStateUpdate);

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå 'room_closed' (‡∏ñ‡πâ‡∏≤ host ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á)
    this.handleRoomClosed = (data) => {
      console.log("WS: Received room_closed", data);
      alert(data.message); // ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î
      this.triggerFSMEvent(GameEvents.EXIT_ROOM); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ LobbyScene
    };
    onSocketEvent("room_closed", this.handleRoomClosed);

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 'player_left' (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á)
    this.handlePlayerLeft = (data) => {
      console.log("WS: Player left:", data.player);
      // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å room_state_update ‡∏Å‡πá‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß, event ‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÅ‡∏Ñ‡πà logging
      // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á notification ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
    };
    onSocketEvent("player_left", this.handlePlayerLeft);
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö WebSocket Listeners (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Clean-up)
  // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Scene ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Scene
  teardownWebSocketListeners() {
    offSocketEvent("room_state_update", this.handleRoomStateUpdate);
    offSocketEvent("room_closed", this.handleRoomClosed);
    offSocketEvent("player_left", this.handlePlayerLeft);
    disconnectSocket(); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
  }

  // Override destroy method ‡∏Ç‡∏≠‡∏á PixiJS Container ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Clean-up
  destroy(options) {
    this.teardownWebSocketListeners();
    super.destroy(options);
  }
}
