name: CI/CD Pipeline

on:
  push:
    branches: [ main, simplified-architecture, test-github-actions ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  ECR_REPOSITORY: 'liap-tui'

jobs:
  # Stage 1: Code Quality
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Frontend dependencies
      working-directory: frontend
      run: npm install

    - name: Python Code Quality (Black & Pylint)
      working-directory: backend
      run: |
        black . --check --diff
        pylint engine/ api/ --exit-zero

    - name: Frontend Code Quality (ESLint & TypeScript)
      working-directory: frontend
      run: |
        npm run lint
        npm run type-check

    - name: Build Frontend
      working-directory: frontend
      run: npm run build

  # Stage 2: Docker build and security scanning
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: liap-tui:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'liap-tui:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Stage 3: AWS Deployment (only on main branch)
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [code-quality, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    env:
      HAS_ECS_CONFIG: ${{ secrets.ECS_CLUSTER_NAME }}
      HAS_APPRUNNER_CONFIG: ${{ secrets.APPRUNNER_SERVICE_ARN }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push Docker image to ECR using production Dockerfile
        docker buildx build \
          --platform linux/amd64 \
          --push \
          --file Dockerfile.prod \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          .

    - name: Deploy to AWS ECS (if configured)
      if: ${{ env.HAS_ECS_CONFIG != '' }}
      run: |
        # Force new deployment of ECS service
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --service ${{ secrets.ECS_SERVICE_NAME }} \
          --force-new-deployment \
          --no-cli-pager
        
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --services ${{ secrets.ECS_SERVICE_NAME }}

    - name: Deploy to AWS App Runner (if configured)
      if: ${{ env.HAS_APPRUNNER_CONFIG != '' }}
      run: |
        # Start App Runner deployment
        aws apprunner start-deployment \
          --service-arn ${{ secrets.APPRUNNER_SERVICE_ARN }} \
          --no-cli-pager


    - name: Deploy notification
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üöÄ AWS Deployment completed successfully!"
        echo "üì¶ ECR Image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "üè∑Ô∏è  Latest Tag: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
        echo "üåê Region: ${{ env.AWS_REGION }}"
        
        # Print deployment targets
        if [ ! -z "${{ secrets.ECS_CLUSTER_NAME }}" ]; then
          echo "üê≥ ECS Service: ${{ secrets.ECS_SERVICE_NAME }} in ${{ secrets.ECS_CLUSTER_NAME }}"
        fi
        
        if [ ! -z "${{ secrets.APPRUNNER_SERVICE_ARN }}" ]; then
          echo "üèÉ App Runner: ${{ secrets.APPRUNNER_SERVICE_ARN }}"
        fi