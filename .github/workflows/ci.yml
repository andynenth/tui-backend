name: CI/CD Pipeline

on:
  push:
    branches: [ main, simplified-architecture ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Stage 1: Code Quality
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Python Code Quality (Black & Pylint)
      working-directory: backend
      run: |
        black . --check --diff
        pylint engine/ api/ --exit-zero

    - name: Frontend Code Quality (ESLint & TypeScript)
      working-directory: frontend
      run: |
        npm run lint
        npm run type-check

    - name: Build Frontend
      working-directory: frontend
      run: npm run build

  # Stage 2: Docker build and security scanning
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: liap-tui:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'liap-tui:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Stage 3: Deploy (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/liap-tui:latest
          ${{ secrets.DOCKER_REGISTRY }}/liap-tui:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true

    - name: Deploy notification
      run: |
        echo "ðŸš€ Deployment completed successfully!"
        echo "Image: ${{ secrets.DOCKER_REGISTRY }}/liap-tui:${{ github.sha }}"
      if: success()