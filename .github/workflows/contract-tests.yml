name: Contract Testing

on:
  push:
    branches: [ main, develop, integrate-eventstore-async ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/contract-tests.yml'

jobs:
  contract-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio pytest-json-report
    
    - name: Run contract tests
      run: |
        cd backend
        pytest tests/contracts/ -v --tb=short --json-report --json-report-file=contract-test-report.json
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: contract-test-results-${{ matrix.python-version }}
        path: backend/contract-test-report.json
    
    - name: Check contract compatibility
      run: |
        cd backend
        python -c "
        import json
        with open('contract-test-report.json', 'r') as f:
            report = json.load(f)
        
        total = report['summary']['total']
        passed = report['summary']['passed']
        
        print(f'Contract Tests: {passed}/{total} passed')
        
        if passed < total:
            print('❌ Contract tests failed! Frontend compatibility at risk.')
            exit(1)
        else:
            print('✅ All contract tests passed! Frontend compatibility verified.')
        "

  behavioral-tests:
    runs-on: ubuntu-latest
    needs: contract-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run behavioral tests
      run: |
        cd backend
        python tests/behavioral/run_behavioral_tests.py
      env:
        PYTHONPATH: ${{ github.workspace }}/backend
    
    - name: Upload behavioral test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: behavioral-test-results
        path: backend/tests/behavioral/results/

  golden-master-check:
    runs-on: ubuntu-latest
    needs: [contract-tests, behavioral-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: Check golden masters exist
      run: |
        cd backend
        python -c "
        from pathlib import Path
        import sys
        
        golden_master_dir = Path('tests/contracts/golden_masters')
        
        if not golden_master_dir.exists() or not list(golden_master_dir.glob('*.json')):
            print('⚠️  WARNING: No golden masters found!')
            print('Run: python tests/contracts/capture_golden_masters.py')
            print('This is required before refactoring to ensure compatibility.')
            # Don't fail the build, just warn
        else:
            masters = list(golden_master_dir.glob('*.json'))
            print(f'✅ Found {len(masters)} golden master files')
        "
    
    - name: Run compatibility check
      if: github.event_name == 'pull_request'
      run: |
        cd backend
        # This would run the parallel comparison if refactored code exists
        echo "Ready to run parallel compatibility tests when refactoring begins"