🔒 [Room F24B74] Starting game: op_id=F24B74_1
🔍 DEBUG: Redeal limit check - multiplier: 1, limit: 2
🔧 DEBUG: Dealing weak hands to players at indices [0, 1] (max 9 points)
📊 DEBUG: Redeals so far: 0, Max allowed: 2
🔧 DEBUG: Found 24 weak pieces (≤9), 8 strong pieces (>9)
🔧 DEBUG: Andy (index 0) assigned weak hand
🔧 DEBUG: Bot 2 (index 1) assigned weak hand
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'HORSE_RED(6)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Andy has NO strong pieces!
  Bot 2: ['CANNON_BLACK(3)', 'HORSE_RED(6)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'CANNON_RED(4)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Bot 2 has NO strong pieces!
  Bot 3: ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'GENERAL_BLACK(13)']
    → Strong pieces (>9): 5
    → Has RED_GENERAL: False
  Bot 4: ['SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'GENERAL_RED(14)', 'ADVISOR_BLACK(11)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: True
🔍 PREP_STATE_DEBUG: Play order: [Andy - 0 pts, Bot 2 - 0 pts, Bot 3 - 0 pts, Bot 4 - 0 pts]
🔍 PREP_STATE_DEBUG: Play order types: [<class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>]
🎯 PREP_STATE_DEBUG: All weak players awaiting simultaneous decisions: {'Bot 2', 'Andy'}
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049364.564448 for phase preparation
🎮 FLIP_ANIMATION_DEBUG: Reason: Weak hands detected: ['Bot 2', 'Andy'] - awaiting simultaneous decisions
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049364.564569
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049364.5647109
🔄 PHASE_TRACKING_FIX: New phase detected None -> preparation
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: preparation
🎲 REDEAL_PHASE_DEBUG: Handling redeal decisions - awaiting: ['Bot 2', 'Andy']
🤖 REDEAL_PHASE_DEBUG: Bot Bot 2 will decide in 0.7s...
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🤖 REDEAL_PHASE_DEBUG: Bot Bot 2 making redeal decision
🤖 Bot Bot 2 deciding: ACCEPT redeal
✅ Bot Bot 2 ACCEPTED redeal
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
✅ [Room F24B74] Game and StateMachine started successfully: op_id=F24B74_1
✅ [Room F24B74] Bot manager registered for 3 bots
✅ Game started in room F24B74
DEBUG_WS_DISCONNECT: WebSocket client disconnected from room F24B74.
INFO:     connection closed
DEBUG_WS: Unregistered connection for room F24B74. Remaining connections: 0
DEBUG_WS: Room F24B74 has active game - keeping broadcast queue alive
INFO:     ('127.0.0.1', 53750) - "WebSocket /ws/F24B74" [accepted]
DEBUG_WS: Registered new connection for room F24B74. Total connections: 1
INFO:     connection open
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room F24B74 with data: {'room_id': 'F24B74'}
DEBUG_WS_RECEIVE: Sent current game phase preparation to client in room F24B74
DEBUG_WS_RECEIVE: Sent initial room state to client in room F24B74 after client_ready.
🔍 REDEAL_DEBUG: Processing REDEAL_REQUEST as accept for Bot 2
🔍 REDEAL_DEBUG: _handle_redeal_decision - Bot 2 decision: accept=True
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Bot 2': True}
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049365.566237 for phase preparation
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 2 accepted redeal (1/2 decided)
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049365.566387
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049365.56647
🔍 PHASE_TRACKING_FIX: Same phase update: preparation
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: preparation
🎲 REDEAL_PHASE_DEBUG: Handling redeal decisions - awaiting: ['Andy']
👤 REDEAL_PHASE_DEBUG: Player Andy is human, skipping
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
DEBUG_WS_RECEIVE: Received event 'accept_redeal' from client in room F24B74 with data: {'player_name': 'Andy'}
✅ Redeal accept queued: Andy
🔍 REDEAL_DEBUG: Processing REDEAL_RESPONSE for Andy, accept=True
🔍 REDEAL_DEBUG: _handle_redeal_decision - Andy decision: accept=True
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Bot 2': True, 'Andy': True}
🔍 REDEAL_DEBUG: _process_all_decisions - first_accepter: Andy, all decisions: {'Bot 2': True, 'Andy': True}
🔍 DEBUG: Redeal limit check - multiplier: 2, limit: 2
🔧 DEBUG: Dealing weak hands to players at indices [0, 1] (max 9 points)
📊 DEBUG: Redeals so far: 1, Max allowed: 2
🔧 DEBUG: Found 24 weak pieces (≤9), 8 strong pieces (>9)
🔧 DEBUG: Andy (index 0) assigned weak hand
🔧 DEBUG: Bot 2 (index 1) assigned weak hand
🔧 DEBUG: Final hands verification:
  Andy: ['HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'ELEPHANT_BLACK(9)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Andy has NO strong pieces!
  Bot 2: ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'CANNON_RED(4)', 'CHARIOT_RED(8)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Bot 2 has NO strong pieces!
  Bot 3: ['SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'HORSE_RED(6)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'ELEPHANT_RED(10)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
  Bot 4: ['SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'ELEPHANT_RED(10)']
    → Strong pieces (>9): 5
    → Has RED_GENERAL: True
🔍 PREP_STATE_DEBUG: Play order: [Andy - 0 pts, Bot 2 - 0 pts, Bot 3 - 0 pts, Bot 4 - 0 pts]
🔍 PREP_STATE_DEBUG: Play order types: [<class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>]
🎯 PREP_STATE_DEBUG: All weak players awaiting simultaneous decisions: {'Bot 2', 'Andy'}
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049371.0712588 for phase preparation
🎮 FLIP_ANIMATION_DEBUG: Reason: Weak hands detected: ['Bot 2', 'Andy'] - awaiting simultaneous decisions
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049371.0713868
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049371.071473
🔍 PHASE_TRACKING_FIX: Same phase update: preparation
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: preparation
🎲 REDEAL_PHASE_DEBUG: Handling redeal decisions - awaiting: ['Bot 2', 'Andy']
🎲 REDEAL_PHASE_DEBUG: Player Bot 2 already decided
👤 REDEAL_PHASE_DEBUG: Player Andy is human, skipping
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
DEBUG_WS_RECEIVE: Received event 'accept_redeal' from client in room F24B74 with data: {'player_name': 'Andy'}
✅ Redeal accept queued: Andy
🔍 REDEAL_DEBUG: Processing REDEAL_RESPONSE for Andy, accept=True
🔍 REDEAL_DEBUG: _handle_redeal_decision - Andy decision: accept=True
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Andy': True}
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049386.609117 for phase preparation
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Andy accepted redeal (1/2 decided)
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049386.609401
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049386.609609
🔍 PHASE_TRACKING_FIX: Same phase update: preparation
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: preparation
🎲 REDEAL_PHASE_DEBUG: Handling redeal decisions - awaiting: ['Bot 2']
🤖 REDEAL_PHASE_DEBUG: Bot Bot 2 will decide in 0.8s...
🤖 REDEAL_PHASE_DEBUG: Bot Bot 2 making redeal decision
🤖 Bot Bot 2 deciding: ACCEPT redeal
✅ Bot Bot 2 ACCEPTED redeal
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
⏳ PREP_STATE_DEBUG: Have weak players - waiting for event-based transition
🔍 REDEAL_DEBUG: Processing REDEAL_REQUEST as accept for Bot 2
🔍 REDEAL_DEBUG: _handle_redeal_decision - Bot 2 decision: accept=True
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Andy': True, 'Bot 2': True}
🔍 REDEAL_DEBUG: _process_all_decisions - first_accepter: Andy, all decisions: {'Andy': True, 'Bot 2': True}
🔍 DEBUG: Redeal limit check - multiplier: 3, limit: 2
🚫 DEBUG: Redeal limit (2) exceeded. Multiplier is 3 (>3)
🔄 DEBUG: Switching to guaranteed no redeal to prevent infinite loop.
🛡️ DEBUG: Dealing guaranteed no-redeal hands
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Andy gets strong piece: ELEPHANT_RED(10)
  → Bot 2 gets strong piece: ADVISOR_BLACK(11)
  → Bot 3 gets strong piece: GENERAL_BLACK(13)
  → Bot 4 gets strong piece: GENERAL_RED(14)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
  Bot 2: ['CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 3: ['SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'GENERAL_BLACK(13)', 'ADVISOR_BLACK(11)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 4: ['HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: True
✅ SUCCESS: No weak hands - redeal prevented!
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Andy
📢 DECL_STATE_DEBUG: Using round_starter: Andy
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049388.1301608 for phase declaration
🎮 FLIP_ANIMATION_DEBUG: Reason: Declaration phase setup - basic data
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049388.13034
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049388.130475
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049388.130562 for phase declaration
🎮 FLIP_ANIMATION_DEBUG: Reason: Declaration phase setup complete - current declarer: Andy
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049388.13072
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049388.130898
🔄 PHASE_TRACKING_FIX: New phase detected preparation -> declaration
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: declaration
👤 ENTERPRISE_BOT_DEBUG: Current declarer Andy is human - waiting
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Andy
🔍 BOT_ROUND_DEBUG: Game current_player: Andy
👤 Round starter is human or None: None
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: ''
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer '' index: -1
🔍 DECL_PHASE_DEBUG: Starting loop from index 0 to 4
🔍 DECL_PHASE_DEBUG: Checking player 0 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1752049393604}
DEBUG_WS_RECEIVE: Received event 'declare' from client in room F24B74 with data: {'value': 3, 'player_name': 'Andy'}
✅ Declaration queued: Andy -> 3
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049394.640157 for phase declaration
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Andy declared 3
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049394.640574
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049394.64082
🔍 PHASE_TRACKING_FIX: Same phase update: declaration
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: declaration
✅ PHASE_TRACKING_FIX: Marked declaration phase as triggered
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Andy'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Andy' index: 0
🔍 DECL_PHASE_DEBUG: Starting loop from index 1 to 4
🔍 DECL_PHASE_DEBUG: Checking player 1 (Bot 2), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 2 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3}
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will declare in 1.4s...
DEBUG_WS_RECEIVE: Received event 'ping' from client in room F24B74 with data: {'timestamp': 1752049395480}
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 2 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 1.4s...
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 2
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 1.3s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049399.990849 for phase declaration
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 2 declared 1
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049399.991106
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049399.99125
🔍 PHASE_TRACKING_FIX: Same phase update: declaration
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: declaration
✅ PHASE_TRACKING_FIX: Marked declaration phase as triggered
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 2'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 2' index: 1
🔍 DECL_PHASE_DEBUG: Starting loop from index 2 to 4
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3, 'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 1.3s...
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 2
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3, 'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 0.7s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049402.5682812 for phase declaration
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 3 declared 2
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049402.568537
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049402.568682
🔍 PHASE_TRACKING_FIX: Same phase update: declaration
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: declaration
✅ PHASE_TRACKING_FIX: Marked declaration phase as triggered
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 3'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 3' index: 2
🔍 DECL_PHASE_DEBUG: Starting loop from index 3 to 4
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3, 'Bot 2': 1, 'Bot 3': 2}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 1.5s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049404.319777 for phase declaration
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 4 declared 1
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049404.320035
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049404.3201852
🎯 NEW_TURN_DEBUG: Round 1, Turn 1 starting with starter Andy
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 1
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049404.320523 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: New turn 1 started with starter Andy
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049404.3207521
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049404.3208709
🔄 PHASE_TRACKING_FIX: New phase detected declaration -> turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Andy - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
Action declare not allowed in turn
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action declare from Bot 3 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 3 action rejected - preventing downstream processing
🚫 BOT_VALIDATION_FIX: Bot Bot 3 hand size after rejection: 8
Action declare not allowed in turn
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action declare from Bot 4 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 4 action rejected - preventing downstream processing
🚫 BOT_VALIDATION_FIX: Bot Bot 4 hand size after rejection: 8
Action declare not allowed in turn
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action declare from Bot 4 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 4 action rejected - preventing downstream processing
🚫 BOT_VALIDATION_FIX: Bot Bot 4 hand size after rejection: 8
DEBUG_WS_RECEIVE: Received event 'play' from client in room F24B74 with data: {'piece_indices': [2], 'player_name': 'Andy', 'play_value': 4}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [2]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 8
🎯 WS_PLAY_DEBUG: Added piece at index 2: CANNON_RED(4)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['CANNON_RED(4)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 VALIDATE_DEBUG: Validating play from Andy
🎯 VALIDATE_DEBUG: Current turn_plays: []
🎯 VALIDATE_DEBUG: turn_complete: False
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['CANNON_RED(4)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 4
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: Broadcasting play - turn_complete: False, next_player: Bot 2
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049417.344026 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Andy played 1 pieces
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049417.344234
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049417.3444428
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: ['Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 0.7s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_BLACK(11)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.4s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_BLACK(13)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.1s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_RED(14)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data broadcasted - all players should see the plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [CANNON_RED(4)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 VALIDATE_DEBUG: Validating play from Bot 2
🎯 VALIDATE_DEBUG: Current turn_plays: ['Andy']
🎯 VALIDATE_DEBUG: turn_complete: False
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 11
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: Broadcasting play - turn_complete: False, next_player: Bot 3
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049421.66655 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 2 played 1 pieces
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049421.666857
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049421.667017
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Andy', 'Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.6s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_BLACK(13)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.4s...
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1752049423604}
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_RED(14)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data broadcasted - all players should see the plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 VALIDATE_DEBUG: Validating play from Bot 3
🎯 VALIDATE_DEBUG: Current turn_plays: ['Andy', 'Bot 2']
🎯 VALIDATE_DEBUG: turn_complete: False
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['GENERAL_BLACK(13)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 13
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: Broadcasting play - turn_complete: False, next_player: Bot 4
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049424.108788 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 3 played 1 pieces
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049424.1091158
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049424.109271
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Andy', 'Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 0.8s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_RED(14)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data broadcasted - all players should see the plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [GENERAL_BLACK(13)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 VALIDATE_DEBUG: Validating play from Bot 4
🎯 VALIDATE_DEBUG: Current turn_plays: ['Andy', 'Bot 2', 'Bot 3']
🎯 VALIDATE_DEBUG: turn_complete: False
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['GENERAL_RED(14)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 14
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 4 played, next: None
🎯 UPDATE_DEBUG: Broadcasting play - turn_complete: True, next_player: Bot 4
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049425.074359 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 4 played 1 pieces
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049425.074806
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049425.074972
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 UPDATE_DEBUG: Phase data broadcasted - all players should see the plays
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 1 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 1 Winner determined: Bot 4
🎯 CAPTURED_PILES_DEBUG: Bot 4 captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 4
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 4
🎮 FLIP_ANIMATION_DEBUG: Starting 5s delay for flip animation at 1752049425.075422
🎮 FLIP_ANIMATION_DEBUG: Current phase before delay: turn
DEBUG_WS_RECEIVE: Received event 'ping' from client in room F24B74 with data: {'timestamp': 1752049425480}
🎮 FLIP_ANIMATION_DEBUG: 5s delay completed at 1752049430.075525, elapsed: 5.00s
🎮 FLIP_ANIMATION_DEBUG: Current phase after delay: turn
🎮 FLIP_ANIMATION_DEBUG: Now broadcasting turn completion event
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049430.075825 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Turn completed - winner: Bot 4
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049430.0764632
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049430.0766542
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 7, 'Bot 2': 7, 'Bot 3': 7, 'Bot 4': 7}
🔧 CONSISTENCY_CHECK: Min: 7, Max: 7
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 7
🎮 FLIP_ANIMATION_DEBUG: _broadcast_turn_completion_enterprise called at 1752049430.077128
🎮 FLIP_ANIMATION_DEBUG: About to broadcast turn_complete event at 1752049430.07719
DEBUG_WS: Message for event 'turn_complete' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: turn_complete event broadcasted at 1752049430.07775
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn after delay
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 4
🎯 NEW_TURN_DEBUG: Round 1, Turn 2 starting with starter Bot 4
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 2
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049437.079114 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: New turn 2 started with starter Bot 4
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049437.07934
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049437.079498
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 4 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.1s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play PAIR (18 pts): ELEPHANT, ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [GENERAL_RED(14)], 'piece_count': 1, 'required_count': None, 'next_player': None, 'turn_complete': True}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
🎯 VALIDATE_DEBUG: Validating play from Bot 3
🎯 VALIDATE_DEBUG: Current turn_plays: []
🎯 VALIDATE_DEBUG: turn_complete: False
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_BLACK(13)]}, timestamp=datetime.datetime(2025, 7, 9, 1, 23, 42, 257587), sequence_id=15, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 VALIDATE_DEBUG: Validating play from Bot 4
🎯 VALIDATE_DEBUG: Current turn_plays: []
🎯 VALIDATE_DEBUG: turn_complete: False
Player Bot 4 doesn't have piece: GENERAL_RED(14)
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 7, 9, 1, 23, 43, 907013), sequence_id=16, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
🎯 VALIDATE_DEBUG: Validating play from Bot 4
🎯 VALIDATE_DEBUG: Current turn_plays: []
🎯 VALIDATE_DEBUG: turn_complete: False
Player Bot 4 doesn't have piece: GENERAL_RED(14)
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 7, 9, 1, 23, 44, 871879), sequence_id=17, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
🎯 VALIDATE_DEBUG: Validating play from Bot 4
🎯 VALIDATE_DEBUG: Current turn_plays: []
🎯 VALIDATE_DEBUG: turn_complete: False
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 2 pieces: ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Calculated play type: PAIR
🎯 TURN_STATE_DEBUG: Calculated play value: 18
🎯 TURN_STATE_DEBUG: Setting required piece count to 2
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: Broadcasting play - turn_complete: False, next_player: Andy
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049438.858171 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 4 played 2 pieces
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049438.858413
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049438.8585842
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: ['Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data broadcasted - all players should see the plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ELEPHANT_BLACK(9), ELEPHANT_BLACK(9)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'play' from client in room F24B74 with data: {'piece_indices': [0, 6], 'player_name': 'Andy', 'play_value': 20}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0, 6]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 7
🎯 WS_PLAY_DEBUG: Added piece at index 0: ELEPHANT_RED(10)
🎯 WS_PLAY_DEBUG: Added piece at index 6: ELEPHANT_RED(10)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ELEPHANT_RED(10)', 'ELEPHANT_RED(10)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 VALIDATE_DEBUG: Validating play from Andy
🎯 VALIDATE_DEBUG: Current turn_plays: ['Bot 4']
🎯 VALIDATE_DEBUG: turn_complete: False
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Andy playing 2 pieces: ['ELEPHANT_RED(10)', 'ELEPHANT_RED(10)']
🎯 TURN_STATE_DEBUG: Calculated play type: PAIR
🎯 TURN_STATE_DEBUG: Calculated play value: 20
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: Broadcasting play - turn_complete: False, next_player: Bot 2
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049445.950749 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Andy played 2 pieces
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049445.951714
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049445.952018
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: ['Bot 4', 'Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 0.7s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (16 pts): CHARIOT, CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (4 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data broadcasted - all players should see the plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [ELEPHANT_RED(10), ELEPHANT_RED(10)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 VALIDATE_DEBUG: Validating play from Bot 2
🎯 VALIDATE_DEBUG: Current turn_plays: ['Bot 4', 'Andy']
🎯 VALIDATE_DEBUG: turn_complete: False
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 2 pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
🎯 TURN_STATE_DEBUG: Calculated play type: PAIR
🎯 TURN_STATE_DEBUG: Calculated play value: 16
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: Broadcasting play - turn_complete: False, next_player: Bot 3
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049448.4764621 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 2 played 2 pieces
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049448.476804
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049448.476935
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 4', 'Andy', 'Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.1s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (4 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data broadcasted - all players should see the plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [CHARIOT_RED(8), CHARIOT_RED(8)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 VALIDATE_DEBUG: Validating play from Bot 3
🎯 VALIDATE_DEBUG: Current turn_plays: ['Bot 4', 'Andy', 'Bot 2']
🎯 VALIDATE_DEBUG: turn_complete: False
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 2 pieces: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: PAIR
🎯 TURN_STATE_DEBUG: Calculated play value: 4
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Bot 3 played, next: None
🎯 UPDATE_DEBUG: Broadcasting play - turn_complete: True, next_player: Bot 3
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049449.7659369 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Player Bot 3 played 2 pieces
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049449.76631
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049449.766446
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 UPDATE_DEBUG: Phase data broadcasted - all players should see the plays
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 2 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 2 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 2 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 2 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
🎮 FLIP_ANIMATION_DEBUG: Starting 5s delay for flip animation at 1752049449.766855
🎮 FLIP_ANIMATION_DEBUG: Current phase before delay: turn
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1752049453605}
🎮 FLIP_ANIMATION_DEBUG: 5s delay completed at 1752049454.768068, elapsed: 5.00s
🎮 FLIP_ANIMATION_DEBUG: Current phase after delay: turn
🎮 FLIP_ANIMATION_DEBUG: Now broadcasting turn completion event
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049454.768338 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: Turn completed - winner: Andy
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049454.7687838
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049454.768946
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 5, 'Bot 2': 5, 'Bot 3': 5, 'Bot 4': 5}
🔧 CONSISTENCY_CHECK: Min: 5, Max: 5
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 5
🎮 FLIP_ANIMATION_DEBUG: _broadcast_turn_completion_enterprise called at 1752049454.7692978
🎮 FLIP_ANIMATION_DEBUG: About to broadcast turn_complete event at 1752049454.769357
DEBUG_WS: Message for event 'turn_complete' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: turn_complete event broadcasted at 1752049454.769841
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn after delay
DEBUG_WS_RECEIVE: Received event 'ping' from client in room F24B74 with data: {'timestamp': 1752049455481}
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Andy
🎯 NEW_TURN_DEBUG: Round 1, Turn 3 starting with starter Andy
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 3
🎮 FLIP_ANIMATION_DEBUG: _auto_broadcast_phase_change called at 1752049461.771016 for phase turn
🎮 FLIP_ANIMATION_DEBUG: Reason: New turn 3 started with starter Andy
🎮 FLIP_ANIMATION_DEBUG: Broadcasting phase_change event at 1752049461.7711098
DEBUG_WS: Message for event 'phase_change' added to queue for room F24B74.
🎮 FLIP_ANIMATION_DEBUG: phase_change event broadcast complete at 1752049461.7711732
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: _handle_enterprise_phase_change called - phase: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Andy - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_RED(2), SOLDIER_RED(2)], 'piece_count': 2, 'required_count': None, 'next_player': None, 'turn_complete': True}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 VALIDATE_DEBUG: Validating play from Bot 3
🎯 VALIDATE_DEBUG: Current turn_plays: []
🎯 VALIDATE_DEBUG: turn_complete: False
Not Bot 3's turn - expected Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2), SOLDIER_RED(2)]}, timestamp=datetime.datetime(2025, 7, 9, 1, 24, 9, 565041), sequence_id=22, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1752049483606}