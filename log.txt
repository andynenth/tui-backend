DEBUG_WS: Starting enhanced broadcast queue processor for room lobby.
DEBUG_WS_QUEUE_START: Room lobby processor task starting, queue exists: True
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room lobby with data: {'room_id': 'lobby'}
DEBUG_LOBBY_WS: Sent initial room list to new lobby client
DEBUG_WS_RECEIVE: Received event 'create_room' from client in room lobby with data: {'player_name': 'Andy'}
DEBUG_LOBBY_WS: Created room D68EE5 for player Andy
DEBUG_WS: Entering broadcast method for room lobby, event room_created
üîî LOBBY_BROADCAST: Attempting to broadcast 'room_created' to lobby
üîî LOBBY_BROADCAST: Data keys: ['room_id', 'host_name', 'timestamp']
üîî LOBBY_BROADCAST: Found 1 lobby connections
üîî LOBBY_BROADCAST: Queue size: 0
DEBUG_WS: Attempting to queue event 'room_created' for room lobby with data: {'room_id': 'lobby', 'host_name': 'Andy', 'timestamp': 1751410007.0989592}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'room_created'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'room_created' - 109 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'room_created'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'room_created'
DEBUG_WS: Message for event 'room_created' added to queue for room lobby.
üîî LOBBY_BROADCAST: Message added to lobby queue. New queue size: 1
DEBUG_WS: Entering broadcast method for room lobby, event room_list_update
üîî LOBBY_BROADCAST: Attempting to broadcast 'room_list_update' to lobby
üîî LOBBY_BROADCAST: Data keys: ['rooms', 'timestamp', 'reason']
üîî LOBBY_BROADCAST: Found 1 lobby connections
üîî LOBBY_BROADCAST: Queue size: 0
DEBUG_WS: Attempting to queue event 'room_list_update' for room lobby with data: {'rooms': [{'room_id': 'D68EE5', 'host_name': 'Andy', 'started': False, 'slots': {'P1': {'name': 'Andy', 'is_bot': False, 'is_host': True}, 'P2': {'name': 'Bot 2', 'is_bot': True, 'is_host': False}, 'P3': {'name': 'Bot 3', 'is_bot': True, 'is_host': False}, 'P4': {'name': 'Bot 4', 'is_bot': True, 'is_host': False}}, 'players': [{'name': 'Andy', 'is_bot': False, 'is_host': True}, {'name': 'Bot 2', 'is_bot': True, 'is_host': False}, {'name': 'Bot 3', 'is_bot': True, 'is_host': False}, {'name': 'Bot 4', 'is_bot': True, 'is_host': False}], 'occupied_slots': 4, 'total_slots': 4}], 'timestamp': 1751410007.141172, 'reason': 'new_room_created', 'room_id': 'lobby'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'room_list_update'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'room_list_update' - 703 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'room_list_update'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'room_list_update'
DEBUG_WS: Message for event 'room_list_update' added to queue for room lobby.
üîî LOBBY_BROADCAST: Message added to lobby queue. New queue size: 1
‚úÖ Notified lobby about new room: D68EE5
DEBUG_WS_QUEUE: Room lobby got message: room_created
DEBUG_WS: Broadcasting event 'room_created' (op_id: unknown) to 1 clients in room lobby.
INFO:     ('127.0.0.1', 52296) - "WebSocket /ws/lobby" [accepted]
DEBUG_WS: Registered new connection for room lobby. Total connections: 2
INFO:     connection open
DEBUG_WS: Error sending to client in room lobby: 
DEBUG_WS_DISCONNECT: WebSocket client disconnected from room D68EE5.
INFO:     connection closed
DEBUG_WS: Attempted to unregister from non-existent room D68EE5
DEBUG_WS_QUEUE: Room lobby got message: room_list_update
DEBUG_WS: Broadcasting event 'room_list_update' (op_id: unknown) to 1 clients in room lobby.
DEBUG_WS: Successfully sent 'room_list_update' to a client in room lobby.
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room lobby with data: {'room_id': 'lobby'}
DEBUG_LOBBY_WS: Sent initial room list to new lobby client
INFO:     ('127.0.0.1', 52302) - "WebSocket /ws/D68EE5" [accepted]
DEBUG_WS: Created new enhanced broadcast queue and task for room D68EE5.
DEBUG_WS: Registered new connection for room D68EE5. Total connections: 1
INFO:     connection open
DEBUG_WS: Starting enhanced broadcast queue processor for room D68EE5.
DEBUG_WS_QUEUE_START: Room D68EE5 processor task starting, queue exists: True
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room D68EE5 with data: {'room_id': 'D68EE5'}
DEBUG_WS_RECEIVE: Sent initial room state to client in room D68EE5 after client_ready.
DEBUG_WS_RECEIVE: Received event 'get_room_state' from client in room D68EE5 with data: {}
DEBUG_WS_RECEIVE: Sent room state to client in room D68EE5
DEBUG_WS_RECEIVE: Received event 'start_game' from client in room D68EE5 with data: {}
üîí [Room D68EE5] Starting game: op_id=D68EE5_1
üîß TRANSITION_DEBUG: _immediate_transition_to called: None -> GamePhase.PREPARATION
üîß ASYNC_DEBUG: Thread: MainThread
üîß ASYNC_DEBUG: Is running: True
üîß ASYNC_DEBUG: Transition lock acquired: False
üîß TRANSITION_DEBUG: Starting transition steps...
üîß TRANSITION_DEBUG: Step 1 - Cleanup tasks
üîß TRANSITION_DEBUG: Step 2 - Exit current state
üîß TRANSITION_DEBUG: Step 3 - Atomic state update
üîß TRANSITION_DEBUG: Step 4 - Enter new state
üîß TRANSITION_DEBUG: Step 4a - About to call on_enter() for preparation
üîß BASE_STATE_DEBUG: on_enter() called for preparation phase
{"timestamp": "2025-07-01T22:46:48.029991Z", "level": "INFO", "logger": "game.state.preparation", "message": "Entering preparation phase", "module": "base_state", "function": "on_enter", "line": 37}
üîß BASE_STATE_DEBUG: Clearing phase_data
üîß BASE_STATE_DEBUG: About to call _setup_phase() for preparation
{"timestamp": "2025-07-01T22:46:48.030165Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfb4 Preparation phase starting - dealing cards", "module": "preparation_state", "function": "_setup_phase", "line": 80}
üé¥ PREP_STATE_DEBUG: Setup phase starting for room D68EE5
üîÑ PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
üîÑ PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
üîÑ PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
üîÑ PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
üé¥ PREP_STATE_DEBUG: Using guaranteed no redeal dealing
üõ°Ô∏è DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
üõ°Ô∏è DEBUG: Available pieces - Strong: 7, Weak: 24
  ‚Üí Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  ‚Üí Andy gets strong piece: ELEPHANT_RED(10)
  ‚Üí Bot 3 gets strong piece: ADVISOR_RED(12)
  ‚Üí Bot 4 gets strong piece: ADVISOR_BLACK(11)
üõ°Ô∏è DEBUG: Guaranteed no-redeal hands dealt:
üîß DEBUG: Final hands verification:
  Andy: ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)']
    ‚Üí Strong pieces (>9): 3
    ‚Üí Has RED_GENERAL: False
  Bot 2: ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)']
    ‚Üí Strong pieces (>9): 2
    ‚Üí Has RED_GENERAL: True
  Bot 3: ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)']
    ‚Üí Strong pieces (>9): 1
    ‚Üí Has RED_GENERAL: False
  Bot 4: ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)']
    ‚Üí Strong pieces (>9): 2
    ‚Üí Has RED_GENERAL: False
‚úÖ SUCCESS: No weak hands - redeal prevented!
{"timestamp": "2025-07-01T22:46:48.030880Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udd0d Weak hand check - Found 0 weak players: set()", "module": "preparation_state", "function": "_deal_cards", "line": 141}
{"timestamp": "2025-07-01T22:46:48.030951Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udd0d STARTER_DEBUG: Current round number: 1", "module": "preparation_state", "function": "_determine_starter", "line": 396}
üîç STARTER_DEBUG: Looking for GENERAL_RED holder in round 1
üîç STARTER_DEBUG: Checking player Andy
üîç STARTER_DEBUG: Player Andy hand: ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)']
üîç STARTER_DEBUG: Checking piece 'HORSE_BLACK(5)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'ELEPHANT_RED(10)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'ELEPHANT_RED(10)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'ELEPHANT_BLACK(9)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'CHARIOT_RED(8)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'HORSE_RED(6)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'HORSE_BLACK(5)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'GENERAL_BLACK(13)' for GENERAL_RED
üîç STARTER_DEBUG: Checking player Bot 2
üîç STARTER_DEBUG: Player Bot 2 hand: ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)']
üîç STARTER_DEBUG: Checking piece 'CANNON_RED(4)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'SOLDIER_RED(2)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'SOLDIER_BLACK(1)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'SOLDIER_RED(2)' for GENERAL_RED
üîç STARTER_DEBUG: Checking piece 'GENERAL_RED(14)' for GENERAL_RED
‚úÖ STARTER_DEBUG: Found GENERAL_RED in Bot 2's hand!
{"timestamp": "2025-07-01T22:46:48.031489Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf Starter: Bot 2 (has GENERAL_RED)", "module": "preparation_state", "function": "_determine_starter", "line": 411}
‚úÖ PREP_STATE_DEBUG: No weak hands - determined new starter: Bot 2
{"timestamp": "2025-07-01T22:46:48.031574Z", "level": "INFO", "logger": "game.state.preparation", "message": "\u2705 No weak hands - determined new starter: Bot 2", "module": "preparation_state", "function": "_deal_cards", "line": 212}
üéØ PREP_STATE_DEBUG: No weak hands detected - auto-transitioning to Declaration phase
{"timestamp": "2025-07-01T22:46:48.031646Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf No weak hands detected - transitioning to Declaration phase", "module": "preparation_state", "function": "_deal_cards", "line": 217}
üîß TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.PREPARATION -> GamePhase.DECLARATION
üîß ASYNC_DEBUG: Thread: MainThread
üîß ASYNC_DEBUG: Is running: True
üîß ASYNC_DEBUG: Transition lock acquired: False
üîß TRANSITION_DEBUG: Starting transition steps...
üîß TRANSITION_DEBUG: Step 1 - Cleanup tasks
üîß TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-01T22:46:48.031797Z", "level": "INFO", "logger": "game.state.preparation", "message": "Exiting preparation phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-01T22:46:48.031878Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf Round starter already set: Bot 2", "module": "preparation_state", "function": "_cleanup_phase", "line": 94}
üéØ PREP_STATE_DEBUG: Cleanup phase - current_player: Bot 2
üéØ PREP_STATE_DEBUG: Cleanup phase - round_starter: Bot 2
{"timestamp": "2025-07-01T22:46:48.032042Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udccb Preparation complete - Starter: Bot 2, Multiplier: 1x", "module": "preparation_state", "function": "_cleanup_phase", "line": 105}
üîß TRANSITION_DEBUG: Step 3 - Atomic state update
üîß TRANSITION_DEBUG: Step 4 - Enter new state
üîß TRANSITION_DEBUG: Step 4a - About to call on_enter() for declaration
üîß BASE_STATE_DEBUG: on_enter() called for declaration phase
{"timestamp": "2025-07-01T22:46:48.032141Z", "level": "INFO", "logger": "game.state.declaration", "message": "Entering declaration phase", "module": "base_state", "function": "on_enter", "line": 37}
üîß BASE_STATE_DEBUG: Clearing phase_data
üîß BASE_STATE_DEBUG: About to call _setup_phase() for declaration
üì¢ DECL_STATE_DEBUG: Using round_starter: Bot 2
{"timestamp": "2025-07-01T22:46:48.032225Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup - basic data", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'allowed_actions': ['declare', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Declaration phase setup - basic data', 'sequence': 1, 'timestamp': 1751410008.0324638, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1221 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
{"timestamp": "2025-07-01T22:46:48.032712Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room D68EE5 - Declaration phase setup - basic data", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
ü§ñ ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
{"timestamp": "2025-07-01T22:46:48.032818Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup complete - current declarer: Bot 2", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'allowed_actions': ['declare', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Declaration phase setup complete - current declarer: Bot 2', 'sequence': 2, 'timestamp': 1751410008.03298, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1270 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
{"timestamp": "2025-07-01T22:46:48.033245Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room D68EE5 - Declaration phase setup complete - current declarer: Bot 2", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
ü§ñ ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Bot 2
ü§ñ ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 2
üîî BOT_MANAGER_DEBUG: Received event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'current_declarer': 'Bot 2', 'reason': 'Declaration phase setup complete - current declarer: Bot 2'}
‚úÖ BOT_MANAGER_DEBUG: Found handler for room D68EE5, delegating to handler...
üéÆ BOT_HANDLER_DEBUG: Room D68EE5 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
üîç BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
üîç BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
üîß BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
üîß BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
üöÄ BOT_HANDLER_DEBUG: Analyzing enterprise phase change
üîß BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
üîß BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
üîß BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
ü§ñ BOT_SINGLE_DECLARE: Handling declaration for Bot 2
ü§ñ BOT_SINGLE_DECLARE: Bot Bot 2 will declare in 0.6s...
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
üîç BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
ü§ñ BOT_SINGLE_DECLARE: Bot Bot 2 declaring at position 0
üîß BOT_DECLARE_DEBUG: Creating fire-and-forget task for state machine action
‚úÖ BOT_DECLARE_DEBUG: Fire-and-forget declaration task created for Bot 2
‚úÖ Bot Bot 2 declared 2
‚úÖ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
ü§ñ DECLARATION_DEBUG: Triggering bot manager for declaration phase
üîß DECLARATION_DEBUG: Bot manager active games: ['D68EE5']
‚ö†Ô∏è DECLARATION_DEBUG: No room_id found to trigger bot manager
üîß BASE_STATE_DEBUG: _setup_phase() completed successfully for declaration
üîß TRANSITION_DEBUG: Step 4b - on_enter() completed for declaration
üîß TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
üîß TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
üîß TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10c750ed0>
üîß TRANSITION_DEBUG: Is running: True
üîß TRANSITION_DEBUG: Step 5 - About to store event
üîß STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.PREPARATION -> GamePhase.DECLARATION
üîß STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'preparation', 'new_phase': 'declaration', 'timestamp': '2025-07-01T15:46:48.612440', 'game_state': {}}
üîß STORE_EVENT_DEBUG: Added game context: {'round_number': 1, 'player_count': 4, 'current_player': 'Bot 2'}
üîß STORE_EVENT_DEBUG: About to call action_queue.store_state_event
üîß STORE_EVENT_DEBUG: action_queue.store_state_event completed
üîß STORE_EVENT_DEBUG: Event storage successful
üîß TRANSITION_DEBUG: Step 5 - Store event completed
üîß TRANSITION_DEBUG: Step 6 - About to broadcast
üöÄ STATE_MACHINE_DEBUG: Broadcasting phase change to declaration with reason: No weak hands detected - preparation complete
üîß BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for declaration
üîß BROADCAST_DEBUG: Prepared base_data: {'phase': 'declaration', 'allowed_actions': ['declare', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete'}
üîß BROADCAST_DEBUG: Added display config: {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
üîß BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
üîß BROADCAST_DEBUG: About to call broadcast_event with phase_change
üîß BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
üîß BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'allowed_actions': ['declare', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete', 'display': {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'timestamp': 1751410008.61271, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1321 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
üîÑ RELIABLE_MSG: Message retry worker started
üîß HANDLE_ACTION_DEBUG: handle_action called for Bot 2 declare
üîß HANDLE_ACTION_DEBUG: State machine running check: True
üîß HANDLE_ACTION_DEBUG: Converting action to event
üîß HANDLE_ACTION_DEBUG: Creating GameEvent from action
üîß HANDLE_ACTION_DEBUG: GameEvent created successfully
üîß HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
üîß EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 2
üîß EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
‚úÖ EVENT_PROCESSOR_DEBUG: Event validation passed
üîß EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
üîß EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
üîß EVENT_PROCESSOR_DEBUG: Processing event in current state
üîß PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
üîß PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10c750ed0>
üîß PROCESS_EVENT_DEBUG: Checking if state has process_event method
üîß PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-01T22:46:48.613675Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Player Bot 2 declared 2", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'allowed_actions': ['declare', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 2}, 'declaration_total': 2, 'current_declarer': 'Bot 3'}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Player Bot 2 declared 2', 'sequence': 3, 'timestamp': 1751410008.6138759, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1247 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
üîß BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
üîß BROADCAST_DEBUG: broadcast_event completed successfully
‚úÖ STATE_MACHINE_DEBUG: Phase change broadcast completed for declaration
üîß TRANSITION_DEBUG: Step 7 - About to notify bot manager
ü§ñ STATE_MACHINE_DEBUG: Notifying bot manager about phase declaration for room D68EE5
üîî BOT_MANAGER_DEBUG: Received event 'round_started' for room D68EE5 with data: {'phase': 'declaration', 'starter': 'Bot 2'}
‚úÖ BOT_MANAGER_DEBUG: Found handler for room D68EE5, delegating to handler...
üéÆ BOT_HANDLER_DEBUG: Room D68EE5 handling event 'round_started' with data keys: ['phase', 'starter']
üîç BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
üîç BOT_HANDLER_DEBUG: Event value repr: 'round_started'
üîß BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
üîß BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
üé™ BOT_HANDLER_DEBUG: Analyzing round start
üîß BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
üîß BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
üîß BOT_MANAGER_LOCK_FIX: Executing action round_start (lock-free)
üîç BOT_ROUND_DEBUG: Game state current_order: None
üîç BOT_ROUND_DEBUG: Game round_starter: Bot 2
üîç BOT_ROUND_DEBUG: Game current_player: Bot 2
üîß BOT_ROUND_DEBUG: Declarations now handled by enterprise phase change - skipping old path
‚úÖ BOT_MANAGER_LOCK_FIX: Action round_start completed successfully
üîß TRANSITION_DEBUG: Step 7 - Bot manager notification completed
‚úÖ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.PREPARATION -> GamePhase.DECLARATION
üîß BASE_STATE_DEBUG: _setup_phase() completed successfully for preparation
üîß TRANSITION_DEBUG: Step 4b - on_enter() completed for preparation
üîß TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
üîß TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
üîß TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10c750ed0>
üîß TRANSITION_DEBUG: Is running: True
üîß TRANSITION_DEBUG: Step 5 - About to store event
üîß STORE_EVENT_DEBUG: _store_phase_change_event called: None -> GamePhase.PREPARATION
üîß STORE_EVENT_DEBUG: Prepared payload: {'old_phase': None, 'new_phase': 'preparation', 'timestamp': '2025-07-01T15:46:48.614635', 'game_state': {}}
üîß STORE_EVENT_DEBUG: Added game context: {'round_number': 1, 'player_count': 4, 'current_player': 'Bot 2'}
üîß STORE_EVENT_DEBUG: About to call action_queue.store_state_event
üîß STORE_EVENT_DEBUG: action_queue.store_state_event completed
üîß STORE_EVENT_DEBUG: Event storage successful
üîß TRANSITION_DEBUG: Step 5 - Store event completed
üîß TRANSITION_DEBUG: Step 6 - About to broadcast
üöÄ STATE_MACHINE_DEBUG: Broadcasting phase change to preparation with reason: Initial state machine start
üîß BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for preparation
üîß BROADCAST_DEBUG: Prepared base_data: {'phase': 'preparation', 'allowed_actions': ['declare', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 2}, 'declaration_total': 2, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Initial state machine start'}
üîß BROADCAST_DEBUG: Added display config: {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
üîß BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
üîß BROADCAST_DEBUG: About to call broadcast_event with phase_change
üîß BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
üîß BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'preparation', 'allowed_actions': ['declare', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 2}, 'declaration_total': 2, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Initial state machine start', 'display': {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'timestamp': 1751410008.6151512, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1315 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
{"timestamp": "2025-07-01T22:46:48.615570Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room D68EE5 - Player Bot 2 declared 2", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
ü§ñ ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 declared 2
ü§ñ ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
üîî BOT_MANAGER_DEBUG: Received event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 2}, 'declaration_total': 2, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Player Bot 2 declared 2'}
‚úÖ BOT_MANAGER_DEBUG: Found handler for room D68EE5, delegating to handler...
üéÆ BOT_HANDLER_DEBUG: Room D68EE5 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
üîç BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
üîç BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
üîß BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
üîß BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
üöÄ BOT_HANDLER_DEBUG: Analyzing enterprise phase change
üîß BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
üîß BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
üîß BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
ü§ñ BOT_SINGLE_DECLARE: Handling declaration for Bot 3
ü§ñ BOT_SINGLE_DECLARE: Bot Bot 3 will declare in 0.8s...
üîß BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
üîß BROADCAST_DEBUG: broadcast_event completed successfully
‚úÖ STATE_MACHINE_DEBUG: Phase change broadcast completed for preparation
üîß TRANSITION_DEBUG: Step 7 - About to notify bot manager
ü§ñ STATE_MACHINE_DEBUG: Notifying bot manager about phase preparation for room D68EE5
üîß TRANSITION_DEBUG: Step 7 - Bot manager notification completed
‚úÖ TRANSITION_DEBUG: All transition steps completed successfully: None -> GamePhase.PREPARATION
‚úÖ [Room D68EE5] Game and StateMachine started successfully: op_id=D68EE5_1
‚úÖ [Room D68EE5] Bot manager registered for 3 bots
‚úÖ Game started in room D68EE5
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
DEBUG_WS_DISCONNECT: WebSocket client disconnected from room D68EE5.
INFO:     connection closed
DEBUG_WS: Unregistered connection for room D68EE5. Remaining connections: 0
DEBUG_WS: Room D68EE5 has active game - keeping broadcast queue alive
INFO:     ('127.0.0.1', 52308) - "WebSocket /ws/D68EE5" [accepted]
DEBUG_WS: Registered new connection for room D68EE5. Total connections: 1
INFO:     connection open
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room D68EE5 with data: {'room_id': 'D68EE5'}
DEBUG_WS_RECEIVE: Sent current game phase declaration to client in room D68EE5
DEBUG_WS_RECEIVE: Sent initial room state to client in room D68EE5 after client_ready.
üîç BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
ü§ñ BOT_SINGLE_DECLARE: Bot Bot 3 declaring at position 1
üîß BOT_DECLARE_DEBUG: Creating fire-and-forget task for state machine action
‚úÖ BOT_DECLARE_DEBUG: Fire-and-forget declaration task created for Bot 3
‚úÖ Bot Bot 3 declared 1
‚úÖ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
ü§ñ DECLARATION_DEBUG: Triggering bot manager after Bot 2 declared
‚ö†Ô∏è DECLARATION_DEBUG: No room_id found to trigger bot manager
{"timestamp": "2025-07-01T22:46:49.454534Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Bot 2 declared 2", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
‚úÖ PROCESS_EVENT_DEBUG: State process_event completed: True
‚úÖ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
üîß EVENT_PROCESSOR_DEBUG: Checking transitions: False
üîß EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
üîß EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
üîß EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
üîß EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
‚úÖ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
üîß HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.841s
üîß HANDLE_ACTION_DEBUG: Processing result
‚úÖ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.8413870334625244, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 2', 'value': 2, 'total': 2}}
üîß BOT_DECLARE_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.8413870334625244, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 2', 'value': 2, 'total': 2}}
üîß HANDLE_ACTION_DEBUG: handle_action called for Bot 3 declare
üîß HANDLE_ACTION_DEBUG: State machine running check: True
üîß HANDLE_ACTION_DEBUG: Converting action to event
üîß HANDLE_ACTION_DEBUG: Creating GameEvent from action
üîß HANDLE_ACTION_DEBUG: GameEvent created successfully
üîß HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
üîß EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 3
üîß EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
‚úÖ EVENT_PROCESSOR_DEBUG: Event validation passed
üîß EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
üîß EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
üîß EVENT_PROCESSOR_DEBUG: Processing event in current state
üîß PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
üîß PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10c750ed0>
üîß PROCESS_EVENT_DEBUG: Checking if state has process_event method
üîß PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-01T22:46:49.455244Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Player Bot 3 declared 1", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'allowed_actions': ['declare', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 2, 'declarations': {'Bot 2': 2, 'Bot 3': 1}, 'declaration_total': 3, 'current_declarer': 'Bot 4'}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Player Bot 3 declared 1', 'sequence': 4, 'timestamp': 1751410009.455439, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1258 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
{"timestamp": "2025-07-01T22:46:49.455957Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room D68EE5 - Player Bot 3 declared 1", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
ü§ñ ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 declared 1
ü§ñ ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 4
üîî BOT_MANAGER_DEBUG: Received event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 2, 'declarations': {'Bot 2': 2, 'Bot 3': 1}, 'declaration_total': 3, 'current_declarer': 'Bot 4'}, 'current_declarer': 'Bot 4', 'reason': 'Player Bot 3 declared 1'}
‚úÖ BOT_MANAGER_DEBUG: Found handler for room D68EE5, delegating to handler...
üéÆ BOT_HANDLER_DEBUG: Room D68EE5 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
üîç BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
üîç BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
üîß BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
üîß BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
üöÄ BOT_HANDLER_DEBUG: Analyzing enterprise phase change
üîß BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
üîß BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
üîß BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
ü§ñ BOT_SINGLE_DECLARE: Handling declaration for Bot 4
ü§ñ BOT_SINGLE_DECLARE: Bot Bot 4 will declare in 0.6s...
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
üîç BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
ü§ñ BOT_SINGLE_DECLARE: Bot Bot 4 declaring at position 2
üîß BOT_DECLARE_DEBUG: Creating fire-and-forget task for state machine action
‚úÖ BOT_DECLARE_DEBUG: Fire-and-forget declaration task created for Bot 4
‚úÖ Bot Bot 4 declared 1
‚úÖ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
ü§ñ DECLARATION_DEBUG: Triggering bot manager after Bot 3 declared
‚ö†Ô∏è DECLARATION_DEBUG: No room_id found to trigger bot manager
{"timestamp": "2025-07-01T22:46:50.098117Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Bot 3 declared 1", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
‚úÖ PROCESS_EVENT_DEBUG: State process_event completed: True
‚úÖ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
üîß EVENT_PROCESSOR_DEBUG: Checking transitions: False
üîß EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
üîß EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
üîß EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
üîß EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
‚úÖ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
üîß HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.643s
üîß HANDLE_ACTION_DEBUG: Processing result
‚úÖ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.6431999206542969, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 3', 'value': 1, 'total': 3}}
üîß BOT_DECLARE_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.6431999206542969, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 3', 'value': 1, 'total': 3}}
üîß HANDLE_ACTION_DEBUG: handle_action called for Bot 4 declare
üîß HANDLE_ACTION_DEBUG: State machine running check: True
üîß HANDLE_ACTION_DEBUG: Converting action to event
üîß HANDLE_ACTION_DEBUG: Creating GameEvent from action
üîß HANDLE_ACTION_DEBUG: GameEvent created successfully
üîß HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
üîß EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 4
üîß EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
‚úÖ EVENT_PROCESSOR_DEBUG: Event validation passed
üîß EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
üîß EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
üîß EVENT_PROCESSOR_DEBUG: Processing event in current state
üîß PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
üîß PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10c750ed0>
üîß PROCESS_EVENT_DEBUG: Checking if state has process_event method
üîß PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-01T22:46:50.098503Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Player Bot 4 declared 1", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'allowed_actions': ['declare', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 3, 'declarations': {'Bot 2': 2, 'Bot 3': 1, 'Bot 4': 1}, 'declaration_total': 4, 'current_declarer': 'Andy'}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Player Bot 4 declared 1', 'sequence': 5, 'timestamp': 1751410010.098607, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1269 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
{"timestamp": "2025-07-01T22:46:50.098881Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room D68EE5 - Player Bot 4 declared 1", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
ü§ñ ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 declared 1
ü§ñ ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Andy
üîî BOT_MANAGER_DEBUG: Received event 'phase_change' for room D68EE5 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 3, 'declarations': {'Bot 2': 2, 'Bot 3': 1, 'Bot 4': 1}, 'declaration_total': 4, 'current_declarer': 'Andy'}, 'current_declarer': 'Andy', 'reason': 'Player Bot 4 declared 1'}
‚úÖ BOT_MANAGER_DEBUG: Found handler for room D68EE5, delegating to handler...
üéÆ BOT_HANDLER_DEBUG: Room D68EE5 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
üîç BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
üîç BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
üîß BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
üîß BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
üöÄ BOT_HANDLER_DEBUG: Analyzing enterprise phase change
üîß BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
üîß BOT_MANAGER_LOCK_FIX: Step 2 - Executing 0 bot actions (lock-free)
ü§ñ DECLARATION_DEBUG: Triggering bot manager after Bot 4 declared
‚ö†Ô∏è DECLARATION_DEBUG: No room_id found to trigger bot manager
{"timestamp": "2025-07-01T22:46:50.099160Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Bot 4 declared 1", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
‚úÖ PROCESS_EVENT_DEBUG: State process_event completed: True
‚úÖ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
üîß EVENT_PROCESSOR_DEBUG: Checking transitions: False
üîß EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
üîß EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
üîß EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
üîß EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
‚úÖ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
üîß HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.001s
üîß HANDLE_ACTION_DEBUG: Processing result
‚úÖ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.0008990764617919922, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 4', 'value': 1, 'total': 4}}
üîß BOT_DECLARE_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.0008990764617919922, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 4', 'value': 1, 'total': 4}}
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
DEBUG_WS_RECEIVE: Received event 'declare' from client in room D68EE5 with data: {'value': 3, 'player_name': 'Andy'}
üîß HANDLE_ACTION_DEBUG: handle_action called for Andy declare
üîß HANDLE_ACTION_DEBUG: State machine running check: True
üîß HANDLE_ACTION_DEBUG: Converting action to event
üîß HANDLE_ACTION_DEBUG: Creating GameEvent from action
üîß HANDLE_ACTION_DEBUG: GameEvent created successfully
üîß HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
üîß EVENT_PROCESSOR_DEBUG: handle_event called for declare from Andy
üîß EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
‚úÖ EVENT_PROCESSOR_DEBUG: Event validation passed
üîß EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
üîß EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
üîß EVENT_PROCESSOR_DEBUG: Processing event in current state
üîß PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
üîß PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10c750ed0>
üîß PROCESS_EVENT_DEBUG: Checking if state has process_event method
üîß PROCESS_EVENT_DEBUG: Using state's process_event method
üéØ DECLARATION_DEBUG: Final declaration by Andy - atomic transition to Turn phase
{"timestamp": "2025-07-01T22:46:54.853364Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfaf Final declaration by Andy - atomic transition to Turn phase", "module": "declaration_state", "function": "_handle_declaration", "line": 148}
üîß TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.DECLARATION -> GamePhase.TURN
üîß ASYNC_DEBUG: Thread: MainThread
üîß ASYNC_DEBUG: Is running: True
üîß ASYNC_DEBUG: Transition lock acquired: False
üîß TRANSITION_DEBUG: Starting transition steps...
üîß TRANSITION_DEBUG: Step 1 - Cleanup tasks
üîß TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-01T22:46:54.853554Z", "level": "INFO", "logger": "game.state.declaration", "message": "Exiting declaration phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-01T22:46:54.853632Z", "level": "INFO", "logger": "game.state.declaration", "message": "Copied declarations to game: {'Bot 2': 2, 'Bot 3': 1, 'Bot 4': 1, 'Andy': 3}", "module": "declaration_state", "function": "_cleanup_phase", "line": 95}
üîß TRANSITION_DEBUG: Step 3 - Atomic state update
üîß TRANSITION_DEBUG: Step 4 - Enter new state
üîß TRANSITION_DEBUG: Step 4a - About to call on_enter() for turn
üîß BASE_STATE_DEBUG: on_enter() called for turn phase
{"timestamp": "2025-07-01T22:46:54.853743Z", "level": "INFO", "logger": "game.state.turn", "message": "Entering turn phase", "module": "base_state", "function": "on_enter", "line": 37}
üîß BASE_STATE_DEBUG: Clearing phase_data
üîß BASE_STATE_DEBUG: About to call _setup_phase() for turn
üîß TURN_STATE_DEBUG: _setup_phase() called
üîß TURN_STATE_DEBUG: Got game object: <engine.game.Game object at 0x10c3534d0>
üîß TURN_STATE_DEBUG: Initial turn starter from game: Bot 2
üîß TURN_STATE_DEBUG: Final turn starter: Bot 2
{"timestamp": "2025-07-01T22:46:54.853853Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfaf Turn phase starting - Bot 2 starts first turn", "module": "turn_state", "function": "_setup_phase", "line": 105}
üîß TURN_STATE_DEBUG: About to call _start_new_turn()
üéØ NEW_TURN_DEBUG: Round 1, Turn 1 starting with starter Bot 2
üîß NEW_TURN_DEBUG: About to notify bot manager for Bot 2
üîß NEW_TURN_DEBUG: Bot manager notification task created (fire-and-forget)
üîß NEW_TURN_DEBUG: Bot manager notification completed (non-blocking)
üîß NEW_TURN_DEBUG: Getting current_turn_number from game.turn_number
üîß NEW_TURN_DEBUG: Got current_turn_number: 1
üî¢ TURN_NUMBER_DEBUG: Backend game.turn_number = 1
üîß NEW_TURN_DEBUG: About to call update_phase_data
{"timestamp": "2025-07-01T22:46:54.854023Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: New turn 1 started with starter Bot 2", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 1, 'reason': 'New turn 1 started with starter Bot 2', 'sequence': 1, 'timestamp': 1751410014.854471, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1264 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
ü§ñ NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room D68EE5
üîî BOT_MANAGER_DEBUG: Received event 'turn_started' for room D68EE5 with data: {'starter': 'Bot 2'}
‚úÖ BOT_MANAGER_DEBUG: Found handler for room D68EE5, delegating to handler...
üéÆ BOT_HANDLER_DEBUG: Room D68EE5 handling event 'turn_started' with data keys: ['starter']
üîç BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
üîç BOT_HANDLER_DEBUG: Event value repr: 'turn_started'
üîß BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
üîß BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
üöÄ BOT_HANDLER_DEBUG: Analyzing turn start
üîß BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
üîß BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
üîß BOT_MANAGER_LOCK_FIX: Executing action turn_start (lock-free)
üéÆ Bot Manager: Handling turn start for Bot 2
ü§ñ Bot Bot 2 will play first
ü§ñ Bot Bot 2 thinking for 0.6s...
{"timestamp": "2025-07-01T22:46:54.855073Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room D68EE5 - New turn 1 started with starter Bot 2", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
ü§ñ ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 1 started with starter Bot 2
ü§ñ ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
üîî BOT_MANAGER_DEBUG: Received event 'phase_change' for room D68EE5 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 2', 'reason': 'New turn 1 started with starter Bot 2'}
‚úÖ BOT_MANAGER_DEBUG: Found handler for room D68EE5, delegating to handler...
üéÆ BOT_HANDLER_DEBUG: Room D68EE5 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
üîç BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
üîç BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
üîß BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
üîß BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
üöÄ BOT_HANDLER_DEBUG: Analyzing enterprise phase change
‚úÖ REFINED_FIX: Allowing new trigger for current player Bot 2 from phase_change
‚úÖ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from phase_change (hash: 36a22356f55e)
üîß BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
üîß BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
üîß BOT_MANAGER_LOCK_FIX: Executing action enterprise_turn_play (lock-free)
üéØ PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
üéØ PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
‚úÖ BOT_MANAGER_LOCK_FIX: Action enterprise_turn_play completed successfully
üîß NEW_TURN_DEBUG: update_phase_data completed successfully
{"timestamp": "2025-07-01T22:46:54.855713Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfaf New turn started - order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']", "module": "turn_state", "function": "_start_new_turn", "line": 276}
üîß TURN_STATE_DEBUG: _start_new_turn() completed successfully
üîß BASE_STATE_DEBUG: _setup_phase() completed successfully for turn
üîß TRANSITION_DEBUG: Step 4b - on_enter() completed for turn
üîß TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
üîß TRANSITION_DEBUG: Current phase: GamePhase.TURN
üîß TRANSITION_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10c5830d0>
üîß TRANSITION_DEBUG: Is running: True
üîß TRANSITION_DEBUG: Step 5 - About to store event
üîß STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.DECLARATION -> GamePhase.TURN
üîß STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'declaration', 'new_phase': 'turn', 'timestamp': '2025-07-01T15:46:54.856377', 'game_state': {}}
üîß STORE_EVENT_DEBUG: Added game context: {'round_number': 1, 'player_count': 4, 'current_player': 'Bot 2'}
üîß STORE_EVENT_DEBUG: About to call action_queue.store_state_event
üîß STORE_EVENT_DEBUG: action_queue.store_state_event completed
üîß STORE_EVENT_DEBUG: Event storage successful
üîß TRANSITION_DEBUG: Step 5 - Store event completed
üîß TRANSITION_DEBUG: Step 6 - About to broadcast
üöÄ STATE_MACHINE_DEBUG: Broadcasting phase change to turn with reason: All player declarations complete - final: Andy declared 3
üîß BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for turn
üîß BROADCAST_DEBUG: Prepared base_data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'immediate': True, 'reason': 'All player declarations complete - final: Andy declared 3'}
üîß BROADCAST_DEBUG: Added display config: {'type': 'turn_active', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
üîß BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
üîß BROADCAST_DEBUG: About to call broadcast_event with phase_change
üîß BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
üîß BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'immediate': True, 'reason': 'All player declarations complete - final: Andy declared 3', 'display': {'type': 'turn_active', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'timestamp': 1751410014.856822, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1380 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
üîß BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
üîß BROADCAST_DEBUG: broadcast_event completed successfully
‚úÖ STATE_MACHINE_DEBUG: Phase change broadcast completed for turn
üîß TRANSITION_DEBUG: Step 7 - About to notify bot manager
ü§ñ STATE_MACHINE_DEBUG: Notifying bot manager about phase turn for room D68EE5
üîß DUPLICATE_FIX: Skipping duplicate turn_started event - turn state handles this
üîß TRANSITION_DEBUG: Step 7 - Bot manager notification completed
‚úÖ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.DECLARATION -> GamePhase.TURN
{"timestamp": "2025-07-01T22:46:54.857381Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Andy declared 3", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
‚úÖ PROCESS_EVENT_DEBUG: State process_event completed: False
‚úÖ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: False
üîß EVENT_PROCESSOR_DEBUG: Checking transitions: False
üîß EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
üîß EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
üîß EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
üîß EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
‚úÖ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
üîß HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.004s
üîß HANDLE_ACTION_DEBUG: Processing result
‚úÖ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 0.004458904266357422, 'reason': "Declaration processing error: 'declaration_order'", 'data': {}}
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
ü§ñ Bot Bot 2 choosing first play...
üîß BOT_SUBMIT_DEBUG: _bot_play_first() method called for Bot 2
üîß BOT_SUBMIT_DEBUG: Bot hand: ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)']
üîß BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for first play by Bot 2
üîß BOT_SUBMIT_DEBUG: Hand size: 8, Required count: None (first play)
ü§ñ BOT chooses to play SINGLE (14 pts): GENERAL
üîß BOT_SUBMIT_DEBUG: ai.choose_best_play returned 1 pieces for first play by Bot 2
ü§ñ Bot Bot 2 will play 1 pieces: ['GENERAL_RED(14)']
üîß BOT_SUBMIT_DEBUG: This is from _bot_play_first() - bot is first player
üéØ BOT_MANAGER_DEBUG: state_machine exists: True
üîß BOT_SUBMIT_DEBUG: About to call _bot_play_first for Bot Bot 2
üîß BOT_SUBMIT_DEBUG: Selected pieces count: 1
üîß BOT_SUBMIT_DEBUG: Selected pieces: ['GENERAL_RED(14)']
üîß BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 2
üîß BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 2
üîß BOT_SUBMIT_DEBUG: Action details - player: Bot 2, type: ActionType.PLAY_PIECES, is_bot: True
üîß BOT_SUBMIT_DEBUG: Action payload pieces count: 1
üîß BOT_SUBMIT_DEBUG: Calling state_machine.handle_action for Bot Bot 2
üîß HANDLE_ACTION_DEBUG: handle_action called for Bot 2 play_pieces
üîß HANDLE_ACTION_DEBUG: State machine running check: True
üîß HANDLE_ACTION_DEBUG: Converting action to event
üîß HANDLE_ACTION_DEBUG: Creating GameEvent from action
üîß HANDLE_ACTION_DEBUG: GameEvent created successfully
üîß HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
üîß EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 2
üîß EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
‚úÖ EVENT_PROCESSOR_DEBUG: Event validation passed
üîß EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
üîß EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
üîß EVENT_PROCESSOR_DEBUG: Processing event in current state
üîß PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
üîß PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10c5830d0>
üîß PROCESS_EVENT_DEBUG: Checking if state has process_event method
üîß PROCESS_EVENT_DEBUG: Using state's process_event method
üîß VALIDATION_DEBUG: Validating bot Bot 2 action
üîß VALIDATION_DEBUG: Current player: Bot 2
üîß VALIDATION_DEBUG: Turn plays: []
üîß VALIDATION_DEBUG: Payload: {'pieces': [GENERAL_RED(14)]}
üîß VALIDATION_DEBUG: Required piece count: None
‚úÖ VALIDATION_DEBUG: Turn validation PASSED - Bot 2 == Bot 2
‚úÖ VALIDATION_DEBUG: Already played validation PASSED - Bot 2 not in turn_plays
‚úÖ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
‚úÖ VALIDATION_DEBUG: Pieces format validation PASSED - 1 pieces
üîß VALIDATION_DEBUG: Piece count: 1, Required: None
‚úÖ VALIDATION_DEBUG: Starter piece count validation PASSED - 1 in 1-6 range
‚úÖ VALIDATION_DEBUG: All validation checks PASSED for Bot 2
üéØ TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
üéØ TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
üéØ TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
üéØ TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['GENERAL_RED(14)']
üéØ TURN_STATE_DEBUG: Setting required piece count to 1
üéØ TURN_STATE_DEBUG: Before setting - required_piece_count was: None
üéØ TURN_STATE_DEBUG: After setting - required_piece_count is: 1
{"timestamp": "2025-07-01T22:46:55.492468Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 2 (starter) plays 1 pieces - setting required count", "module": "turn_state", "function": "_handle_play_pieces", "line": 365}
{"timestamp": "2025-07-01T22:46:55.492567Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 2 plays: [GENERAL_RED(14)] (value: 0)", "module": "turn_state", "function": "_handle_play_pieces", "line": 379}
üéØ TURN_STATE_DEBUG: Before advancing - current_player_index: 0
üéØ TURN_STATE_DEBUG: After advancing - current_player_index: 1
üéØ TURN_STATE_DEBUG: Next player: Bot 3
üéØ TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 2 played, next: Bot 3
üéØ UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
{"timestamp": "2025-07-01T22:46:55.492671Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Bot 2 played 1 pieces", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room D68EE5, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room D68EE5 with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'timeout', 'player_disconnect', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751410015.49217}}, 'turn_complete': False, 'current_turn_number': 1}, 'players': {'Andy': {'hand': ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 4': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Player Bot 2 played 1 pieces', 'sequence': 2, 'timestamp': 1751410015.4928489, 'room_id': 'D68EE5'}
üîß SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
üîß SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1401 chars
üîß SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
‚úÖ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room D68EE5.
{"timestamp": "2025-07-01T22:46:55.493260Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room D68EE5 - Player Bot 2 played 1 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
ü§ñ ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
ü§ñ ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
üîî BOT_MANAGER_DEBUG: Received event 'phase_change' for room D68EE5 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751410015.49217}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
‚úÖ BOT_MANAGER_DEBUG: Found handler for room D68EE5, delegating to handler...
üéÆ BOT_HANDLER_DEBUG: Room D68EE5 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
üîç BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
üîç BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
üîß BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
üîß BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
üöÄ BOT_HANDLER_DEBUG: Analyzing enterprise phase change
‚úÖ REFINED_FIX: Allowing new trigger for current player Bot 3 from phase_change
‚úÖ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from phase_change (hash: ac20a113e367)
üîß BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
üîß BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
üîß BOT_MANAGER_LOCK_FIX: Executing action enterprise_turn_play (lock-free)
üéØ PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
üéØ PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
üéØ PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
‚úÖ REFINED_FIX: Allowing new trigger for current player Bot 3 from player_played
‚úÖ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from player_played (hash: 7f32b05165ac)
ü§ñ PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
ü§ñ PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.8s...
DEBUG_WS_QUEUE: Room D68EE5 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room D68EE5.
DEBUG_WS: Successfully sent 'phase_change' to a client in room D68EE5.
üîß BOT_SUBMIT_DEBUG: About to call _bot_play() for Bot 3
üîß BOT_SUBMIT_DEBUG: Bot object: Bot 3 - 0 pts
üîß BOT_SUBMIT_DEBUG: Bot hand size: 8
üîß BOT_SUBMIT_DEBUG: _bot_play() method called for Bot 3
üîß BOT_SUBMIT_DEBUG: Bot hand: ['SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)']
üîß BOT_SUBMIT_DEBUG: Starting piece selection logic for Bot 3
üéØ BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
üîß BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for Bot 3
üîß BOT_SUBMIT_DEBUG: Hand size: 8, Required count: 1
ü§ñ BOT chooses to play SINGLE (12 pts): ADVISOR
üîß BOT_SUBMIT_DEBUG: ai.choose_best_play returned 1 pieces for Bot 3
üéØ BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
ü§ñ Bot Bot 3 will play 1 pieces: ['ADVISOR_RED(12)']
üîß BOT_SUBMIT_DEBUG: This is from _bot_play() - bot is following another player
üîß BOT_SUBMIT_DEBUG: About to call _bot_play for Bot Bot 3
üîß BOT_SUBMIT_DEBUG: Selected pieces count: 1
üîß BOT_SUBMIT_DEBUG: Selected pieces: ['ADVISOR_RED(12)']
üîß BOT_SUBMIT_DEBUG: Required piece count was: 1
üîß BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 3
üîß BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 3
üîß BOT_SUBMIT_DEBUG: Action details - player: Bot 3, type: ActionType.PLAY_PIECES, is_bot: True
üîß BOT_SUBMIT_DEBUG: Action payload pieces count: 1
üîß BOT_SUBMIT_DEBUG: Calling state_machine.handle_action for Bot Bot 3
üîß HANDLE_ACTION_DEBUG: handle_action called for Bot 3 play_pieces
üîß HANDLE_ACTION_DEBUG: State machine running check: True
üîß HANDLE_ACTION_DEBUG: Converting action to event
üîß HANDLE_ACTION_DEBUG: Creating GameEvent from action
üîß HANDLE_ACTION_DEBUG: GameEvent created successfully
üîß HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
üîß EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 3
üîß EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
‚úÖ EVENT_PROCESSOR_DEBUG: Event validation passed
üîß EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
‚ùå EVENT_PROCESSOR_DEBUG: Timeout waiting for processing_lock after 5 seconds
EventProcessor timeout for event play_pieces from Bot 2
üîß HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 5.002s
üîß HANDLE_ACTION_DEBUG: Processing result
‚úÖ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 5.0022430419921875, 'reason': 'EventProcessor timeout - possible deadlock', 'data': {}}
‚úÖ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 2
üéØ BOT_PLAY_DEBUG: State machine result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 5.0022430419921875, 'reason': 'EventProcessor timeout - possible deadlock', 'data': {}}
üéØ BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
‚úÖ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
‚úÖ BOT_MANAGER_LOCK_FIX: Action turn_start completed successfully
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751410037151}