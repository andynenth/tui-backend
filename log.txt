🔒 [Room AC30F8] Starting game: op_id=AC30F8_1
🔍 DEBUG: Redeal limit check - multiplier: 1, limit: 2
🔧 DEBUG: Dealing weak hands to players at indices [0, 1] (max 9 points)
📊 DEBUG: Redeals so far: 0, Max allowed: 2
🔧 DEBUG: Found 24 weak pieces (≤9), 8 strong pieces (>9)
🔧 DEBUG: Andy (index 0) assigned weak hand
🔧 DEBUG: Bot 2 (index 1) assigned weak hand
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Andy has NO strong pieces!
  Bot 2: ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Bot 2 has NO strong pieces!
  Bot 3: ['CHARIOT_BLACK(7)', 'SOLDIER_BLACK(1)', 'ELEPHANT_RED(10)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'GENERAL_RED(14)', 'GENERAL_BLACK(13)']
    → Strong pieces (>9): 5
    → Has RED_GENERAL: True
  Bot 4: ['ELEPHANT_RED(10)', 'HORSE_RED(6)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
🔍 PREP_STATE_DEBUG: Play order: [Andy - 0 pts, Bot 2 - 0 pts, Bot 3 - 0 pts, Bot 4 - 0 pts]
🔍 PREP_STATE_DEBUG: Play order types: [<class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>]
🎯 PREP_STATE_DEBUG: All weak players awaiting simultaneous decisions: {'Bot 2', 'Andy'}
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🤖 PREP_STATE_DEBUG: Triggering bot manager for simultaneous redeal decisions...
🤖 PREP_STATE_DEBUG: Bot weak player found: Bot 2
👤 PREP_STATE_DEBUG: Human weak player: Andy - waiting for UI
🔄 BOT_HANDLER_DEBUG: Handling simultaneous redeal decisions
🤖 SIMULTANEOUS_REDEAL: Handling 1 bot decisions: ['Bot 2']
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
✅ [Room AC30F8] Game and StateMachine started successfully: op_id=AC30F8_1
✅ [Room AC30F8] Bot manager registered for 3 bots
✅ Game started in room AC30F8
DEBUG_WS_DISCONNECT: WebSocket client disconnected from room AC30F8.
INFO:     connection closed
DEBUG_WS: Unregistered connection for room AC30F8. Remaining connections: 0
DEBUG_WS: Room AC30F8 has active game - keeping broadcast queue alive
INFO:     ('127.0.0.1', 57450) - "WebSocket /ws/AC30F8" [accepted]
DEBUG_WS: Registered new connection for room AC30F8. Total connections: 1
INFO:     connection open
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room AC30F8 with data: {'room_id': 'AC30F8'}
DEBUG_WS_RECEIVE: Sent current game phase preparation to client in room AC30F8
DEBUG_WS_RECEIVE: Sent initial room state to client in room AC30F8 after client_ready.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🤖 Bot Bot 2 deciding after 1.6s delay: ACCEPT
✅ Bot Bot 2 ACCEPTED redeal
🔍 REDEAL_DEBUG: Processing REDEAL_REQUEST as accept for Bot 2
🔍 REDEAL_DEBUG: _handle_redeal_decision - Bot 2 decision: accept=True
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Bot 2': True}
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {'Bot 2': True}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (1/2)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {'Bot 2': True}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (1/2)
DEBUG_WS_RECEIVE: Received event 'decline_redeal' from client in room AC30F8 with data: {'player_name': 'Andy'}
✅ Redeal decline queued: Andy
🔍 REDEAL_DEBUG: Processing REDEAL_RESPONSE for Andy, accept=False
🔍 REDEAL_DEBUG: _handle_redeal_decision - Andy decision: accept=False
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Bot 2': True, 'Andy': False}
🔍 REDEAL_DEBUG: _process_all_decisions - first_accepter: Bot 2, all decisions: {'Bot 2': True, 'Andy': False}
🔍 DEBUG: Redeal limit check - multiplier: 2, limit: 2
🔧 DEBUG: Dealing weak hands to players at indices [0, 1] (max 9 points)
📊 DEBUG: Redeals so far: 1, Max allowed: 2
🔧 DEBUG: Found 24 weak pieces (≤9), 8 strong pieces (>9)
🔧 DEBUG: Andy (index 0) assigned weak hand
🔧 DEBUG: Bot 2 (index 1) assigned weak hand
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'HORSE_RED(6)', 'SOLDIER_BLACK(1)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Andy has NO strong pieces!
  Bot 2: ['CANNON_RED(4)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CHARIOT_RED(8)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Bot 2 has NO strong pieces!
  Bot 3: ['CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'GENERAL_BLACK(13)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
  Bot 4: ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)']
    → Strong pieces (>9): 5
    → Has RED_GENERAL: True
🔍 PREP_STATE_DEBUG: Play order: [Bot 2 - 0 pts, Bot 3 - 0 pts, Bot 4 - 0 pts, Andy - 0 pts]
🔍 PREP_STATE_DEBUG: Play order types: [<class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>]
🎯 PREP_STATE_DEBUG: All weak players awaiting simultaneous decisions: {'Bot 2', 'Andy'}
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🤖 PREP_STATE_DEBUG: Triggering bot manager for simultaneous redeal decisions...
🤖 PREP_STATE_DEBUG: Bot weak player found: Bot 2
👤 PREP_STATE_DEBUG: Human weak player: Andy - waiting for UI
🔄 BOT_HANDLER_DEBUG: Handling simultaneous redeal decisions
🤖 SIMULTANEOUS_REDEAL: Handling 1 bot decisions: ['Bot 2']
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Bot 2', 'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/2)
🤖 Bot Bot 2 deciding after 2.8s delay: ACCEPT
✅ Bot Bot 2 ACCEPTED redeal
🔍 REDEAL_DEBUG: Processing REDEAL_REQUEST as accept for Bot 2
🔍 REDEAL_DEBUG: _handle_redeal_decision - Bot 2 decision: accept=True
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Bot 2': True}
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {'Bot 2': True}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (1/2)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Bot 2', 'Andy'}
   - Redeal decisions: {'Bot 2': True}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (1/2)
DEBUG_WS_RECEIVE: Received event 'accept_redeal' from client in room AC30F8 with data: {'player_name': 'Andy'}
✅ Redeal accept queued: Andy
🔍 REDEAL_DEBUG: Processing REDEAL_RESPONSE for Andy, accept=True
🔍 REDEAL_DEBUG: _handle_redeal_decision - Andy decision: accept=True
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Bot 2': True, 'Andy': True}
🔍 REDEAL_DEBUG: _process_all_decisions - first_accepter: Bot 2, all decisions: {'Bot 2': True, 'Andy': True}
🔍 DEBUG: Redeal limit check - multiplier: 3, limit: 2
🚫 DEBUG: Redeal limit (2) exceeded. Multiplier is 3 (>3)
🔄 DEBUG: Switching to guaranteed no redeal to prevent infinite loop.
🛡️ DEBUG: Dealing guaranteed no-redeal hands
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Andy gets strong piece: ADVISOR_BLACK(11)
  → Bot 2 gets strong piece: ELEPHANT_RED(10)
  → Bot 3 gets strong piece: GENERAL_BLACK(13)
  → Bot 4 gets strong piece: ADVISOR_RED(12)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 2: ['HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 3: ['CHARIOT_BLACK(7)', 'HORSE_RED(6)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'GENERAL_BLACK(13)', 'CANNON_RED(4)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 4: ['GENERAL_RED(14)', 'SOLDIER_BLACK(1)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: True
✅ SUCCESS: No weak hands - redeal prevented!
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Bot 2
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: set()
   - Redeal decisions: {}
   - Weak players awaiting: set()
   - All decisions received: True
✅ PREP_STATE_DEBUG: No weak players, transitioning to DECLARATION
📢 DECL_STATE_DEBUG: Using round_starter: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔄 PHASE_TRACKING_FIX: New phase detected None -> declaration
✅ PHASE_TRACKING_FIX: Marked declaration phase as triggered
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: ''
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Last declarer '' index: -1
🔍 DECL_PHASE_DEBUG: Starting loop from index 0 to 4
🔍 DECL_PHASE_DEBUG: Checking player 0 (Bot 2), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 2 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {}
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 2 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 1 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 4
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 3
🔍 DECL_PHASE_DEBUG: Checking player 3 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🚫 PHASE_TRACKING_FIX: Already triggered actions for declaration phase via round_started - skipping
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 PHASE_TRACKING_FIX: Same phase update: declaration
✅ PHASE_TRACKING_FIX: Marked declaration phase as triggered
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 2'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 2' index: 0
🔍 DECL_PHASE_DEBUG: Starting loop from index 1 to 4
🔍 DECL_PHASE_DEBUG: Checking player 1 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 4
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 3
🔍 DECL_PHASE_DEBUG: Checking player 3 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 PHASE_TRACKING_FIX: Same phase update: declaration
✅ PHASE_TRACKING_FIX: Marked declaration phase as triggered
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 3'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 3' index: 1
🔍 DECL_PHASE_DEBUG: Starting loop from index 2 to 4
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Bot 2': 1, 'Bot 3': 4}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 3
🔍 DECL_PHASE_DEBUG: Checking player 3 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 PHASE_TRACKING_FIX: Same phase update: declaration
👤 ENTERPRISE_BOT_DEBUG: Current declarer Andy is human - waiting
Wrong player turn: Bot 3, expected: Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 4}, timestamp=datetime.datetime(2025, 7, 4, 21, 54, 13, 198945), sequence_id=7, is_bot=True)
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action declare from Bot 3 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 3 action rejected - preventing downstream processing
🚫 BOT_VALIDATION_FIX: Bot Bot 3 hand size after rejection: 8
Wrong player turn: Bot 4, expected: Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 3}, timestamp=datetime.datetime(2025, 7, 4, 21, 54, 13, 451175), sequence_id=8, is_bot=True)
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action declare from Bot 4 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 4 action rejected - preventing downstream processing
🚫 BOT_VALIDATION_FIX: Bot Bot 4 hand size after rejection: 8
Wrong player turn: Bot 4, expected: Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 3}, timestamp=datetime.datetime(2025, 7, 4, 21, 54, 13, 704166), sequence_id=9, is_bot=True)
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action declare from Bot 4 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 4 action rejected - preventing downstream processing
🚫 BOT_VALIDATION_FIX: Bot Bot 4 hand size after rejection: 8
DEBUG_WS_RECEIVE: Received event 'declare' from client in room AC30F8 with data: {'value': 1, 'player_name': 'Andy'}
✅ Declaration queued: Andy -> 1
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🎯 NEW_TURN_DEBUG: Round 1, Turn 1 starting with starter Bot 2
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room AC30F8
🔍 DUPLICATE_DEBUG: Received turn_started event for Bot 2 from unknown
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 1.6s...
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🤖 Bot Bot 2 will play 1 pieces: ['ADVISOR_BLACK(11)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 1
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔄 PHASE_TRACKING_FIX: New phase detected declaration -> turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - checking for duplicates
✅ REFINED_FIX: Allowing new trigger for current player Bot 2 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from phase_change (hash: 36a22356f55e)
🚫 RACE_CONDITION_FIX: Skipping enterprise trigger for Bot 2 - turn starter already triggered by turn_started event
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 DUPLICATE_DEBUG: Received turn_started event for Bot 2 from unknown
🚫 TURN_START_FIX: Skipping duplicate turn_started event for Bot 2 turn 1
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - checking for duplicates
✅ REFINED_FIX: Allowing new trigger for current player Bot 3 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from phase_change (hash: ac20a113e367)
✅ RACE_CONDITION_FIX: Triggering bot play for Bot 3 - no duplicates detected
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_BLACK(13)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['GENERAL_BLACK(13)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - checking for duplicates
✅ REFINED_FIX: Allowing new trigger for current player Bot 4 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from phase_change (hash: d2d760f0daf4)
✅ RACE_CONDITION_FIX: Triggering bot play for Bot 4 - no duplicates detected
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_RED(14)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [GENERAL_BLACK(13)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751691272703}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['GENERAL_RED(14)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room AC30F8.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [GENERAL_RED(14)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'ping' from client in room AC30F8 with data: {'timestamp': 1751691274956}
