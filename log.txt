RecoveryService.ts:66 🔄 RecoveryService: Initialized
ServiceIntegration.ts:79 🔗 ServiceIntegration: Initialized
ServiceIntegration.ts:98 
ServiceIntegration.ts:99 🎯 =============================================
ServiceIntegration.ts:100 🚀 PHASE 1-4 ENTERPRISE ARCHITECTURE STARTING
ServiceIntegration.ts:101 🎯 =============================================
ServiceIntegration.ts:102 🔧 Initializing integrated service layer...
ServiceIntegration.ts:567 ✅ NetworkService integrated
ServiceIntegration.ts:575 ✅ GameService integrated
ServiceIntegration.ts:583 ✅ RecoveryService integrated
ServiceIntegration.ts:594 🩺 Health monitoring started (30000ms interval)
ServiceIntegration.ts:124 
ServiceIntegration.ts:125 ✅ =============================================
ServiceIntegration.ts:126 🎉 PHASE 1-4 ARCHITECTURE FULLY OPERATIONAL!
ServiceIntegration.ts:127 ✅ =============================================
ServiceIntegration.ts:128 🔗 NetworkService: Advanced WebSocket with auto-reconnection
ServiceIntegration.ts:129 🎮 GameService: React hooks with TypeScript state management
ServiceIntegration.ts:130 🛠️ RecoveryService: Automatic error recovery and health monitoring
ServiceIntegration.ts:131 🏢 Enterprise Features: Event sourcing, logging, metrics
ServiceIntegration.ts:132 ✅ Service integration layer initialized successfully
ServiceIntegration.ts:133 
App.jsx:117 🎮 Global services initialized
 🔗 Connection opened to room lobby
 🎮 State Change: NETWORK_CONNECTED
 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 Diff: {isConnected: {…}, lastEventSequence: {…}}
 🌐 NetworkService: Connected to room lobby
 🎮 State Change: NETWORK_DISCONNECTED
 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 Diff: {isConnected: {…}, lastEventSequence: {…}}
 🌐 NetworkService: Disconnected from room lobby
 📤 Queued message for lobby: get_rooms (1 queued)
 🔗 Connection opened to room lobby
 🎮 State Change: NETWORK_CONNECTED
 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 Diff: {isConnected: {…}, lastEventSequence: {…}}
 🌐 NetworkService: Connected to room lobby
 Received room_list_update: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1752025226541}
 🎮 State Change: NETWORK_DISCONNECTED
 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 Diff: {isConnected: {…}, lastEventSequence: {…}}
 🌐 NetworkService: Disconnected from room lobby
 📤 Queued message for lobby: get_rooms (1 queued)
 🔗 Connection opened to room lobby
 🎮 State Change: NETWORK_CONNECTED
 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 Diff: {isConnected: {…}, lastEventSequence: {…}}
 🌐 NetworkService: Connected to room lobby
 Received room_list_update: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1752025228025}
 Received room_created: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1752025228107}
 🟢 Navigation: room_id = F2F4F3 navigating to: /room/F2F4F3
 ✅ Navigating to new room: F2F4F3
 🎮 State Change: NETWORK_DISCONNECTED
 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 Diff: {isConnected: {…}, lastEventSequence: {…}}
 🌐 NetworkService: Disconnected from room lobby
 📤 Queued message for lobby: get_rooms (1 queued)
 🔗 Connection opened to room lobby
 🎮 State Change: NETWORK_CONNECTED
 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 Diff: {isConnected: {…}, lastEventSequence: {…}}
 🌐 NetworkService: Connected to room lobby
 🔗 Connection opened to room F2F4F3
 🎮 State Change: NETWORK_CONNECTED
 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 Diff: {lastEventSequence: {…}}
 🌐 NetworkService: Connected to room F2F4F3
 🏠 ROOM_UPDATE: Full data received: {players: Array(4), host_name: 'Andy', room_id: 'F2F4F3', started: false}
 🏠 ROOM_UPDATE: Players array: (4) [{…}, {…}, {…}, {…}]
 🏠 ROOM_UPDATE: Players array type: object
 🏠 ROOM_UPDATE: Players array length: 4
 🏠 ROOM_UPDATE: Players array entries: (4) [Array(2), Array(2), Array(2), Array(2)]
 🎮 START_GAME: Button clicked
 🎮 START_GAME: Room ID: F2F4F3
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
 Game started, navigating to game page
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1752025230.8293371, …}
 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
 🎮 State Change: NETWORK_DISCONNECTED
 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room F2F4F3
ServiceIntegration.ts:157 🔗 Connecting to room F2F4F3 as Andy...
RecoveryService.ts:106 🔄 RecoveryService: Initialized tracking for room F2F4F3
GameService.ts:1305 🎮 State Change: JOIN_ROOM_INIT
GameService.ts:1306 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1307 New: {isConnected: false, roomId: 'F2F4F3', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1308 Diff: {roomId: {…}, playerName: {…}, lastEventSequence: {…}}
GameContext.jsx:36 🚀 GAME_CONTEXT: Phase 1-4 Enterprise Architecture initializing
NetworkService.ts:337 🔗 Connection opened to room F2F4F3
GameService.ts:1305 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1306 Previous: {isConnected: false, roomId: 'F2F4F3', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1308 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room F2F4F3
GameService.ts:1305 🎮 State Change: JOIN_ROOM_CONNECTED
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1308 Diff: {lastEventSequence: {…}}
GameService.ts:99 🎮 GameService: Joined room F2F4F3 as Andy
ServiceIntegration.ts:169 ✅ Successfully connected to room F2F4F3
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(2), weak_players_awaiting: Array(1), decisions_received: 1, decisions_needed: 2, redeal_multiplier: 1, …}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'preparation', currentRound: 0, …}
GameService.ts:1308 Diff: {phase: {…}, players: {…}, myHand: {…}, lastEventSequence: {…}, simultaneousMode: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
 🎮 Action sent: accept_redeal {player_name: 'Andy'}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(2), weak_players_awaiting: Array(2), decisions_received: 0, decisions_needed: 2, redeal_multiplier: 2, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'preparation', currentRound: 0, …}
 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
 Diff: {currentRound: {…}, redealMultiplier: {…}, myHand: {…}, lastEventSequence: {…}, weakPlayersAwaiting: {…}, …}
 🎮 Action sent: accept_redeal {player_name: 'Andy'}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(2), weak_players_awaiting: Array(1), decisions_received: 1, decisions_needed: 2, redeal_multiplier: 2, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
 Diff: {lastEventSequence: {…}, weakPlayersAwaiting: {…}, decisionsReceived: {…}, isMyDecision: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1308 Diff: {phase: {…}, myHand: {…}, declarationOrder: {…}, lastEventSequence: {…}, currentTotal: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1308 Diff: {currentDeclarer: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, lastEventSequence: {…}}
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1752025242.084811, …}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1308 Diff: {declarationOrder: {…}, lastEventSequence: {…}}
GameService.ts:1275 🎮 Action sent: declare {value: 2, player_name: 'Andy'}
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 1, declarations: {…}, declaration_total: 2, current_declarer: 'Bot 2'}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1308 Diff: {declarations: {…}, declarationOrder: {…}, currentDeclarer: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 2, declarations: {…}, declaration_total: 3, current_declarer: 'Bot 3'}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 2, score: 0}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1308 Diff: {declarations: {…}, currentDeclarer: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}}
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 3, declarations: {…}, declaration_total: 4, current_declarer: 'Bot 4'}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 2, score: 0}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1308 Diff: {declarations: {…}, currentDeclarer: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, …}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 4, declarations: {…}, declaration_total: 6, current_declarer: null}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 2, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
 Diff: {declarations: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, isLastPlayer: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 2, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1308 Diff: {phase: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, currentTurnNumber: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1752025259.2791948, …}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:648 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:659 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:660 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
GameService.ts:679 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:684 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1308 Diff: {lastEventSequence: {…}, canPlayAnyCount: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
GameService.ts:1275 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 8}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7, zero_declares_in_a_row: 0, declared: 2, score: 0}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:648 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:659 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:660 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 2, Required: 1, Plays: 1
GameService.ts:665 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 8, is_valid: true, …}
GameService.ts:667 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:679 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:684 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1308 Diff: {myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = [{…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Andy
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: [{…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Andy', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 8}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7, zero_declares_in_a_row: 0, declared: 2, score: 0}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:648 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:659 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:660 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 3, Required: 1, Plays: 2
GameService.ts:665 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 8, is_valid: true, …}
GameService.ts:667 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:665 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 14, is_valid: true, …}
GameService.ts:667 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:679 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:684 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1308 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (2) [{…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Andy
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Andy', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 8}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7, zero_declares_in_a_row: 0, declared: 2, score: 0}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:648 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:659 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:660 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 1, Plays: 3
GameService.ts:665 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 8, is_valid: true, …}
GameService.ts:667 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:665 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 14, is_valid: true, …}
GameService.ts:667 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:665 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 12, is_valid: true, …}
GameService.ts:667 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:679 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:684 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1308 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (3) [{…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Andy
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Andy', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 8}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7, zero_declares_in_a_row: 0, declared: 2, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 1, Plays: 4
 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 8, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 14, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 12, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 13, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Andy
 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Andy', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 8}
 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room F2F4F3 {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 2",
  "winning_play": {
    "pieces": [
      "GENERAL_RED(14)"
    ],
    "value": 14,
    "type": "SINGLE",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Andy",
        "pieces": [
          "CHARIOT_RED(8)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 8
      },
      {
        "player": "Bot 2",
        "pieces": [
          "GENERAL_RED(14)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 14
      },
      {
        "player": "Bot 3",
        "pieces": [
          "ADVISOR_RED(12)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 12
      },
      {
        "player": "Bot 4",
        "pieces": [
          "GENERAL_BLACK(13)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 13
      }
    ],
    "winner": "Bot 2",
    "winner_play": {
      "pieces": [
        "GENERAL_RED(14)"
      ],
      "value": 14,
      "type": "SINGLE",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 2": 1,
    "Andy": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 1,
  "next_starter": "Bot 2",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 6,
  "timestamp": 1752025305.149251,
  "reason": "Turn 1 completed - winner: Bot 2",
  "room_id": "F2F4F3"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 1 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 2, Next starter: Bot 2
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, turnNumber: 1, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, nextStarter: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
   🎯 winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 1
   🎪 nextStarter: Bot 2
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
   🎯 winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
GameContainer.jsx:171 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:172   🎮 gameState.phase: turn_results
GameContainer.jsx:173   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:174   🎯 gameState.winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
GameContainer.jsx:175   📊 gameState.playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:176   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:177   🔢 gameState.turnNumber: 1
GameContainer.jsx:178   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:206 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:171 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:172   🎮 gameState.phase: turn_results
GameContainer.jsx:173   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:174   🎯 gameState.winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
GameContainer.jsx:175   📊 gameState.playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:176   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:177   🔢 gameState.turnNumber: 1
GameContainer.jsx:178   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:206 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
hook.js:608 ReferenceError: getPieceColorClass is not defined
    at TurnResultsContent.jsx:169:36
    at Array.map (<anonymous>)
    at TurnResultsContent.jsx:166:33
    at Array.map (<anonymous>)
    at TurnResultsContent.jsx:150:35
    at jy (TurnResultsContent.jsx:178:11)
    at Wu (react-dom-client.production.js:3502:21)
    at fu (react-dom-client.production.js:6239:15)
    at c0 (react-dom-client.production.js:7243:14)
    at M0 (react-dom-client.production.js:10855:14)
overrideMethod @ hook.js:608
e0 @ react-dom-client.production.js:5788
qp @ react-dom-client.production.js:5806
i.componentDidCatch.e.callback @ react-dom-client.production.js:5845
hg @ react-dom-client.production.js:3435
yg @ react-dom-client.production.js:3445
d0 @ react-dom-client.production.js:8345
h0 @ react-dom-client.production.js:8743
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8775
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8715
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8819
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8819
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8819
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8819
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8819
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8715
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8711
cr @ react-dom-client.production.js:9559
h0 @ react-dom-client.production.js:8747
L0 @ react-dom-client.production.js:11210
am @ react-dom-client.production.js:11070
em @ react-dom-client.production.js:10490
T0 @ react-dom-client.production.js:10419
j0 @ react-dom-client.production.js:11626
Js @ scheduler.production.js:151
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:522 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:523 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:524 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:525 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7, zero_declares_in_a_row: 0, declared: 2, score: 0}
GameService.ts:559 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:560 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:648 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:659 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
GameService.ts:660 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
GameService.ts:679 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:684 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:505 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1095 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1096 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1097 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:509 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1305 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1306 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1307 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1308 Diff: {phase: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, currentTurnPlays: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room F2F4F3 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7, zero_declares_in_a_row: 0, declared: 2, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: 'F2F4F3', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
