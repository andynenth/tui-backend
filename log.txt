 🔄 RecoveryService: Initialized
 🔗 ServiceIntegration: Initialized
 
 🎯 =============================================
 🚀 PHASE 1-4 ENTERPRISE ARCHITECTURE STARTING
 🎯 =============================================
 🔧 Initializing integrated service layer...
 ✅ NetworkService integrated
 ✅ GameService integrated
 ✅ RecoveryService integrated
 🩺 Health monitoring started (30000ms interval)
 
 ✅ =============================================
 🎉 PHASE 1-4 ARCHITECTURE FULLY OPERATIONAL!
 ✅ =============================================
 🔗 NetworkService: Advanced WebSocket with auto-reconnection
 🎮 GameService: React hooks with TypeScript state management
 🛠️ RecoveryService: Automatic error recovery and health monitoring
 🏢 Enterprise Features: Event sourcing, logging, metrics
 ✅ Service integration layer initialized successfully
 
 🎮 Global services initialized
 🔗 Connection opened to room lobby
 🎮 State Change: NETWORK_CONNECTED
 Previous: Object
 New: Object
 Diff: Object
 🌐 NetworkService: Connected to room lobby
 Received room_list_update: Object
 🎮 State Change: NETWORK_DISCONNECTED
 Previous: Object
 New: Object
 Diff: Object
 🌐 NetworkService: Disconnected from room lobby
 📤 Queued message for lobby: get_rooms (1 queued)
 🔗 Connection opened to room lobby
 🎮 State Change: NETWORK_CONNECTED
 Previous: Object
 New: Object
 Diff: Object
 🌐 NetworkService: Connected to room lobby
 Received room_list_update: Object
 🎮 State Change: NETWORK_DISCONNECTED
 Previous: Object
 New: Object
 Diff: Object
 🌐 NetworkService: Disconnected from room lobby
 📤 Queued message for lobby: get_rooms (1 queued)
 🔗 Connection opened to room lobby
 🎮 State Change: NETWORK_CONNECTED
 Previous: Object
 New: Object
 Diff: Object
 🌐 NetworkService: Connected to room lobby
 Received room_list_update: Object
 Received room_created: Object
 🟢 Navigation: room_id = 749CE8 navigating to: /room/749CE8
 ✅ Navigating to new room: 749CE8
 🎮 State Change: NETWORK_DISCONNECTED
 Previous: Object
 New: Object
 Diff: Object
 🌐 NetworkService: Disconnected from room lobby
 📤 Queued message for lobby: get_rooms (1 queued)
 🔗 Connection opened to room lobby
 🎮 State Change: NETWORK_CONNECTED
 Previous: Object
 New: Object
 Diff: Object
 🌐 NetworkService: Connected to room lobby
 🔗 Connection opened to room 749CE8
 🎮 State Change: NETWORK_CONNECTED
 Previous: Object
 New: Object
 Diff: Object
 🌐 NetworkService: Connected to room 749CE8
 🏠 ROOM_UPDATE: Full data received: Object
 🏠 ROOM_UPDATE: Players array: Array(4)
 🏠 ROOM_UPDATE: Players array type: object
 🏠 ROOM_UPDATE: Players array length: 4
 🏠 ROOM_UPDATE: Players array entries: Array(4)
 🎮 START_GAME: Button clicked
 🎮 START_GAME: Room ID: 749CE8
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 Object
 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 Object
 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
 Game started, navigating to game page
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 Object
 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
 🎮 State Change: NETWORK_DISCONNECTED
 Previous: Object
 New: Object
 Diff: Object
NetworkService.ts:171 🌐 NetworkService: Disconnected from room 749CE8
ServiceIntegration.ts:157 🔗 Connecting to room 749CE8 as Andy...
RecoveryService.ts:106 🔄 RecoveryService: Initialized tracking for room 749CE8
GameService.ts:1342 🎮 State Change: JOIN_ROOM_INIT
GameService.ts:1343 Previous: Object
GameService.ts:1344 New: Object
GameService.ts:1345 Diff: Object
GameContext.jsx:36 🚀 GAME_CONTEXT: Phase 1-4 Enterprise Architecture initializing
NetworkService.ts:337 🔗 Connection opened to room 749CE8
GameService.ts:1342 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1343 Previous: Object
GameService.ts:1344 New: Object
GameService.ts:1345 Diff: Object
NetworkService.ts:129 🌐 NetworkService: Connected to room 749CE8
GameService.ts:1342 🎮 State Change: JOIN_ROOM_CONNECTED
GameService.ts:1343 Previous: Object
GameService.ts:1344 New: Object
GameService.ts:1345 Diff: Object
GameService.ts:99 🎮 GameService: Joined room 749CE8 as Andy
ServiceIntegration.ts:169 ✅ Successfully connected to room 749CE8
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 Object
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: Object
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: Object
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy Object
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: Array(4)
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: Object
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: Object
GameService.ts:1344 New: Object
GameService.ts:1345 Diff: Object
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
GameService.ts:1312 🎮 Action sent: accept_redeal {player_name: 'Andy'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(2), weak_players_awaiting: Array(2), decisions_received: 0, decisions_needed: 2, redeal_multiplier: 2, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 0, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
GameService.ts:1345 Diff: {currentRound: {…}, redealMultiplier: {…}, myHand: {…}, lastEventSequence: {…}, weakPlayersAwaiting: {…}, …}
GameService.ts:1312 🎮 Action sent: accept_redeal {player_name: 'Andy'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(2), weak_players_awaiting: Array(1), decisions_received: 1, decisions_needed: 2, redeal_multiplier: 2, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
GameService.ts:1345 Diff: {lastEventSequence: {…}, weakPlayersAwaiting: {…}, decisionsReceived: {…}, isMyDecision: {…}}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1345 Diff: {phase: {…}, myHand: {…}, declarationOrder: {…}, lastEventSequence: {…}, currentTotal: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1345 Diff: {currentDeclarer: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, lastEventSequence: {…}}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1752092928.2633312, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1345 Diff: {declarationOrder: {…}, lastEventSequence: {…}}
GameService.ts:1312 🎮 Action sent: declare {value: 3, player_name: 'Andy'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 1, declarations: {…}, declaration_total: 3, current_declarer: 'Bot 2'}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1345 Diff: {declarations: {…}, declarationOrder: {…}, currentDeclarer: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 2, declarations: {…}, declaration_total: 4, current_declarer: 'Bot 3'}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1345 Diff: {declarations: {…}, currentDeclarer: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 3, declarations: {…}, declaration_total: 5, current_declarer: 'Bot 4'}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1345 Diff: {declarations: {…}, currentDeclarer: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, …}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 4, declarations: {…}, declaration_total: 6, current_declarer: null}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
 Diff: {declarations: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, isLastPlayer: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🔄 TURN_PLAYS_DEBUG: Empty turn_plays received, clearing currentTurnPlays
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {phase: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, currentTurnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1752092940.314558, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
GameService.ts:697 🔄 TURN_PLAYS_DEBUG: Empty turn_plays received, clearing currentTurnPlays
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {lastEventSequence: {…}, canPlayAnyCount: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 3, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 3, playType: null, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 3, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 3, playType: null, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 1, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 2, …}
TurnContent.jsx:309 🎯 TURN_SELECTION_TEXT (Starter 2+): {isStarter: true, selectedCount: 2, playType: 'Pair', displayedText: '✓ Valid Pair'}
TurnContent.jsx:168 🎮 TURNCONTENT_DEBUG: handlePlay clicked
TurnContent.jsx:169 🎮 TURNCONTENT_DEBUG: selectedPieces: (2) [{…}, {…}]
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 0, selectedPiecesLength: 2, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:158 🎮 CANPLAY_DEBUG: Starter mode (count: 0) - can play: true
TurnContent.jsx:170 🎮 TURNCONTENT_DEBUG: canPlay(): true
TurnContent.jsx:171 🎮 TURNCONTENT_DEBUG: onPlayPieces: function
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 0, selectedPiecesLength: 2, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:158 🎮 CANPLAY_DEBUG: Starter mode (count: 0) - can play: true
TurnContent.jsx:175 🎮 TURNCONTENT_DEBUG: Calling onPlayPieces with indices: (2) [0, 7]
useGameActions.ts:218 🎯 GAMEACTIONS_DEBUG: playPieces called with indices: (2) [0, 7]
useGameActions.ts:219 🎯 GAMEACTIONS_DEBUG: Current gameState: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: null, …}
useGameActions.ts:234 🎯 GAMEACTIONS_DEBUG: validateActionState result: true
useGameActions.ts:269 🎯 GAMEACTIONS_DEBUG: Calling gameService.playPieces with indices: (2) [0, 7]
GameService.ts:179 🎮 PLAY_DEBUG: playPieces called with indices: (2) [0, 7]
GameService.ts:180 🎮 PLAY_DEBUG: Current state: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: null, …}
GameService.ts:222 🎮 PLAY_DEBUG: Sending play action with: {piece_indices: Array(2), player_name: 'Andy', play_value: 4}
GameService.ts:1312 🎮 Action sent: play {piece_indices: Array(2), player_name: 'Andy', play_value: 4}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 0, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 6}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 2, Required: 2, Plays: 1
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 4, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = [{…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Andy
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: [{…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Andy', cards: Array(2), isValid: true, playType: 'PAIR', totalValue: 4}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: PAIR
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 2, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 2, selectedCount: 0, displayedText: 'Must play exactly 2 pieces'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 6}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 3, Required: 2, Plays: 2
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 4, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 24, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (2) [{…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Andy
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Andy', cards: Array(2), isValid: true, playType: 'PAIR', totalValue: 4}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: PAIR
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 2, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 2, selectedCount: 0, displayedText: 'Must play exactly 2 pieces'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 6}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 2, Plays: 3
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 4, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 24, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 20, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (3) [{…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Andy
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Andy', cards: Array(2), isValid: true, playType: 'PAIR', totalValue: 4}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: PAIR
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 2, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 2, selectedCount: 0, displayedText: 'Must play exactly 2 pieces'}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 6}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 2, Plays: 4
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 4, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 24, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 20, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 16, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Andy
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Andy', cards: Array(2), isValid: true, playType: 'PAIR', totalValue: 4}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: PAIR
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 2, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 2, selectedCount: 0, displayedText: 'Must play exactly 2 pieces'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 2, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 2, selectedCount: 0, displayedText: 'Must play exactly 2 pieces'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 6}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 2, Plays: 4
 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 4, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 24, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 20, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(2), piece_count: 2, play_type: 'PAIR', play_value: 16, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: PAIR from type: undefined, play_type: PAIR
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Andy
 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Andy', cards: Array(2), isValid: true, playType: 'PAIR', totalValue: 4}
 🎲 PLAYTYPE_DEBUG: Found play type: PAIR
 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 2, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 2, selectedCount: 0, displayedText: 'Must play exactly 2 pieces'}
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 749CE8 {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 2",
  "winning_play": {
    "pieces": [
      "ADVISOR_RED(12)",
      "ADVISOR_RED(12)"
    ],
    "value": 24,
    "type": "PAIR",
    "pilesWon": 2
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Andy",
        "pieces": [
          "SOLDIER_RED(2)",
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "PAIR",
        "play_value": 4
      },
      {
        "player": "Bot 2",
        "pieces": [
          "ADVISOR_RED(12)",
          "ADVISOR_RED(12)"
        ],
        "is_valid": true,
        "play_type": "PAIR",
        "play_value": 24
      },
      {
        "player": "Bot 3",
        "pieces": [
          "ELEPHANT_RED(10)",
          "ELEPHANT_RED(10)"
        ],
        "is_valid": true,
        "play_type": "PAIR",
        "play_value": 20
      },
      {
        "player": "Bot 4",
        "pieces": [
          "CHARIOT_RED(8)",
          "CHARIOT_RED(8)"
        ],
        "is_valid": true,
        "play_type": "PAIR",
        "play_value": 16
      }
    ],
    "winner": "Bot 2",
    "winner_play": {
      "pieces": [
        "ADVISOR_RED(12)",
        "ADVISOR_RED(12)"
      ],
      "value": 24,
      "type": "PAIR",
      "pilesWon": 2
    }
  },
  "player_piles": {
    "Bot 2": 2,
    "Andy": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 1,
  "next_starter": "Bot 2",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 7,
  "timestamp": 1752092998.291787,
  "reason": "Turn 1 completed - winner: Bot 2",
  "room_id": "749CE8"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 1 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 2, Next starter: Bot 2
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, turnNumber: 1, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, nextStarter: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 24, type: 'PAIR', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 2: 2, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 24, type: 'PAIR', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 2: 2, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 24, type: 'PAIR', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 2: 2, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 24, type: 'PAIR', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 2: 2, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
GameContainer.jsx:167 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:168   🎮 gameState.phase: turn_results
GameContainer.jsx:169   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:170   🎯 gameState.winningPlay: {pieces: Array(2), value: 24, type: 'PAIR', pilesWon: 2}
GameContainer.jsx:171   📊 gameState.playerPiles: {Bot 2: 2, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:172   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:173   🔢 gameState.turnNumber: 1
GameContainer.jsx:174   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:202 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:198 Turn results continue requested
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 6}
GameService.ts:669 🔄 PHASE_FIX: Transitioning from turn_results to turn for new turn
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
GameService.ts:697 🔄 TURN_PLAYS_DEBUG: Empty turn_plays received, clearing currentTurnPlays
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {phase: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, currentTurnPlays: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 6}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 3, Required: 1, Plays: 1
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 11, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = [{…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 2
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: [{…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 2', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 11}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 6}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 4, Required: 1, Plays: 2
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 11, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 13, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (2) [{…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 2
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 2', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 11}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 6}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 3
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 11, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 13, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 14, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (3) [{…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 2
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 2', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 11}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:168 🎮 TURNCONTENT_DEBUG: handlePlay clicked
TurnContent.jsx:169 🎮 TURNCONTENT_DEBUG: selectedPieces: [{…}]
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:170 🎮 TURNCONTENT_DEBUG: canPlay(): true
TurnContent.jsx:171 🎮 TURNCONTENT_DEBUG: onPlayPieces: function
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:175 🎮 TURNCONTENT_DEBUG: Calling onPlayPieces with indices: [1]
useGameActions.ts:218 🎯 GAMEACTIONS_DEBUG: playPieces called with indices: [1]
useGameActions.ts:219 🎯 GAMEACTIONS_DEBUG: Current gameState: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
useGameActions.ts:234 🎯 GAMEACTIONS_DEBUG: validateActionState result: true
useGameActions.ts:269 🎯 GAMEACTIONS_DEBUG: Calling gameService.playPieces with indices: [1]
GameService.ts:179 🎮 PLAY_DEBUG: playPieces called with indices: [1]
GameService.ts:180 🎮 PLAY_DEBUG: Current state: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
GameService.ts:222 🎮 PLAY_DEBUG: Sending play action with: {piece_indices: Array(1), player_name: 'Andy', play_value: 11}
GameService.ts:1312 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 11}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 5}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 4
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 11, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 13, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 14, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 11, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, myHand: {…}, currentTurnPlays: {…}, validOptions: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 2
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 2', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 11}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 5}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 4
 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 11, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 13, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 14, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 11, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 2
 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 2', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 11}
 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 749CE8 {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 4",
  "winning_play": {
    "pieces": [
      "GENERAL_RED(14)"
    ],
    "value": 14,
    "type": "SINGLE",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 2",
        "pieces": [
          "ADVISOR_BLACK(11)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 11
      },
      {
        "player": "Bot 3",
        "pieces": [
          "GENERAL_BLACK(13)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 13
      },
      {
        "player": "Bot 4",
        "pieces": [
          "GENERAL_RED(14)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 14
      },
      {
        "player": "Andy",
        "pieces": [
          "ADVISOR_BLACK(11)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 11
      }
    ],
    "winner": "Bot 4",
    "winner_play": {
      "pieces": [
        "GENERAL_RED(14)"
      ],
      "value": 14,
      "type": "SINGLE",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 4": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 3": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 2,
  "next_starter": "Bot 4",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 14,
  "timestamp": 1752093022.071903,
  "reason": "Turn 2 completed - winner: Bot 4",
  "room_id": "749CE8"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 2 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 4, Next starter: Bot 4
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, turnNumber: 2, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 4
GameContainer.jsx:167 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:168   🎮 gameState.phase: turn_results
GameContainer.jsx:169   🏅 gameState.turnWinner: Bot 4
GameContainer.jsx:170   🎯 gameState.winningPlay: {pieces: Array(1), value: 14, type: 'SINGLE', pilesWon: 1}
GameContainer.jsx:171   📊 gameState.playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
GameContainer.jsx:172   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:173   🔢 gameState.turnNumber: 2
GameContainer.jsx:174   🎪 gameState.nextStarter: Bot 4
GameContainer.jsx:202 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 2, …}
GameContainer.jsx:198 Turn results continue requested
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 5}
GameService.ts:669 🔄 PHASE_FIX: Transitioning from turn_results to turn for new turn
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
GameService.ts:697 🔄 TURN_PLAYS_DEBUG: Empty turn_plays received, clearing currentTurnPlays
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {phase: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, currentTurnPlays: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 5}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Andy, Required: 1, Plays: 1
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 9, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = [{…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: [{…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 9}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:168 🎮 TURNCONTENT_DEBUG: handlePlay clicked
TurnContent.jsx:169 🎮 TURNCONTENT_DEBUG: selectedPieces: [{…}]
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:170 🎮 TURNCONTENT_DEBUG: canPlay(): true
TurnContent.jsx:171 🎮 TURNCONTENT_DEBUG: onPlayPieces: function
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:175 🎮 TURNCONTENT_DEBUG: Calling onPlayPieces with indices: [1]
useGameActions.ts:218 🎯 GAMEACTIONS_DEBUG: playPieces called with indices: [1]
useGameActions.ts:219 🎯 GAMEACTIONS_DEBUG: Current gameState: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
useGameActions.ts:234 🎯 GAMEACTIONS_DEBUG: validateActionState result: true
useGameActions.ts:269 🎯 GAMEACTIONS_DEBUG: Calling gameService.playPieces with indices: [1]
GameService.ts:179 🎮 PLAY_DEBUG: playPieces called with indices: [1]
GameService.ts:180 🎮 PLAY_DEBUG: Current state: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
GameService.ts:222 🎮 PLAY_DEBUG: Sending play action with: {piece_indices: Array(1), player_name: 'Andy', play_value: 7}
GameService.ts:1312 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 7}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 4}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 2, Required: 1, Plays: 2
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 9, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 7, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (2) [{…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 9}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 4}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 3
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 9, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 7, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 5, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (3) [{…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 9}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 4}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 4
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 9, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 7, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 5, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 9, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 9}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 4}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 4
 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 9, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 7, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 5, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 9, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 9}
 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 749CE8 {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 4",
  "winning_play": {
    "pieces": [
      "ELEPHANT_BLACK(9)"
    ],
    "value": 9,
    "type": "SINGLE",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 4",
        "pieces": [
          "ELEPHANT_BLACK(9)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 9
      },
      {
        "player": "Andy",
        "pieces": [
          "CHARIOT_BLACK(7)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 7
      },
      {
        "player": "Bot 2",
        "pieces": [
          "HORSE_BLACK(5)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 5
      },
      {
        "player": "Bot 3",
        "pieces": [
          "ELEPHANT_BLACK(9)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 9
      }
    ],
    "winner": "Bot 4",
    "winner_play": {
      "pieces": [
        "ELEPHANT_BLACK(9)"
      ],
      "value": 9,
      "type": "SINGLE",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 4": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 3": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 3,
  "next_starter": "Bot 4",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 21,
  "timestamp": 1752093047.753848,
  "reason": "Turn 3 completed - winner: Bot 4",
  "room_id": "749CE8"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 3 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 4, Next starter: Bot 4
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, turnNumber: 3, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, winningPlay: {…}, turnNumber: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 9, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 9, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 9, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 9, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
GameContainer.jsx:167 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:168   🎮 gameState.phase: turn_results
GameContainer.jsx:169   🏅 gameState.turnWinner: Bot 4
GameContainer.jsx:170   🎯 gameState.winningPlay: {pieces: Array(1), value: 9, type: 'SINGLE', pilesWon: 1}
GameContainer.jsx:171   📊 gameState.playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
GameContainer.jsx:172   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:173   🔢 gameState.turnNumber: 3
GameContainer.jsx:174   🎪 gameState.nextStarter: Bot 4
GameContainer.jsx:202 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 3, …}
GameContainer.jsx:198 Turn results continue requested
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 4}
GameService.ts:669 🔄 PHASE_FIX: Transitioning from turn_results to turn for new turn
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
GameService.ts:697 🔄 TURN_PLAYS_DEBUG: Empty turn_plays received, clearing currentTurnPlays
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {phase: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, currentTurnNumber: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 4}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Andy, Required: 1, Plays: 1
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 3, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = [{…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: [{…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 3}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:168 🎮 TURNCONTENT_DEBUG: handlePlay clicked
TurnContent.jsx:169 🎮 TURNCONTENT_DEBUG: selectedPieces: [{…}]
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:170 🎮 TURNCONTENT_DEBUG: canPlay(): true
TurnContent.jsx:171 🎮 TURNCONTENT_DEBUG: onPlayPieces: function
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:175 🎮 TURNCONTENT_DEBUG: Calling onPlayPieces with indices: [2]
useGameActions.ts:218 🎯 GAMEACTIONS_DEBUG: playPieces called with indices: [2]
useGameActions.ts:219 🎯 GAMEACTIONS_DEBUG: Current gameState: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
useGameActions.ts:234 🎯 GAMEACTIONS_DEBUG: validateActionState result: true
useGameActions.ts:269 🎯 GAMEACTIONS_DEBUG: Calling gameService.playPieces with indices: [2]
GameService.ts:179 🎮 PLAY_DEBUG: playPieces called with indices: [2]
GameService.ts:180 🎮 PLAY_DEBUG: Current state: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
GameService.ts:222 🎮 PLAY_DEBUG: Sending play action with: {piece_indices: Array(1), player_name: 'Andy', play_value: 6}
GameService.ts:1312 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 6}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 3}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 2, Required: 1, Plays: 2
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 3, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 6, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (2) [{…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 3}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 3}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 3
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 3, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 6, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 2, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (3) [{…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 3}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 3}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 4
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 3, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 6, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 2, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 7, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 3}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 3}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 4
 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 3, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 6, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 2, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 7, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 4
 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 4', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 3}
 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 749CE8 {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 3",
  "winning_play": {
    "pieces": [
      "CHARIOT_BLACK(7)"
    ],
    "value": 7,
    "type": "SINGLE",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 4",
        "pieces": [
          "CANNON_BLACK(3)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 3
      },
      {
        "player": "Andy",
        "pieces": [
          "HORSE_RED(6)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 6
      },
      {
        "player": "Bot 2",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 2
      },
      {
        "player": "Bot 3",
        "pieces": [
          "CHARIOT_BLACK(7)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 7
      }
    ],
    "winner": "Bot 3",
    "winner_play": {
      "pieces": [
        "CHARIOT_BLACK(7)"
      ],
      "value": 7,
      "type": "SINGLE",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 3": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 4,
  "next_starter": "Bot 3",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 28,
  "timestamp": 1752093071.2824068,
  "reason": "Turn 4 completed - winner: Bot 3",
  "room_id": "749CE8"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 4 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 3, Next starter: Bot 3
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, turnNumber: 4, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 7, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 7, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 7, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 7, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 3
GameContainer.jsx:167 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:168   🎮 gameState.phase: turn_results
GameContainer.jsx:169   🏅 gameState.turnWinner: Bot 3
GameContainer.jsx:170   🎯 gameState.winningPlay: {pieces: Array(1), value: 7, type: 'SINGLE', pilesWon: 1}
GameContainer.jsx:171   📊 gameState.playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
GameContainer.jsx:172   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:173   🔢 gameState.turnNumber: 4
GameContainer.jsx:174   🎪 gameState.nextStarter: Bot 3
GameContainer.jsx:202 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 4, …}
GameContainer.jsx:198 Turn results continue requested
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 3}
GameService.ts:669 🔄 PHASE_FIX: Transitioning from turn_results to turn for new turn
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 3, Required: null, Plays: 0
GameService.ts:697 🔄 TURN_PLAYS_DEBUG: Empty turn_plays received, clearing currentTurnPlays
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {phase: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 3}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 4, Required: 1, Plays: 1
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 6, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = [{…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: [{…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 6}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 3}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Andy, Required: 1, Plays: 2
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 6, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 2, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (2) [{…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 6}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:168 🎮 TURNCONTENT_DEBUG: handlePlay clicked
TurnContent.jsx:169 🎮 TURNCONTENT_DEBUG: selectedPieces: [{…}]
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:170 🎮 TURNCONTENT_DEBUG: canPlay(): true
TurnContent.jsx:171 🎮 TURNCONTENT_DEBUG: onPlayPieces: function
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:175 🎮 TURNCONTENT_DEBUG: Calling onPlayPieces with indices: [1]
useGameActions.ts:218 🎯 GAMEACTIONS_DEBUG: playPieces called with indices: [1]
useGameActions.ts:219 🎯 GAMEACTIONS_DEBUG: Current gameState: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
useGameActions.ts:234 🎯 GAMEACTIONS_DEBUG: validateActionState result: true
useGameActions.ts:269 🎯 GAMEACTIONS_DEBUG: Calling gameService.playPieces with indices: [1]
GameService.ts:179 🎮 PLAY_DEBUG: playPieces called with indices: [1]
GameService.ts:180 🎮 PLAY_DEBUG: Current state: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
GameService.ts:222 🎮 PLAY_DEBUG: Sending play action with: {piece_indices: Array(1), player_name: 'Andy', play_value: 3}
GameService.ts:1312 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 3}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 2}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 3
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 6, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 2, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 3, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (3) [{…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 6}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 2}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 4
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 6, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 2, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 3, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 2, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 6}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 2}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 4
 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 6, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 2, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 3, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 2, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 6}
 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 749CE8 {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 3",
  "winning_play": {
    "pieces": [
      "HORSE_RED(6)"
    ],
    "value": 6,
    "type": "SINGLE",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 3",
        "pieces": [
          "HORSE_RED(6)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 6
      },
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 2
      },
      {
        "player": "Andy",
        "pieces": [
          "CANNON_BLACK(3)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 3
      },
      {
        "player": "Bot 2",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 2
      }
    ],
    "winner": "Bot 3",
    "winner_play": {
      "pieces": [
        "HORSE_RED(6)"
      ],
      "value": 6,
      "type": "SINGLE",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 3": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 5,
  "next_starter": "Bot 3",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 35,
  "timestamp": 1752093092.982037,
  "reason": "Turn 5 completed - winner: Bot 3",
  "room_id": "749CE8"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 5 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 3, Next starter: Bot 3
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, turnNumber: 5, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, winningPlay: {…}, turnNumber: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 6, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 6, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 6, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 6, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Bot 3
GameContainer.jsx:167 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:168   🎮 gameState.phase: turn_results
GameContainer.jsx:169   🏅 gameState.turnWinner: Bot 3
GameContainer.jsx:170   🎯 gameState.winningPlay: {pieces: Array(1), value: 6, type: 'SINGLE', pilesWon: 1}
GameContainer.jsx:171   📊 gameState.playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
GameContainer.jsx:172   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:173   🔢 gameState.turnNumber: 5
GameContainer.jsx:174   🎪 gameState.nextStarter: Bot 3
GameContainer.jsx:202 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 5, …}
GameContainer.jsx:198 Turn results continue requested
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 2}
GameService.ts:669 🔄 PHASE_FIX: Transitioning from turn_results to turn for new turn
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 3, Required: null, Plays: 0
GameService.ts:697 🔄 TURN_PLAYS_DEBUG: Empty turn_plays received, clearing currentTurnPlays
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {phase: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, currentTurnNumber: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 2}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 4, Required: 1, Plays: 1
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 5, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = [{…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: [{…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 5}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 2}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Andy, Required: 1, Plays: 2
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 5, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (2) [{…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 5}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:168 🎮 TURNCONTENT_DEBUG: handlePlay clicked
TurnContent.jsx:169 🎮 TURNCONTENT_DEBUG: selectedPieces: [{…}]
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:170 🎮 TURNCONTENT_DEBUG: canPlay(): true
TurnContent.jsx:171 🎮 TURNCONTENT_DEBUG: onPlayPieces: function
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:175 🎮 TURNCONTENT_DEBUG: Calling onPlayPieces with indices: [0]
useGameActions.ts:218 🎯 GAMEACTIONS_DEBUG: playPieces called with indices: [0]
useGameActions.ts:219 🎯 GAMEACTIONS_DEBUG: Current gameState: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
useGameActions.ts:234 🎯 GAMEACTIONS_DEBUG: validateActionState result: true
useGameActions.ts:269 🎯 GAMEACTIONS_DEBUG: Calling gameService.playPieces with indices: [0]
GameService.ts:179 🎮 PLAY_DEBUG: playPieces called with indices: [0]
GameService.ts:180 🎮 PLAY_DEBUG: Current state: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
GameService.ts:222 🎮 PLAY_DEBUG: Sending play action with: {piece_indices: Array(1), player_name: 'Andy', play_value: 4}
GameService.ts:1312 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 4}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 1}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 3
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 5, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 4, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (3) [{…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 5}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 1}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 4
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 5, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 4, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 5}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 1}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 4
 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 5, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 4, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 5}
 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 749CE8 {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 3",
  "winning_play": {
    "pieces": [
      "HORSE_BLACK(5)"
    ],
    "value": 5,
    "type": "SINGLE",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 3",
        "pieces": [
          "HORSE_BLACK(5)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 5
      },
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 1
      },
      {
        "player": "Andy",
        "pieces": [
          "CANNON_RED(4)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 4
      },
      {
        "player": "Bot 2",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 1
      }
    ],
    "winner": "Bot 3",
    "winner_play": {
      "pieces": [
        "HORSE_BLACK(5)"
      ],
      "value": 5,
      "type": "SINGLE",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 3": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 6,
  "next_starter": "Bot 3",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 42,
  "timestamp": 1752093114.252043,
  "reason": "Turn 6 completed - winner: Bot 3",
  "room_id": "749CE8"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 6 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 3, Next starter: Bot 3
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, turnNumber: 6, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, winningPlay: {…}, turnNumber: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 5, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 5, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 5, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 5, type: 'SINGLE', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Bot 3
GameContainer.jsx:167 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:168   🎮 gameState.phase: turn_results
GameContainer.jsx:169   🏅 gameState.turnWinner: Bot 3
GameContainer.jsx:170   🎯 gameState.winningPlay: {pieces: Array(1), value: 5, type: 'SINGLE', pilesWon: 1}
GameContainer.jsx:171   📊 gameState.playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
GameContainer.jsx:172   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:173   🔢 gameState.turnNumber: 6
GameContainer.jsx:174   🎪 gameState.nextStarter: Bot 3
GameContainer.jsx:202 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 6, …}
GameContainer.jsx:198 Turn results continue requested
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 1}
GameService.ts:669 🔄 PHASE_FIX: Transitioning from turn_results to turn for new turn
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 3, Required: null, Plays: 0
GameService.ts:697 🔄 TURN_PLAYS_DEBUG: Empty turn_plays received, clearing currentTurnPlays
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {phase: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, currentTurnNumber: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = []
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: null, isMyTurn: false, currentPlayer: 'Bot 3', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:320 🎯 TURN_SELECTION_TEXT (Starter default): {isStarter: true, selectedCount: 0, displayedText: 'As starter, your play must be valid'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 1}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 4, Required: 1, Plays: 1
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = [{…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: [{…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 1}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 4', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 1}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Andy, Required: 1, Plays: 2
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (2) [{…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 1}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 1, …}
TurnContent.jsx:336 🎯 TURN_SELECTION_TEXT (Single piece): {isStarter: false, requiredPieceCount: 1, displayedText: '✓ Ready to play'}
TurnContent.jsx:168 🎮 TURNCONTENT_DEBUG: handlePlay clicked
TurnContent.jsx:169 🎮 TURNCONTENT_DEBUG: selectedPieces: [{…}]
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:170 🎮 TURNCONTENT_DEBUG: canPlay(): true
TurnContent.jsx:171 🎮 TURNCONTENT_DEBUG: onPlayPieces: function
TurnContent.jsx:144 🎮 CANPLAY_DEBUG: {isMyTurn: true, requiredPieceCount: 1, selectedPiecesLength: 1, currentPlayer: 'Andy', myName: 'Andy'}
TurnContent.jsx:162 🎮 CANPLAY_DEBUG: Must match count 1 - can play: true
TurnContent.jsx:175 🎮 TURNCONTENT_DEBUG: Calling onPlayPieces with indices: [0]
useGameActions.ts:218 🎯 GAMEACTIONS_DEBUG: playPieces called with indices: [0]
useGameActions.ts:219 🎯 GAMEACTIONS_DEBUG: Current gameState: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
useGameActions.ts:234 🎯 GAMEACTIONS_DEBUG: validateActionState result: true
useGameActions.ts:269 🎯 GAMEACTIONS_DEBUG: Calling gameService.playPieces with indices: [0]
GameService.ts:179 🎮 PLAY_DEBUG: playPieces called with indices: [0]
GameService.ts:180 🎮 PLAY_DEBUG: Current state: {phase: 'turn', isMyTurn: true, currentPlayer: 'Andy', playerName: 'Andy', requiredPieceCount: 1, …}
GameService.ts:222 🎮 PLAY_DEBUG: Sending play action with: {piece_indices: Array(1), player_name: 'Andy', play_value: 4}
GameService.ts:1312 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 4}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: true, currentPlayer: 'Andy', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 0}
GameService.ts:679 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:690 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 3
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 4, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, …}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (3) [{…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 1}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
GameService.ts:691 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 4
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 4, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:701 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
GameService.ts:703 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
GameService.ts:715 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:721 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:1132 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1133 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1134 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1345 Diff: {players: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:95 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameContainer.jsx:96 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:101 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
GameContainer.jsx:102 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:108 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 1}
GameContainer.jsx:115 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
TurnContent.jsx:43 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
TurnContent.jsx:372 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 4
 🎯 TURN_PLAY_DEBUG: Player Bot 3, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 4, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Andy, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 4, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎯 TURN_PLAY_DEBUG: Player Bot 2, playData: {pieces: Array(1), piece_count: 1, play_type: 'SINGLE', play_value: 1, is_valid: true, …}
 🎯 TURN_PLAY_DEBUG: Extracted playType: SINGLE from type: undefined, play_type: SINGLE
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
 🔢 GAMECONTAINER_DEBUG: currentTurnPlays = (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: currentTurnStarter: Bot 3
 🎲 PLAYTYPE_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎲 PLAYTYPE_DEBUG: starterPlay: {player: 'Bot 3', cards: Array(1), isValid: true, playType: 'SINGLE', totalValue: 1}
 🎲 PLAYTYPE_DEBUG: Found play type: SINGLE
 🎯 TURN_SELECTION_COUNT_DEBUG: {requiredPieceCount: 1, isMyTurn: false, currentPlayer: 'Bot 2', myName: 'Andy', selectedPiecesLength: 0, …}
 🎯 TURN_SELECTION_TEXT (Follower default): {isStarter: false, requiredPieceCount: 1, selectedCount: 0, displayedText: 'Must play exactly 1 piece'}
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 749CE8 {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Andy",
  "winning_play": {
    "pieces": [
      "CANNON_RED(4)"
    ],
    "value": 4,
    "type": "SINGLE",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 3",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 1
      },
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 1
      },
      {
        "player": "Andy",
        "pieces": [
          "CANNON_RED(4)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 4
      },
      {
        "player": "Bot 2",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "SINGLE",
        "play_value": 1
      }
    ],
    "winner": "Andy",
    "winner_play": {
      "pieces": [
        "CANNON_RED(4)"
      ],
      "value": 4,
      "type": "SINGLE",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Andy": 1,
    "Bot 2": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 7,
  "next_starter": "Andy",
  "all_hands_empty": true,
  "will_continue": false,
  "phase": "turn",
  "sequence": 49,
  "timestamp": 1752093135.630404,
  "reason": "Turn 7 completed - winner: Andy",
  "room_id": "749CE8"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 7 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Andy, Next starter: Andy
 🏆 TURN_COMPLETE_DATA: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Andy', winningPlay: {…}, playerPiles: {…}, turnNumber: 7, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 4, type: 'SINGLE', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 4, type: 'SINGLE', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 4, type: 'SINGLE', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 4, type: 'SINGLE', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn_results', allowed_actions: Array(2), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn_results
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {turn_winner: null, winning_play: null, display_duration: 7, next_phase: 'scoring', auto_transition: true, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0, zero_declares_in_a_row: 0, declared: 3, score: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 0}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1345 Diff: {lastEventSequence: {…}}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn_results', allowed_actions: Array(2), phase_data: {…}, players: {…}, timestamp: 1752093135.634151, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn_results
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {turn_winner: null, winning_play: null, display_duration: 7, next_phase: 'scoring', auto_transition: true, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 0}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1345 Diff: {lastEventSequence: {…}}
GameContainer.jsx:167 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:168   🎮 gameState.phase: turn_results
GameContainer.jsx:169   🏅 gameState.turnWinner: Andy
GameContainer.jsx:170   🎯 gameState.winningPlay: {pieces: Array(1), value: 4, type: 'SINGLE', pilesWon: 1}
GameContainer.jsx:171   📊 gameState.playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:172   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:173   🔢 gameState.turnNumber: 7
GameContainer.jsx:174   🎪 gameState.nextStarter: Andy
GameContainer.jsx:202 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 7, …}
GameContainer.jsx:198 Turn results continue requested
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'turn_results', allowed_actions: Array(2), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: turn_results
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {turn_winner: null, winning_play: null, display_duration: 7, next_phase: 'scoring', auto_transition: true, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0, zero_declares_in_a_row: 0, declared: 3, score: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 0}
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
   🎮 gameState.phase: turn_results
   🏅 gameState.turnWinner: Andy
   🎯 gameState.winningPlay: {pieces: Array(1), value: 4, type: 'SINGLE', pilesWon: 1}
   📊 gameState.playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
   🔢 gameState.turnNumber: 7
   🎪 gameState.nextStarter: Andy
 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 7, …}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'scoring', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: scoring
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {round_scores: {…}, total_scores: {…}, players: Array(4), player_stats: {…}, game_complete: false, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0, zero_declares_in_a_row: 0, declared: 3, score: -6}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 0}
 🏆 SCORING_FRONTEND_DEBUG: Processing scoring phase data
 📊 Raw phase data: {round_scores: {…}, total_scores: {…}, players: Array(4), player_stats: {…}, game_complete: false, …}
 👥 Available players in newState: (4) [{…}, {…}, {…}, {…}]
 📊 SCORING_DEBUG: Raw round scores: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 ✅ SCORING_DEBUG: Processed round scores: {Andy: -6, Bot 2: -3, Bot 3: -6, Bot 4: -3}
 ✅ SCORING_DEBUG: Processed total scores: {Andy: -6, Bot 2: -3, Bot 3: -6, Bot 4: -3}
 ✅ SCORING_DEBUG: Game over: false
 ✅ SCORING_DEBUG: Winners: []
 ✅ SCORING_DEBUG: Redeal multiplier: 3
 🧮 SCORING_DEBUG: Calculating playersWithScores...
 🧮 SCORING_DEBUG: Generated playersWithScores: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'scoring', currentRound: 1, …}
GameService.ts:1345 Diff: {phase: {…}, players: {…}, redealMultiplier: {…}, roundScores: {…}, totalScores: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
GameContainer.jsx:227 🎮 GAME_CONTAINER_DEBUG: Passing props to ScoringUI:
GameContainer.jsx:228   👥 players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:229   📊 roundScores: {Andy: -6, Bot 2: -3, Bot 3: -6, Bot 4: -3}
GameContainer.jsx:230   💯 totalScores: {Andy: -6, Bot 2: -3, Bot 3: -6, Bot 4: -3}
GameContainer.jsx:231   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:232   ⚗️ redealMultiplier: 3
GameContainer.jsx:233   🏁 gameOver: false
GameContainer.jsx:234   🏆 winners: []
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'scoring', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1752093142.649357, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: scoring
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {round_scores: {…}, total_scores: {…}, players: Array(4), player_stats: {…}, game_complete: false, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 0}
GameService.ts:730 🏆 SCORING_FRONTEND_DEBUG: Processing scoring phase data
GameService.ts:731 📊 Raw phase data: {round_scores: {…}, total_scores: {…}, players: Array(4), player_stats: {…}, game_complete: false, …}
GameService.ts:732 👥 Available players in newState: (4) [{…}, {…}, {…}, {…}]
GameService.ts:738 📊 SCORING_DEBUG: Raw round scores: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:783 ✅ SCORING_DEBUG: Processed round scores: {Andy: -6, Bot 2: -3, Bot 3: -6, Bot 4: -3}
GameService.ts:784 ✅ SCORING_DEBUG: Processed total scores: {Andy: -6, Bot 2: -3, Bot 3: -6, Bot 4: -3}
GameService.ts:785 ✅ SCORING_DEBUG: Game over: false
GameService.ts:786 ✅ SCORING_DEBUG: Winners: []
GameService.ts:787 ✅ SCORING_DEBUG: Redeal multiplier: 3
GameService.ts:791 🧮 SCORING_DEBUG: Calculating playersWithScores...
GameService.ts:799 🧮 SCORING_DEBUG: Generated playersWithScores: (4) [{…}, {…}, {…}, {…}]
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'scoring', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'scoring', currentRound: 1, …}
GameService.ts:1345 Diff: {lastEventSequence: {…}}
GameContainer.jsx:227 🎮 GAME_CONTAINER_DEBUG: Passing props to ScoringUI:
GameContainer.jsx:228   👥 players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:229   📊 roundScores: {Andy: -6, Bot 2: -3, Bot 3: -6, Bot 4: -3}
GameContainer.jsx:230   💯 totalScores: {Andy: -6, Bot 2: -3, Bot 3: -6, Bot 4: -3}
GameContainer.jsx:231   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:232   ⚗️ redealMultiplier: 3
GameContainer.jsx:233   🏁 gameOver: false
GameContainer.jsx:234   🏆 winners: []
GameService.ts:1312 🎮 Action sent: start_next_round {}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(2), weak_players_awaiting: Array(2), decisions_received: 0, decisions_needed: 2, redeal_multiplier: 1, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: -6}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'scoring', currentRound: 1, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 2, …}
GameService.ts:1345 Diff: {phase: {…}, currentRound: {…}, players: {…}, redealMultiplier: {…}, myHand: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1752093151.1529999, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(2), weak_players_awaiting: Array(2), decisions_received: 0, decisions_needed: 2, redeal_multiplier: 1, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 2, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 2, …}
GameService.ts:1345 Diff: {lastEventSequence: {…}}
GameService.ts:437 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 749CE8 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:547 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(2), weak_players_awaiting: Array(1), decisions_received: 1, decisions_needed: 2, redeal_multiplier: 1, …}
GameService.ts:550 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, zero_declares_in_a_row: 0, declared: 0, score: -6}
GameService.ts:585 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:586 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0, hand_size: 8}
GameService.ts:530 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:534 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1342 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1343 Previous: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 2, …}
GameService.ts:1344 New: {isConnected: true, roomId: '749CE8', playerName: 'Andy', phase: 'preparation', currentRound: 2, …}
GameService.ts:1345 Diff: {lastEventSequence: {…}, weakPlayersAwaiting: {…}, decisionsReceived: {…}}
