🎯 NEW_TURN_DEBUG: Round 1, Turn 1 starting with starter Bot 2
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room F8EE60
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 1.1s...
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🤖 Bot Bot 2 will play 1 pieces: ['GENERAL_RED(14)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 1
DEBUG_WS: Message for event 'phase_change' added to queue for room F8EE60.
🔄 PHASE_TRACKING_FIX: New phase detected declaration -> turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - checking for duplicates
✅ REFINED_FIX: Allowing new trigger for current player Bot 2 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from phase_change (hash: 36a22356f55e)
✅ RACE_CONDITION_FIX: Triggering bot play for Bot 2 - no duplicates detected
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
DEBUG_WS: Message for event 'phase_change' added to queue for room F8EE60.
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 1.1s...
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🤖 Bot Bot 2 will play 1 pieces: ['GENERAL_RED(14)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['GENERAL_RED(14)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room F8EE60.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - checking for duplicates
✅ REFINED_FIX: Allowing new trigger for current player Bot 3 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from phase_change (hash: ac20a113e367)
✅ RACE_CONDITION_FIX: Triggering bot play for Bot 3 - no duplicates detected
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
✅ REFINED_FIX: Allowing new trigger for current player Bot 3 from player_played
✅ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from player_played (hash: 7f32b05165ac)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.7s...
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_BLACK(13)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room F8EE60.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room F8EE60
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
✅ REFINED_FIX: Allowing delayed same-source trigger for current player Bot 3 from player_played (age: 0.7s)
✅ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from player_played (hash: 7f32b05165ac)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_BLACK(13)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [GENERAL_RED(14)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 7, 3, 13, 37, 7, 412085), sequence_id=5, is_bot=True)
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action play_pieces from Bot 2 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 2 action rejected - preventing downstream processing
🔧 RACE_CONDITION_FIX: Cleared action cache for Bot 2 after rejection
🔧 RACE_CONDITION_FIX: Cleared phase tracking for Bot 2 after rejection
🚫 BOT_VALIDATION_FIX: Bot Bot 2 hand size after rejection: 8
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['GENERAL_BLACK(13)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room F8EE60.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - checking for duplicates
✅ REFINED_FIX: Allowing new trigger for current player Bot 4 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from phase_change (hash: d2d760f0daf4)
✅ RACE_CONDITION_FIX: Triggering bot play for Bot 4 - no duplicates detected
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
✅ REFINED_FIX: Allowing new trigger for current player Bot 4 from player_played
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from player_played (hash: d39afe4115b6)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.7s...
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room F8EE60.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room F8EE60
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
✅ REFINED_FIX: Allowing delayed same-source trigger for current player Bot 4 from player_played (age: 0.7s)
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from player_played (hash: d39afe4115b6)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.9s...
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [GENERAL_BLACK(13)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_BLACK(13)]}, timestamp=datetime.datetime(2025, 7, 3, 13, 37, 9, 114714), sequence_id=7, is_bot=True)
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action play_pieces from Bot 3 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 3 action rejected - preventing downstream processing
🔧 RACE_CONDITION_FIX: Cleared action cache for Bot 3 after rejection
🔧 RACE_CONDITION_FIX: Cleared phase tracking for Bot 3 after rejection
🚫 BOT_VALIDATION_FIX: Bot Bot 3 hand size after rejection: 8
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ADVISOR_RED(12)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room F8EE60.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room F8EE60.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room F8EE60
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ADVISOR_RED(12)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_RED(12)]}, timestamp=datetime.datetime(2025, 7, 3, 13, 37, 10, 782630), sequence_id=9, is_bot=True)
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action play_pieces from Bot 4 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 4 action rejected - preventing downstream processing
🔧 RACE_CONDITION_FIX: Cleared action cache for Bot 4 after rejection
🔧 RACE_CONDITION_FIX: Cleared phase tracking for Bot 4 after rejection
🚫 BOT_VALIDATION_FIX: Bot Bot 4 hand size after rejection: 8