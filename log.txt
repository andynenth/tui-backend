RecoveryService.ts:66 🔄 RecoveryService: Initialized
ServiceIntegration.ts:79 🔗 ServiceIntegration: Initialized
ServiceIntegration.ts:98 
ServiceIntegration.ts:99 🎯 =============================================
ServiceIntegration.ts:100 🚀 PHASE 1-4 ENTERPRISE ARCHITECTURE STARTING
ServiceIntegration.ts:101 🎯 =============================================
ServiceIntegration.ts:102 🔧 Initializing integrated service layer...
ServiceIntegration.ts:567 ✅ NetworkService integrated
ServiceIntegration.ts:575 ✅ GameService integrated
ServiceIntegration.ts:583 ✅ RecoveryService integrated
ServiceIntegration.ts:594 🩺 Health monitoring started (30000ms interval)
ServiceIntegration.ts:124 
ServiceIntegration.ts:125 ✅ =============================================
ServiceIntegration.ts:126 🎉 PHASE 1-4 ARCHITECTURE FULLY OPERATIONAL!
ServiceIntegration.ts:127 ✅ =============================================
ServiceIntegration.ts:128 🔗 NetworkService: Advanced WebSocket with auto-reconnection
ServiceIntegration.ts:129 🎮 GameService: React hooks with TypeScript state management
ServiceIntegration.ts:130 🛠️ RecoveryService: Automatic error recovery and health monitoring
ServiceIntegration.ts:131 🏢 Enterprise Features: Event sourcing, logging, metrics
ServiceIntegration.ts:132 ✅ Service integration layer initialized successfully
ServiceIntegration.ts:133 
App.jsx:121 🎮 Phase 1-4 Enterprise Architecture - Global services initialized
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1292 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1293 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
GameService.ts:1292 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1293 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room lobby
NetworkService.ts:214 📤 Queued message for lobby: get_rooms (1 queued)
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1292 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1293 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
LobbyPage.jsx:50 Received room_list_update: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1751689513253}
GameService.ts:1292 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1293 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room lobby
NetworkService.ts:214 📤 Queued message for lobby: get_rooms (1 queued)
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1292 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1293 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
LobbyPage.jsx:50 Received room_list_update: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1751689514520}
LobbyPage.jsx:60 Received room_created: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1751689514604}
LobbyPage.jsx:61 🟢 Navigation: room_id = E6791A navigating to: /room/E6791A
LobbyPage.jsx:65 ✅ Navigating to new room: E6791A
GameService.ts:1292 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1293 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room lobby
NetworkService.ts:214 📤 Queued message for lobby: get_rooms (1 queued)
RoomPage.jsx:192 🎯 SLOT_1: player= undefined isEmpty= true
RoomPage.jsx:192 🎯 SLOT_2: player= undefined isEmpty= true
RoomPage.jsx:192 🎯 SLOT_3: player= undefined isEmpty= true
RoomPage.jsx:192 🎯 SLOT_4: player= undefined isEmpty= true
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1292 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1293 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
NetworkService.ts:337 🔗 Connection opened to room E6791A
GameService.ts:1292 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1293 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room E6791A
RoomPage.jsx:192 🎯 SLOT_1: player= undefined isEmpty= true
RoomPage.jsx:192 🎯 SLOT_2: player= undefined isEmpty= true
RoomPage.jsx:192 🎯 SLOT_3: player= undefined isEmpty= true
RoomPage.jsx:192 🎯 SLOT_4: player= undefined isEmpty= true
RoomPage.jsx:60 🏠 ROOM_UPDATE: Full data received: {players: Array(4), host_name: 'Andy', room_id: 'E6791A', started: false}
RoomPage.jsx:61 🏠 ROOM_UPDATE: Players array: (4) [{…}, {…}, {…}, {…}]
RoomPage.jsx:62 🏠 ROOM_UPDATE: Players array type: object
RoomPage.jsx:63 🏠 ROOM_UPDATE: Players array length: 4
RoomPage.jsx:64 🏠 ROOM_UPDATE: Players array entries: (4) [Array(2), Array(2), Array(2), Array(2)]
RoomPage.jsx:192 🎯 SLOT_1: player= {name: 'Andy', is_bot: false, is_host: true} isEmpty= false
RoomPage.jsx:192 🎯 SLOT_2: player= {name: 'Bot 2', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:192 🎯 SLOT_3: player= {name: 'Bot 3', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:192 🎯 SLOT_4: player= {name: 'Bot 4', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:98 🎮 START_GAME: Button clicked
RoomPage.jsx:99 🎮 START_GAME: Room ID: E6791A
RoomPage.jsx:192 🎯 SLOT_1: player= {name: 'Andy', is_bot: false, is_host: true} isEmpty= false
RoomPage.jsx:192 🎯 SLOT_2: player= {name: 'Bot 2', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:192 🎯 SLOT_3: player= {name: 'Bot 3', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:192 🎯 SLOT_4: player= {name: 'Bot 4', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:71 Game started, navigating to game page
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room E6791A {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:416 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room E6791A {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751689524.197692, …}
GameService.ts:416 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
GameService.ts:1292 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1293 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room E6791A
ServiceIntegration.ts:157 🔗 Connecting to room E6791A as Andy...
RecoveryService.ts:106 🔄 RecoveryService: Initialized tracking for room E6791A
GameService.ts:1292 🎮 State Change: JOIN_ROOM_INIT
GameService.ts:1293 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: false, roomId: 'E6791A', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {roomId: {…}, playerName: {…}, lastEventSequence: {…}}
GameContext.jsx:36 🚀 GAME_CONTEXT: Phase 1-4 Enterprise Architecture initializing
NetworkService.ts:337 🔗 Connection opened to room E6791A
GameService.ts:1292 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1293 Previous: {isConnected: false, roomId: 'E6791A', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room E6791A
GameService.ts:1292 🎮 State Change: JOIN_ROOM_CONNECTED
GameService.ts:1293 Previous: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1295 Diff: {lastEventSequence: {…}}
GameService.ts:99 🎮 GameService: Joined room E6791A as Andy
ServiceIntegration.ts:169 ✅ Successfully connected to room E6791A
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room E6791A {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}}
GameService.ts:511 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:512 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:513 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(1), weak_players_awaiting: Array(1), decisions_received: 0, decisions_needed: 1, redeal_multiplier: 1, …}
GameService.ts:514 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:494 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:498 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1292 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1293 Previous: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'preparation', currentRound: 0, …}
GameService.ts:1295 Diff: {phase: {…}, players: {…}, myHand: {…}, lastEventSequence: {…}, simultaneousMode: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'preparation'
GameService.ts:1262 🎮 Action sent: accept_redeal {player_name: 'Andy'}
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room E6791A {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:511 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:512 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:513 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {weak_players: Array(1), weak_players_awaiting: Array(1), decisions_received: 0, decisions_needed: 1, redeal_multiplier: 2, …}
GameService.ts:514 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:494 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:498 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1292 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1293 Previous: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'preparation', currentRound: 0, …}
GameService.ts:1294 New: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
GameService.ts:1295 Diff: {currentRound: {…}, redealMultiplier: {…}, myHand: {…}, lastEventSequence: {…}, handValue: {…}}
GameService.ts:1262 🎮 Action sent: accept_redeal {player_name: 'Andy'}
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room E6791A {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:511 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:512 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:513 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0}
GameService.ts:514 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:494 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:498 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1292 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1293 Previous: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
GameService.ts:1294 New: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1295 Diff: {phase: {…}, myHand: {…}, declarationOrder: {…}, lastEventSequence: {…}, currentTotal: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room E6791A {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:511 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:512 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:513 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:514 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:494 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:498 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1292 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1293 Previous: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1294 New: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1295 Diff: {currentDeclarer: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, lastEventSequence: {…}}
DeclarationUI.jsx:43 🎯 DECLARATION_UI_DEBUG: Props received: {myHandLength: 8, declarations: {…}, playersLength: 4, currentTotal: 0, isMyTurn: false, …}
DeclarationUI.jsx:52 🎯 DECLARATION_UI_DEBUG: Full players array: (4) [{…}, {…}, {…}, {…}]
DeclarationUI.jsx:53 🎯 DECLARATION_UI_DEBUG: Full declarations object: {}
GameService.ts:412 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room E6791A {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751689530.210548, …}
GameService.ts:511 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:512 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:513 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:514 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:548 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:549 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:494 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:498 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1292 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1293 Previous: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1294 New: {isConnected: true, roomId: 'E6791A', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1295 Diff: {declarationOrder: {…}, lastEventSequence: {…}}

---

🔒 [Room E6791A] Starting game: op_id=E6791A_1
🔍 DEBUG: Redeal limit check - multiplier: 1, limit: 2
🔧 DEBUG: Dealing weak hands to players at indices [0] (max 9 points)
📊 DEBUG: Redeals so far: 0, Max allowed: 2
🔧 DEBUG: Found 24 weak pieces (≤9), 8 strong pieces (>9)
🔧 DEBUG: Andy (index 0) assigned weak hand
🔧 DEBUG: Final hands verification:
  Andy: ['ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'SOLDIER_BLACK(1)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Andy has NO strong pieces!
  Bot 2: ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)', 'HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 3: ['GENERAL_RED(14)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'CANNON_BLACK(3)', 'CHARIOT_BLACK(7)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: True
  Bot 4: ['ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CANNON_RED(4)', 'ELEPHANT_RED(10)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
🔍 PREP_STATE_DEBUG: Play order: [Andy - 0 pts, Bot 2 - 0 pts, Bot 3 - 0 pts, Bot 4 - 0 pts]
🔍 PREP_STATE_DEBUG: Play order types: [<class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>]
🎯 PREP_STATE_DEBUG: All weak players awaiting simultaneous decisions: {'Andy'}
DEBUG_WS: Message for event 'phase_change' added to queue for room E6791A.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🤖 PREP_STATE_DEBUG: Triggering bot manager for simultaneous redeal decisions...
👤 PREP_STATE_DEBUG: Human weak player: Andy - waiting for UI
👤 PREP_STATE_DEBUG: No bot weak players found - all humans will use UI
DEBUG_WS: Message for event 'phase_change' added to queue for room E6791A.
✅ [Room E6791A] Game and StateMachine started successfully: op_id=E6791A_1
✅ [Room E6791A] Bot manager registered for 3 bots
✅ Game started in room E6791A
INFO:     ('127.0.0.1', 49433) - "WebSocket /ws/E6791A" [accepted]
DEBUG_WS: Registered new connection for room E6791A. Total connections: 2
INFO:     connection open
DEBUG_WS_DISCONNECT: WebSocket client disconnected from room E6791A.
INFO:     connection closed
DEBUG_WS: Unregistered connection for room E6791A. Remaining connections: 1
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room E6791A with data: {'room_id': 'E6791A'}
DEBUG_WS_RECEIVE: Sent current game phase preparation to client in room E6791A
DEBUG_WS_RECEIVE: Sent initial room state to client in room E6791A after client_ready.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
DEBUG_WS_RECEIVE: Received event 'accept_redeal' from client in room E6791A with data: {'player_name': 'Andy'}
✅ Redeal accept queued: Andy
🔍 REDEAL_DEBUG: Processing REDEAL_RESPONSE for Andy, accept=True
🔍 REDEAL_DEBUG: _handle_redeal_decision - Andy decision: accept=True
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Andy': True}
🔍 REDEAL_DEBUG: _process_all_decisions - first_accepter: Andy, all decisions: {'Andy': True}
🔍 DEBUG: Redeal limit check - multiplier: 2, limit: 2
🔧 DEBUG: Dealing weak hands to players at indices [0] (max 9 points)
📊 DEBUG: Redeals so far: 1, Max allowed: 2
🔧 DEBUG: Found 24 weak pieces (≤9), 8 strong pieces (>9)
🔧 DEBUG: Andy (index 0) assigned weak hand
🔧 DEBUG: Final hands verification:
  Andy: ['CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_RED(8)']
    → Strong pieces (>9): 0
    → Has RED_GENERAL: False
    ⚠️ WARNING: Andy has NO strong pieces!
  Bot 2: ['GENERAL_RED(14)', 'CHARIOT_BLACK(7)', 'ELEPHANT_RED(10)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: True
  Bot 3: ['ADVISOR_BLACK(11)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
  Bot 4: ['HORSE_RED(6)', 'SOLDIER_RED(2)', 'CANNON_RED(4)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'GENERAL_BLACK(13)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
🔍 PREP_STATE_DEBUG: Play order: [Andy - 0 pts, Bot 2 - 0 pts, Bot 3 - 0 pts, Bot 4 - 0 pts]
🔍 PREP_STATE_DEBUG: Play order types: [<class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>, <class 'engine.player.Player'>]
🎯 PREP_STATE_DEBUG: All weak players awaiting simultaneous decisions: {'Andy'}
DEBUG_WS: Message for event 'phase_change' added to queue for room E6791A.
🤖 PREP_STATE_DEBUG: Triggering bot manager for simultaneous redeal decisions...
👤 PREP_STATE_DEBUG: Human weak player: Andy - waiting for UI
👤 PREP_STATE_DEBUG: No bot weak players found - all humans will use UI
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: {'Andy'}
   - Redeal decisions: {}
   - Weak players awaiting: {'Andy'}
   - All decisions received: False
⏳ PREP_STATE_DEBUG: Waiting for more redeal decisions (0/1)
DEBUG_WS_RECEIVE: Received event 'accept_redeal' from client in room E6791A with data: {'player_name': 'Andy'}
✅ Redeal accept queued: Andy
🔍 REDEAL_DEBUG: Processing REDEAL_RESPONSE for Andy, accept=True
🔍 REDEAL_DEBUG: _handle_redeal_decision - Andy decision: accept=True
🔍 REDEAL_DEBUG: Recorded decision - redeal_decisions now: {'Andy': True}
🔍 REDEAL_DEBUG: _process_all_decisions - first_accepter: Andy, all decisions: {'Andy': True}
🔍 DEBUG: Redeal limit check - multiplier: 3, limit: 2
🚫 DEBUG: Redeal limit (2) exceeded. Multiplier is 3 (>3)
🔄 DEBUG: Switching to guaranteed no redeal to prevent infinite loop.
🛡️ DEBUG: Dealing guaranteed no-redeal hands
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Andy gets strong piece: ADVISOR_RED(12)
  → Bot 2 gets strong piece: GENERAL_RED(14)
  → Bot 3 gets strong piece: ADVISOR_BLACK(11)
  → Bot 4 gets strong piece: ADVISOR_BLACK(11)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['CANNON_RED(4)', 'SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 2: ['GENERAL_RED(14)', 'HORSE_BLACK(5)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'GENERAL_BLACK(13)', 'HORSE_RED(6)', 'CANNON_BLACK(3)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: True
  Bot 3: ['ADVISOR_BLACK(11)', 'ADVISOR_RED(12)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
  Bot 4: ['ELEPHANT_BLACK(9)', 'ADVISOR_BLACK(11)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Andy
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: set()
   - Redeal decisions: {}
   - Weak players awaiting: set()
   - All decisions received: True
✅ PREP_STATE_DEBUG: No weak players, transitioning to DECLARATION
📢 DECL_STATE_DEBUG: Using round_starter: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room E6791A.
DEBUG_WS: Message for event 'phase_change' added to queue for room E6791A.
🔄 PHASE_TRACKING_FIX: New phase detected None -> declaration
👤 ENTERPRISE_BOT_DEBUG: Current declarer Andy is human - waiting
DEBUG_WS: Message for event 'phase_change' added to queue for room E6791A.
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Andy
🔍 BOT_ROUND_DEBUG: Game current_player: Andy
👤 Round starter is human or None: None
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: ''
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer '' index: -1
🔍 DECL_PHASE_DEBUG: Starting loop from index 0 to 4
🔍 DECL_PHASE_DEBUG: Checking player 0 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751689544665}
