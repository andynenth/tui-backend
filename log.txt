DEBUG_WS_RECEIVE: Received event 'ping' from client in room C41817 with data: {'timestamp': 1751169638079}
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 6, Turn 7 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room C41817.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room C41817 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169632.049314}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169632.995243}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169638.041158}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room C41817, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room C41817 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169632.049314}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169632.995243}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169638.041158}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - checking for duplicates
✅ REFINED_FIX: Allowing new trigger for current player Bot 2 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from phase_change (hash: 55e3e4241260)
✅ RACE_CONDITION_FIX: Triggering bot play for Bot 2 - no duplicates detected
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 2
✅ REFINED_FIX: Allowing new trigger for current player Bot 2 from player_played
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from player_played (hash: b936d3c75e94)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.5s...
DEBUG_WS_QUEUE: Room C41817 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room C41817.
DEBUG_WS: Successfully sent 'phase_change' to a client in room C41817.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room C41817.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room C41817
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room C41817 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room C41817, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room C41817 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 2
✅ REFINED_FIX: Allowing delayed same-source trigger for current player Bot 2 from player_played (age: 0.5s)
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from player_played (hash: b936d3c75e94)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.9s...
DEBUG_WS_QUEUE: Room C41817 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room C41817.
DEBUG_WS: Successfully sent 'play' to a client in room C41817.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
✅ BOT_VALIDATION_DEBUG: Notifying bot manager of accepted action from Andy
🔔 BOT_MANAGER_DEBUG: Received event 'action_accepted' for room unknown with data: {'player_name': 'Andy', 'action_type': 'play_pieces', 'result': {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}, 'payload': {'pieces': [SOLDIER_BLACK(1)]}, 'is_bot': False}
❌ BOT_MANAGER_DEBUG: Room unknown not found in active games: []
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 6, Turn 7 - Bot 2 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 6, Turn 7 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 6, Turn 7 Winner determined: Bot 3
🎯 CAPTURED_PILES_DEBUG: Bot 3 captured_piles += 1 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 3
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 3
DEBUG_WS: Message for event 'phase_change' added to queue for room C41817.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room C41817 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169632.049314}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169632.995243}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169638.041158}, 'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169638.647955}}, 'turn_complete': True, 'current_turn_number': 7, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Turn completed - winner: Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room C41817, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room C41817 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169632.049314}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169632.995243}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169638.041158}, 'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751169638.647955}}, 'turn_complete': True, 'current_turn_number': 7, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Turn completed - winner: Bot 3'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 3
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - checking for duplicates
✅ REFINED_FIX: Allowing delayed same-source trigger for current player Bot 2 from phase_change (age: 1.5s)
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from phase_change (hash: 55e3e4241260)
🚫 SEQUENCE_FIX: Bot 2 already acted in turn 7 - skipping
🚫 RACE_CONDITION_FIX: Skipping bot trigger due to sequence tracking for Bot 2
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: Removing 1 pieces from Andy
🏁 TURN_COMPLETION_DEBUG: Removing 1 pieces from Bot 2
🏁 TURN_COMPLETION_DEBUG: Removing 1 pieces from Bot 3
🏁 TURN_COMPLETION_DEBUG: Removing 1 pieces from Bot 4
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = True
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 0, 'Bot 2': 0, 'Bot 3': 0, 'Bot 4': 0}
🔧 CONSISTENCY_CHECK: Min: 0, Max: 0
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 0
DEBUG_WS: Message for event 'turn_complete' added to queue for room C41817.
🏁 TURN_COMPLETION_DEBUG: Round complete - will transition to scoring
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: None, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room C41817.
DEBUG_WS_QUEUE: Room C41817 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room C41817.
DEBUG_WS: Successfully sent 'phase_change' to a client in room C41817.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: None
DEBUG_WS: Message for event 'play' added to queue for room C41817.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: None
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room C41817
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room C41817 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room C41817, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room C41817 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 2, turn should be complete
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': None, 'turn_complete': True}
✅ STATE_MACHINE_DEBUG: Action processed successfully
✅ BOT_VALIDATION_DEBUG: Notifying bot manager of accepted action from Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'action_accepted' for room unknown with data: {'player_name': 'Bot 2', 'action_type': 'play_pieces', 'result': {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': None, 'turn_complete': True}, 'payload': {'pieces': [SOLDIER_BLACK(1)]}, 'is_bot': True}
❌ BOT_MANAGER_DEBUG: Room unknown not found in active games: []
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected None
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1)]}, timestamp=datetime.datetime(2025, 6, 28, 21, 0, 39, 518066), sequence_id=259, is_bot=True)
❌ STATE_MACHINE_DEBUG: Action rejected: play_pieces from Bot 2
🚫 BOT_VALIDATION_DEBUG: Notifying bot manager of rejected action from Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'action_rejected' for room unknown with data: {'player_name': 'Bot 2', 'action_type': 'play_pieces', 'reason': 'Invalid action for current game state', 'payload': {'pieces': [SOLDIER_BLACK(1)]}, 'is_bot': True}
❌ BOT_MANAGER_DEBUG: Room unknown not found in active games: []
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.TURN to GamePhase.SCORING
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.turn_state.TurnState object at 0x104a7d010>
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: Removing 1 pieces from Andy
🏁 TURN_COMPLETION_DEBUG: Removing 1 pieces from Bot 2
🏁 TURN_COMPLETION_DEBUG: Removing 1 pieces from Bot 3
🏁 TURN_COMPLETION_DEBUG: Removing 1 pieces from Bot 4
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = True
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 0, 'Bot 2': 0, 'Bot 3': 0, 'Bot 4': 0}
🔧 CONSISTENCY_CHECK: Min: 0, Max: 0
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 0
DEBUG_WS: Message for event 'turn_complete' added to queue for room C41817.
🏁 TURN_COMPLETION_DEBUG: Round complete - will transition to scoring
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.TURN -> GamePhase.SCORING
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.scoring_state.ScoringState object at 0x104936d90>
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Andy': 1, 'Bot 2': 1, 'Bot 3': 1, 'Bot 4': 4}
📋 SCORING_FIX_DEBUG: Andy - declared: 1, actual: 1
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 1, Actual: 1
   📊 Base Score: 6, Multiplier: 1x, Final: 6
   💯 Total Score: 43
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 1, actual: 5
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 1, Actual: 5
   📊 Base Score: -4, Multiplier: 1x, Final: -4
   💯 Total Score: -10
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 2
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 2
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -12
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 4, actual: 0
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 4, Actual: 0
   📊 Base Score: -4, Multiplier: 1x, Final: -4
   💯 Total Score: -12
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 1, 'actual': 1, 'base_score': 6, 'multiplier': 1, 'final_score': 6, 'total_score': 43}, 'Bot 2': {'declared': 1, 'actual': 5, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -10}, 'Bot 3': {'declared': 1, 'actual': 2, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -12}, 'Bot 4': {'declared': 4, 'actual': 0, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -12}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': 43, 'Bot 2': -10, 'Bot 3': -12, 'Bot 4': -12}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 1, 'captured_piles': 1}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 1, 'captured_piles': 5}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 1, 'captured_piles': 2}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 4, 'captured_piles': 0}]
DEBUG_WS: Message for event 'phase_change' added to queue for room C41817.
DEBUG_WS_QUEUE: Room C41817 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room C41817.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room C41817.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Scoring calculated for round 6
DEBUG_WS: Message for event 'phase_change' added to queue for room C41817.
⏰ SCORING_DELAY_DEBUG: Starting 7-second display delay...
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase scoring for room C41817
DEBUG_WS_QUEUE: Room C41817 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room C41817.
DEBUG_WS: Successfully sent 'phase_change' to a client in room C41817.
DEBUG_WS_QUEUE: Room C41817 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room C41817.
DEBUG_WS: Successfully sent 'play' to a client in room C41817.
DEBUG_WS_QUEUE: Room C41817 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room C41817.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room C41817.
DEBUG_WS_QUEUE: Room C41817 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room C41817.
DEBUG_WS: Successfully sent 'phase_change' to a client in room C41817.
DEBUG_WS_QUEUE: Room C41817 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room C41817.
DEBUG_WS: Successfully sent 'phase_change' to a client in room C41817.
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 STATE_MACHINE_DEBUG: Process loop iteration 7850
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
⏰ SCORING_DELAY_DEBUG: 7-second delay complete - setting display_delay_complete = True
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: True
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Ready to transition to PREPARATION
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.SCORING to GamePhase.PREPARATION
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.scoring_state.ScoringState object at 0x104936d90>
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.SCORING -> GamePhase.PREPARATION
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.preparation_state.PreparationState object at 0x104a7ce10>
🎴 PREP_STATE_DEBUG: Setup phase starting for room C41817
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0