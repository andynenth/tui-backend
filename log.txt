🎴 PREP_STATE_DEBUG: Setup phase starting for room 050EE9
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
🎴 PREP_STATE_DEBUG: Using guaranteed no redeal dealing
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: ADVISOR_RED(12)
  → Bot 3 gets strong piece: ELEPHANT_RED(10)
  → Bot 4 gets strong piece: ADVISOR_BLACK(11)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 2: ['GENERAL_RED(14)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: True
  Bot 3: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 4: ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'CANNON_RED(4)', 'CANNON_RED(4)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'GENERAL_BLACK(13)']
    → Strong pieces (>9): 4
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
{"timestamp": "2025-07-02T06:38:21.741145Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udd0d Weak hand check - Found 0 weak players: set()", "module": "preparation_state", "function": "_deal_cards", "line": 141}
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Bot 3
{"timestamp": "2025-07-02T06:38:21.741201Z", "level": "INFO", "logger": "game.state.preparation", "message": "\u2705 No weak hands - keeping existing starter: Bot 3", "module": "preparation_state", "function": "_deal_cards", "line": 205}
🎯 PREP_STATE_DEBUG: No weak hands detected - auto-transitioning to Declaration phase
{"timestamp": "2025-07-02T06:38:21.741244Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf No weak hands detected - transitioning to Declaration phase", "module": "preparation_state", "function": "_deal_cards", "line": 217}
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-02T06:38:21.741318Z", "level": "INFO", "logger": "game.state.preparation", "message": "Exiting preparation phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-02T06:38:21.741354Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf Round starter already set: Bot 3", "module": "preparation_state", "function": "_cleanup_phase", "line": 94}
🎯 PREP_STATE_DEBUG: Cleanup phase - current_player: Bot 3
🎯 PREP_STATE_DEBUG: Cleanup phase - round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:21.741395Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udccb Preparation complete - Starter: Bot 3, Multiplier: 1x", "module": "preparation_state", "function": "_cleanup_phase", "line": 105}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for declaration
🔧 BASE_STATE_DEBUG: on_enter() called for declaration phase
{"timestamp": "2025-07-02T06:38:21.741444Z", "level": "INFO", "logger": "game.state.declaration", "message": "Entering declaration phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for declaration
📢 DECL_STATE_DEBUG: Using round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:21.741496Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup - basic data", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 5 pts', 'Bot 4 - -2 pts', 'Andy - -5 pts', 'Bot 2 - -4 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0}, 'players': {'Andy': {'hand': ['ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_RED(14)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'CANNON_RED(4)', 'CANNON_RED(4)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'GENERAL_BLACK(13)'], 'hand_size': 8}}, 'round': 3, 'reason': 'Declaration phase setup - basic data', 'sequence': 8, 'timestamp': 1751438301.741717, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1223 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:21.741931Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup - basic data", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
{"timestamp": "2025-07-02T06:38:21.742020Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 5 pts', 'Bot 4 - -2 pts', 'Andy - -5 pts', 'Bot 2 - -4 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'players': {'Andy': {'hand': ['ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_RED(14)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'CANNON_RED(4)', 'CANNON_RED(4)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'GENERAL_BLACK(13)'], 'hand_size': 8}}, 'round': 3, 'reason': 'Declaration phase setup complete - current declarer: Bot 3', 'sequence': 9, 'timestamp': 1751438301.742243, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1274 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
{"timestamp": "2025-07-02T06:38:21.742596Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 3 - 5 pts', 'Bot 4 - -2 pts', 'Andy - -5 pts', 'Bot 2 - -4 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Declaration phase setup complete - current declarer: Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
🤖 BOT_SINGLE_DECLARE: Handling declaration for Bot 3
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 will declare in 1.0s...
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 declaring at position 0
🔧 BOT_DECLARE_DEBUG: Creating fire-and-forget task for state machine action
✅ BOT_DECLARE_DEBUG: Fire-and-forget declaration task created for Bot 3
✅ Bot Bot 3 declared 1
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
🤖 DECLARATION_DEBUG: Triggering bot manager for declaration phase
🔧 DECLARATION_DEBUG: Bot manager active games: ['050EE9']
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for declaration
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for declaration
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'preparation', 'new_phase': 'declaration', 'timestamp': '2025-07-01T23:38:22.737239', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 3, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to declaration with reason: No weak hands detected - preparation complete
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for declaration
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete', 'display': {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_RED(14)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'CANNON_RED(4)', 'CANNON_RED(4)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'GENERAL_BLACK(13)'], 'hand_size': 8}}, 'timestamp': 1751438302.73746, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1321 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
🔧 HANDLE_ACTION_DEBUG: handle_action called for Bot 3 declare
🔧 HANDLE_ACTION_DEBUG: State machine running check: True
🔧 HANDLE_ACTION_DEBUG: Converting action to event
🔧 HANDLE_ACTION_DEBUG: Creating GameEvent from action
🔧 HANDLE_ACTION_DEBUG: GameEvent created successfully
🔧 HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 3
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for declaration
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase declaration for room 050EE9
🔔 BOT_MANAGER_DEBUG: Received event 'round_started' for room 050EE9 with data: {'phase': 'declaration', 'starter': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'round_started' with data keys: ['phase', 'starter']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'round_started'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎪 BOT_HANDLER_DEBUG: Analyzing round start
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action round_start (lock-free)
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Bot 3
🔍 BOT_ROUND_DEBUG: Game current_player: Bot 3
🔧 BOT_ROUND_DEBUG: Declarations now handled by enterprise phase change - skipping old path
✅ BOT_MANAGER_LOCK_FIX: Action round_start completed successfully
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for preparation
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for preparation
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'scoring', 'new_phase': 'preparation', 'timestamp': '2025-07-01T23:38:22.737934', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 3, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to preparation with reason: Scoring complete - starting next round
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for preparation
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'preparation', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Scoring complete - starting next round'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'preparation', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Scoring complete - starting next round', 'display': {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_RED(14)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'CANNON_RED(4)', 'CANNON_RED(4)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'GENERAL_BLACK(13)'], 'hand_size': 8}}, 'timestamp': 1751438302.738086, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1315 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for preparation
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase preparation for room 050EE9
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for scoring
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for scoring
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.DECLARATION -> GamePhase.SCORING
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'declaration', 'new_phase': 'scoring', 'timestamp': '2025-07-01T23:38:22.738369', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 3, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to scoring with reason: All hands empty - round complete
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for scoring
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'All hands empty - round complete'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'scoring', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'All hands empty - round complete', 'display': {'type': 'scoring', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_RED(14)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'CANNON_RED(4)', 'CANNON_RED(4)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'GENERAL_BLACK(13)'], 'hand_size': 8}}, 'timestamp': 1751438302.738474, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1301 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for scoring
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase scoring for room 050EE9
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.DECLARATION -> GamePhase.SCORING
{"timestamp": "2025-07-02T06:38:22.738941Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfc1 Turn phase complete - all hands empty", "module": "turn_state", "function": "_cleanup_phase", "line": 125}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for scoring
🔧 BASE_STATE_DEBUG: on_enter() called for scoring phase
{"timestamp": "2025-07-02T06:38:22.739010Z", "level": "INFO", "logger": "game.state.scoring", "message": "Entering scoring phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for scoring
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
{"timestamp": "2025-07-02T06:38:22.739056Z", "level": "INFO", "logger": "game.state.scoring", "message": "Setting up Scoring Phase", "module": "scoring_state", "function": "_setup_phase", "line": 83}
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Bot 2': 3, 'Bot 3': 1, 'Bot 4': 1, 'Andy': 4}
📋 SCORING_FIX_DEBUG: Andy - declared: 4, actual: 0
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 4, Actual: 0
   📊 Base Score: -4, Multiplier: 1x, Final: -4
   💯 Total Score: -9
{"timestamp": "2025-07-02T06:38:22.739127Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Andy: declared 4, actual 0, base -4, final -4 (\u00d71), total -9", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 3, actual: 0
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 3, Actual: 0
   📊 Base Score: -3, Multiplier: 1x, Final: -3
   💯 Total Score: -7
{"timestamp": "2025-07-02T06:38:22.739182Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 2: declared 3, actual 0, base -3, final -3 (\u00d71), total -7", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: 4
{"timestamp": "2025-07-02T06:38:22.739234Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 3: declared 1, actual 0, base -1, final -1 (\u00d71), total 4", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -3
{"timestamp": "2025-07-02T06:38:22.739285Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 4: declared 1, actual 0, base -1, final -1 (\u00d71), total -3", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 4, 'actual': 0, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -9}, 'Bot 2': {'declared': 3, 'actual': 0, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -7}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': 4}, 'Bot 4': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -3}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': -9, 'Bot 2': -7, 'Bot 3': 4, 'Bot 4': -3}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}]
{"timestamp": "2025-07-02T06:38:22.739416Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83c\udfae Phase Data Update: Scoring calculated for round 3", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'player_disconnect', 'player_reconnect', 'game_state_update'], 'phase_data': {'round_scores': {'Andy': {'declared': 4, 'actual': 0, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -9}, 'Bot 2': {'declared': 3, 'actual': 0, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -7}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': 4}, 'Bot 4': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -3}}, 'total_scores': {'Andy': -9, 'Bot 2': -7, 'Bot 3': 4, 'Bot 4': -3}, 'players': [{'name': 'Andy', 'is_bot': False, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}], 'game_complete': False, 'winners': [], 'scores_calculated': True, 'redeal_multiplier': 1}, 'players': {'Andy': {'hand': ['ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_RED(14)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'CANNON_RED(4)', 'CANNON_RED(4)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'GENERAL_BLACK(13)'], 'hand_size': 8}}, 'round': 3, 'reason': 'Scoring calculated for round 3', 'sequence': 3, 'timestamp': 1751438302.740298, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1984 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:22.740608Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Scoring calculated for round 3", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Scoring calculated for round 3
{"timestamp": "2025-07-02T06:38:22.740715Z", "level": "INFO", "logger": "game.state.scoring", "message": "Scoring complete. Game over: False", "module": "scoring_state", "function": "_setup_phase", "line": 131}
🎯 SCORING_DEBUG: Scores complete - auto-transitioning to next round (Preparation)
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-02T06:38:22.740860Z", "level": "INFO", "logger": "game.state.scoring", "message": "Exiting scoring phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-02T06:38:22.740921Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83c\udfaf Next round starter set to last turn winner: Bot 3", "module": "scoring_state", "function": "_prepare_next_round", "line": 386}
{"timestamp": "2025-07-02T06:38:22.741019Z", "level": "INFO", "logger": "game.state.scoring", "message": "Prepared for round 4", "module": "scoring_state", "function": "_prepare_next_round", "line": 396}
{"timestamp": "2025-07-02T06:38:22.741405Z", "level": "INFO", "logger": "game.state.scoring", "message": "Prepared for next round", "module": "scoring_state", "function": "_cleanup_phase", "line": 158}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for preparation
🔧 BASE_STATE_DEBUG: on_enter() called for preparation phase
{"timestamp": "2025-07-02T06:38:22.742169Z", "level": "INFO", "logger": "game.state.preparation", "message": "Entering preparation phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for preparation
{"timestamp": "2025-07-02T06:38:22.742340Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfb4 Preparation phase starting - dealing cards", "module": "preparation_state", "function": "_setup_phase", "line": 80}
🎴 PREP_STATE_DEBUG: Setup phase starting for room 050EE9
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
🎴 PREP_STATE_DEBUG: Using guaranteed no redeal dealing
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: ELEPHANT_RED(10)
  → Bot 3 gets strong piece: ADVISOR_BLACK(11)
  → Bot 4 gets strong piece: ADVISOR_RED(12)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['HORSE_RED(6)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'ELEPHANT_RED(10)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 2: ['CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'ELEPHANT_RED(10)', 'ADVISOR_RED(12)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: True
  Bot 3: ['CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 4: ['GENERAL_BLACK(13)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
{"timestamp": "2025-07-02T06:38:22.743704Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udd0d Weak hand check - Found 0 weak players: set()", "module": "preparation_state", "function": "_deal_cards", "line": 141}
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Bot 3
{"timestamp": "2025-07-02T06:38:22.743779Z", "level": "INFO", "logger": "game.state.preparation", "message": "\u2705 No weak hands - keeping existing starter: Bot 3", "module": "preparation_state", "function": "_deal_cards", "line": 205}
🎯 PREP_STATE_DEBUG: No weak hands detected - auto-transitioning to Declaration phase
{"timestamp": "2025-07-02T06:38:22.743825Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf No weak hands detected - transitioning to Declaration phase", "module": "preparation_state", "function": "_deal_cards", "line": 217}
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-02T06:38:22.743920Z", "level": "INFO", "logger": "game.state.preparation", "message": "Exiting preparation phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-02T06:38:22.743998Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf Round starter already set: Bot 3", "module": "preparation_state", "function": "_cleanup_phase", "line": 94}
🎯 PREP_STATE_DEBUG: Cleanup phase - current_player: Bot 3
🎯 PREP_STATE_DEBUG: Cleanup phase - round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:22.744090Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udccb Preparation complete - Starter: Bot 3, Multiplier: 1x", "module": "preparation_state", "function": "_cleanup_phase", "line": 105}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for declaration
🔧 BASE_STATE_DEBUG: on_enter() called for declaration phase
{"timestamp": "2025-07-02T06:38:22.744202Z", "level": "INFO", "logger": "game.state.declaration", "message": "Entering declaration phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for declaration
📢 DECL_STATE_DEBUG: Using round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:22.744277Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup - basic data", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 4 pts', 'Bot 4 - -3 pts', 'Andy - -9 pts', 'Bot 2 - -7 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'ELEPHANT_RED(10)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'ELEPHANT_RED(10)', 'ADVISOR_RED(12)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'hand_size': 8}}, 'round': 4, 'reason': 'Declaration phase setup - basic data', 'sequence': 10, 'timestamp': 1751438302.7445629, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1225 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:22.744853Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup - basic data", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
{"timestamp": "2025-07-02T06:38:22.744959Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 4 pts', 'Bot 4 - -3 pts', 'Andy - -9 pts', 'Bot 2 - -7 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'ELEPHANT_RED(10)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'ELEPHANT_RED(10)', 'ADVISOR_RED(12)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'hand_size': 8}}, 'round': 4, 'reason': 'Declaration phase setup complete - current declarer: Bot 3', 'sequence': 11, 'timestamp': 1751438302.7452009, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1276 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
{"timestamp": "2025-07-02T06:38:22.745652Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 3 - 4 pts', 'Bot 4 - -3 pts', 'Andy - -9 pts', 'Bot 2 - -7 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Declaration phase setup complete - current declarer: Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
🤖 BOT_SINGLE_DECLARE: Handling declaration for Bot 3
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 will declare in 0.8s...
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 declaring at position 0
🔧 BOT_DECLARE_DEBUG: Creating fire-and-forget task for state machine action
✅ BOT_DECLARE_DEBUG: Fire-and-forget declaration task created for Bot 3
✅ Bot Bot 3 declared 1
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
🤖 DECLARATION_DEBUG: Triggering bot manager for declaration phase
🔧 DECLARATION_DEBUG: Bot manager active games: ['050EE9']
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for declaration
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for declaration
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'preparation', 'new_phase': 'declaration', 'timestamp': '2025-07-01T23:38:23.574863', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 4, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to declaration with reason: No weak hands detected - preparation complete
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for declaration
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete', 'display': {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'ELEPHANT_RED(10)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'ELEPHANT_RED(10)', 'ADVISOR_RED(12)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'hand_size': 8}}, 'timestamp': 1751438303.575352, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1322 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
🔧 HANDLE_ACTION_DEBUG: handle_action called for Bot 3 declare
🔧 HANDLE_ACTION_DEBUG: State machine running check: True
🔧 HANDLE_ACTION_DEBUG: Converting action to event
🔧 HANDLE_ACTION_DEBUG: Creating GameEvent from action
🔧 HANDLE_ACTION_DEBUG: GameEvent created successfully
🔧 HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 3
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for declaration
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase declaration for room 050EE9
🔔 BOT_MANAGER_DEBUG: Received event 'round_started' for room 050EE9 with data: {'phase': 'declaration', 'starter': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'round_started' with data keys: ['phase', 'starter']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'round_started'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎪 BOT_HANDLER_DEBUG: Analyzing round start
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action round_start (lock-free)
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Bot 3
🔍 BOT_ROUND_DEBUG: Game current_player: Bot 3
🔧 BOT_ROUND_DEBUG: Declarations now handled by enterprise phase change - skipping old path
✅ BOT_MANAGER_LOCK_FIX: Action round_start completed successfully
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for preparation
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for preparation
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'scoring', 'new_phase': 'preparation', 'timestamp': '2025-07-01T23:38:23.576244', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 4, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to preparation with reason: Scoring complete - starting next round
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for preparation
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'preparation', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Scoring complete - starting next round'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'preparation', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Scoring complete - starting next round', 'display': {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'ELEPHANT_RED(10)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'ELEPHANT_RED(10)', 'ADVISOR_RED(12)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'hand_size': 8}}, 'timestamp': 1751438303.576499, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1315 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for preparation
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase preparation for room 050EE9
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for scoring
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for scoring
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.DECLARATION -> GamePhase.SCORING
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'declaration', 'new_phase': 'scoring', 'timestamp': '2025-07-01T23:38:23.577075', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 4, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to scoring with reason: All hands empty - round complete
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for scoring
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'All hands empty - round complete'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'scoring', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'All hands empty - round complete', 'display': {'type': 'scoring', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'ELEPHANT_RED(10)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'ELEPHANT_RED(10)', 'ADVISOR_RED(12)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'hand_size': 8}}, 'timestamp': 1751438303.577423, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1301 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for scoring
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase scoring for room 050EE9
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.DECLARATION -> GamePhase.SCORING
{"timestamp": "2025-07-02T06:38:23.578579Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfc1 Turn phase complete - all hands empty", "module": "turn_state", "function": "_cleanup_phase", "line": 125}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for scoring
🔧 BASE_STATE_DEBUG: on_enter() called for scoring phase
{"timestamp": "2025-07-02T06:38:23.578786Z", "level": "INFO", "logger": "game.state.scoring", "message": "Entering scoring phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for scoring
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
{"timestamp": "2025-07-02T06:38:23.578864Z", "level": "INFO", "logger": "game.state.scoring", "message": "Setting up Scoring Phase", "module": "scoring_state", "function": "_setup_phase", "line": 83}
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Bot 2': 3, 'Bot 3': 1, 'Bot 4': 1, 'Andy': 4}
📋 SCORING_FIX_DEBUG: Andy - declared: 4, actual: 0
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 4, Actual: 0
   📊 Base Score: -4, Multiplier: 1x, Final: -4
   💯 Total Score: -13
{"timestamp": "2025-07-02T06:38:23.578959Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Andy: declared 4, actual 0, base -4, final -4 (\u00d71), total -13", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 3, actual: 0
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 3, Actual: 0
   📊 Base Score: -3, Multiplier: 1x, Final: -3
   💯 Total Score: -10
{"timestamp": "2025-07-02T06:38:23.579078Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 2: declared 3, actual 0, base -3, final -3 (\u00d71), total -10", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: 3
{"timestamp": "2025-07-02T06:38:23.579223Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 3: declared 1, actual 0, base -1, final -1 (\u00d71), total 3", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -4
{"timestamp": "2025-07-02T06:38:23.579363Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 4: declared 1, actual 0, base -1, final -1 (\u00d71), total -4", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 4, 'actual': 0, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -13}, 'Bot 2': {'declared': 3, 'actual': 0, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -10}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': 3}, 'Bot 4': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -4}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': -13, 'Bot 2': -10, 'Bot 3': 3, 'Bot 4': -4}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}]
{"timestamp": "2025-07-02T06:38:23.579619Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83c\udfae Phase Data Update: Scoring calculated for round 4", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'player_disconnect', 'player_reconnect', 'game_state_update'], 'phase_data': {'round_scores': {'Andy': {'declared': 4, 'actual': 0, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -13}, 'Bot 2': {'declared': 3, 'actual': 0, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -10}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': 3}, 'Bot 4': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -4}}, 'total_scores': {'Andy': -13, 'Bot 2': -10, 'Bot 3': 3, 'Bot 4': -4}, 'players': [{'name': 'Andy', 'is_bot': False, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}], 'game_complete': False, 'winners': [], 'scores_calculated': True, 'redeal_multiplier': 1}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'ELEPHANT_RED(10)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'ELEPHANT_RED(10)', 'ADVISOR_RED(12)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'hand_size': 8}}, 'round': 4, 'reason': 'Scoring calculated for round 4', 'sequence': 4, 'timestamp': 1751438303.581056, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1988 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:23.582668Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Scoring calculated for round 4", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Scoring calculated for round 4
{"timestamp": "2025-07-02T06:38:23.587097Z", "level": "INFO", "logger": "game.state.scoring", "message": "Scoring complete. Game over: False", "module": "scoring_state", "function": "_setup_phase", "line": 131}
🎯 SCORING_DEBUG: Scores complete - auto-transitioning to next round (Preparation)
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-02T06:38:23.587390Z", "level": "INFO", "logger": "game.state.scoring", "message": "Exiting scoring phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-02T06:38:23.587521Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83c\udfaf Next round starter set to last turn winner: Bot 3", "module": "scoring_state", "function": "_prepare_next_round", "line": 386}
{"timestamp": "2025-07-02T06:38:23.587638Z", "level": "INFO", "logger": "game.state.scoring", "message": "Prepared for round 5", "module": "scoring_state", "function": "_prepare_next_round", "line": 396}
{"timestamp": "2025-07-02T06:38:23.587707Z", "level": "INFO", "logger": "game.state.scoring", "message": "Prepared for next round", "module": "scoring_state", "function": "_cleanup_phase", "line": 158}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for preparation
🔧 BASE_STATE_DEBUG: on_enter() called for preparation phase
{"timestamp": "2025-07-02T06:38:23.587865Z", "level": "INFO", "logger": "game.state.preparation", "message": "Entering preparation phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for preparation
{"timestamp": "2025-07-02T06:38:23.588007Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfb4 Preparation phase starting - dealing cards", "module": "preparation_state", "function": "_setup_phase", "line": 80}
🎴 PREP_STATE_DEBUG: Setup phase starting for room 050EE9
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
🎴 PREP_STATE_DEBUG: Using guaranteed no redeal dealing
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: ELEPHANT_RED(10)
  → Bot 3 gets strong piece: ADVISOR_RED(12)
  → Bot 4 gets strong piece: ADVISOR_RED(12)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 2: ['GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: True
  Bot 3: ['HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CANNON_RED(4)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 4: ['SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
{"timestamp": "2025-07-02T06:38:23.589267Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udd0d Weak hand check - Found 0 weak players: set()", "module": "preparation_state", "function": "_deal_cards", "line": 141}
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Bot 3
{"timestamp": "2025-07-02T06:38:23.589580Z", "level": "INFO", "logger": "game.state.preparation", "message": "\u2705 No weak hands - keeping existing starter: Bot 3", "module": "preparation_state", "function": "_deal_cards", "line": 205}
🎯 PREP_STATE_DEBUG: No weak hands detected - auto-transitioning to Declaration phase
{"timestamp": "2025-07-02T06:38:23.590390Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf No weak hands detected - transitioning to Declaration phase", "module": "preparation_state", "function": "_deal_cards", "line": 217}
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-02T06:38:23.591406Z", "level": "INFO", "logger": "game.state.preparation", "message": "Exiting preparation phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-02T06:38:23.591787Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf Round starter already set: Bot 3", "module": "preparation_state", "function": "_cleanup_phase", "line": 94}
🎯 PREP_STATE_DEBUG: Cleanup phase - current_player: Bot 3
🎯 PREP_STATE_DEBUG: Cleanup phase - round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:23.591949Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udccb Preparation complete - Starter: Bot 3, Multiplier: 1x", "module": "preparation_state", "function": "_cleanup_phase", "line": 105}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for declaration
🔧 BASE_STATE_DEBUG: on_enter() called for declaration phase
{"timestamp": "2025-07-02T06:38:23.592078Z", "level": "INFO", "logger": "game.state.declaration", "message": "Entering declaration phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for declaration
📢 DECL_STATE_DEBUG: Using round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:23.592183Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup - basic data", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 3 pts', 'Bot 4 - -4 pts', 'Andy - -13 pts', 'Bot 2 - -10 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0}, 'players': {'Andy': {'hand': ['SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)'], 'hand_size': 8}}, 'round': 5, 'reason': 'Declaration phase setup - basic data', 'sequence': 12, 'timestamp': 1751438303.592691, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1226 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:23.593231Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup - basic data", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
{"timestamp": "2025-07-02T06:38:23.593409Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 3 pts', 'Bot 4 - -4 pts', 'Andy - -13 pts', 'Bot 2 - -10 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'players': {'Andy': {'hand': ['SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)'], 'hand_size': 8}}, 'round': 5, 'reason': 'Declaration phase setup complete - current declarer: Bot 3', 'sequence': 13, 'timestamp': 1751438303.593899, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1277 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
{"timestamp": "2025-07-02T06:38:23.595028Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 3 - 3 pts', 'Bot 4 - -4 pts', 'Andy - -13 pts', 'Bot 2 - -10 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Declaration phase setup complete - current declarer: Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
🤖 BOT_SINGLE_DECLARE: Handling declaration for Bot 3
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 will declare in 0.9s...
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 declaring at position 0
🔧 BOT_DECLARE_DEBUG: Creating fire-and-forget task for state machine action
✅ BOT_DECLARE_DEBUG: Fire-and-forget declaration task created for Bot 3
✅ Bot Bot 3 declared 1
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
🤖 DECLARATION_DEBUG: Triggering bot manager for declaration phase
🔧 DECLARATION_DEBUG: Bot manager active games: ['050EE9']
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for declaration
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for declaration
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'preparation', 'new_phase': 'declaration', 'timestamp': '2025-07-01T23:38:24.536248', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 5, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to declaration with reason: No weak hands detected - preparation complete
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for declaration
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete', 'display': {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)'], 'hand_size': 8}}, 'timestamp': 1751438304.536514, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1322 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
🔧 HANDLE_ACTION_DEBUG: handle_action called for Bot 3 declare
🔧 HANDLE_ACTION_DEBUG: State machine running check: True
🔧 HANDLE_ACTION_DEBUG: Converting action to event
🔧 HANDLE_ACTION_DEBUG: Creating GameEvent from action
🔧 HANDLE_ACTION_DEBUG: GameEvent created successfully
🔧 HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 3
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for declaration
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase declaration for room 050EE9
🔔 BOT_MANAGER_DEBUG: Received event 'round_started' for room 050EE9 with data: {'phase': 'declaration', 'starter': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'round_started' with data keys: ['phase', 'starter']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'round_started'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎪 BOT_HANDLER_DEBUG: Analyzing round start
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action round_start (lock-free)
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Bot 3
🔍 BOT_ROUND_DEBUG: Game current_player: Bot 3
🔧 BOT_ROUND_DEBUG: Declarations now handled by enterprise phase change - skipping old path
✅ BOT_MANAGER_LOCK_FIX: Action round_start completed successfully
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for preparation
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for preparation
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'scoring', 'new_phase': 'preparation', 'timestamp': '2025-07-01T23:38:24.537297', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 5, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to preparation with reason: Scoring complete - starting next round
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for preparation
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'preparation', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Scoring complete - starting next round'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'preparation', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Scoring complete - starting next round', 'display': {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)'], 'hand_size': 8}}, 'timestamp': 1751438304.5375302, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1316 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for preparation
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase preparation for room 050EE9
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for scoring
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for scoring
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.DECLARATION -> GamePhase.SCORING
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'declaration', 'new_phase': 'scoring', 'timestamp': '2025-07-01T23:38:24.538146', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 5, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to scoring with reason: All hands empty - round complete
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for scoring
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'All hands empty - round complete'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'scoring', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'All hands empty - round complete', 'display': {'type': 'scoring', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)'], 'hand_size': 8}}, 'timestamp': 1751438304.5383291, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1302 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for scoring
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase scoring for room 050EE9
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.DECLARATION -> GamePhase.SCORING
{"timestamp": "2025-07-02T06:38:24.539236Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfc1 Turn phase complete - all hands empty", "module": "turn_state", "function": "_cleanup_phase", "line": 125}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for scoring
🔧 BASE_STATE_DEBUG: on_enter() called for scoring phase
{"timestamp": "2025-07-02T06:38:24.539339Z", "level": "INFO", "logger": "game.state.scoring", "message": "Entering scoring phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for scoring
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
{"timestamp": "2025-07-02T06:38:24.539409Z", "level": "INFO", "logger": "game.state.scoring", "message": "Setting up Scoring Phase", "module": "scoring_state", "function": "_setup_phase", "line": 83}
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Bot 2': 3, 'Bot 3': 1, 'Bot 4': 1, 'Andy': 4}
📋 SCORING_FIX_DEBUG: Andy - declared: 4, actual: 0
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 4, Actual: 0
   📊 Base Score: -4, Multiplier: 1x, Final: -4
   💯 Total Score: -17
{"timestamp": "2025-07-02T06:38:24.539508Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Andy: declared 4, actual 0, base -4, final -4 (\u00d71), total -17", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 3, actual: 0
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 3, Actual: 0
   📊 Base Score: -3, Multiplier: 1x, Final: -3
   💯 Total Score: -13
{"timestamp": "2025-07-02T06:38:24.539573Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 2: declared 3, actual 0, base -3, final -3 (\u00d71), total -13", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: 2
{"timestamp": "2025-07-02T06:38:24.539644Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 3: declared 1, actual 0, base -1, final -1 (\u00d71), total 2", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -5
{"timestamp": "2025-07-02T06:38:24.539722Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 4: declared 1, actual 0, base -1, final -1 (\u00d71), total -5", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 4, 'actual': 0, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -17}, 'Bot 2': {'declared': 3, 'actual': 0, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -13}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': 2}, 'Bot 4': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -5}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': -17, 'Bot 2': -13, 'Bot 3': 2, 'Bot 4': -5}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}]
{"timestamp": "2025-07-02T06:38:24.539905Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83c\udfae Phase Data Update: Scoring calculated for round 5", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'player_disconnect', 'player_reconnect', 'game_state_update'], 'phase_data': {'round_scores': {'Andy': {'declared': 4, 'actual': 0, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -17}, 'Bot 2': {'declared': 3, 'actual': 0, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -13}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': 2}, 'Bot 4': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -5}}, 'total_scores': {'Andy': -17, 'Bot 2': -13, 'Bot 3': 2, 'Bot 4': -5}, 'players': [{'name': 'Andy', 'is_bot': False, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}], 'game_complete': False, 'winners': [], 'scores_calculated': True, 'redeal_multiplier': 1}, 'players': {'Andy': {'hand': ['SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'GENERAL_RED(14)', 'CANNON_RED(4)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)'], 'hand_size': 8}, 'Bot 3': {'hand': ['HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)'], 'hand_size': 8}}, 'round': 5, 'reason': 'Scoring calculated for round 5', 'sequence': 5, 'timestamp': 1751438304.541004, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1988 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:24.541581Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Scoring calculated for round 5", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Scoring calculated for round 5
{"timestamp": "2025-07-02T06:38:24.541720Z", "level": "INFO", "logger": "game.state.scoring", "message": "Scoring complete. Game over: False", "module": "scoring_state", "function": "_setup_phase", "line": 131}
🎯 SCORING_DEBUG: Scores complete - auto-transitioning to next round (Preparation)
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-02T06:38:24.541865Z", "level": "INFO", "logger": "game.state.scoring", "message": "Exiting scoring phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-02T06:38:24.541982Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83c\udfaf Next round starter set to last turn winner: Bot 3", "module": "scoring_state", "function": "_prepare_next_round", "line": 386}
{"timestamp": "2025-07-02T06:38:24.544037Z", "level": "INFO", "logger": "game.state.scoring", "message": "Prepared for round 6", "module": "scoring_state", "function": "_prepare_next_round", "line": 396}
{"timestamp": "2025-07-02T06:38:24.544137Z", "level": "INFO", "logger": "game.state.scoring", "message": "Prepared for next round", "module": "scoring_state", "function": "_cleanup_phase", "line": 158}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for preparation
🔧 BASE_STATE_DEBUG: on_enter() called for preparation phase
{"timestamp": "2025-07-02T06:38:24.544257Z", "level": "INFO", "logger": "game.state.preparation", "message": "Entering preparation phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for preparation
{"timestamp": "2025-07-02T06:38:24.544330Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfb4 Preparation phase starting - dealing cards", "module": "preparation_state", "function": "_setup_phase", "line": 80}
🎴 PREP_STATE_DEBUG: Setup phase starting for room 050EE9
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
🎴 PREP_STATE_DEBUG: Using guaranteed no redeal dealing
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: ADVISOR_RED(12)
  → Bot 3 gets strong piece: ELEPHANT_RED(10)
  → Bot 4 gets strong piece: ADVISOR_BLACK(11)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 2: ['SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'GENERAL_RED(14)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: True
  Bot 3: ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'HORSE_RED(6)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 4: ['GENERAL_BLACK(13)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)']
    → Strong pieces (>9): 4
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
{"timestamp": "2025-07-02T06:38:24.544920Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udd0d Weak hand check - Found 0 weak players: set()", "module": "preparation_state", "function": "_deal_cards", "line": 141}
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Bot 3
{"timestamp": "2025-07-02T06:38:24.545003Z", "level": "INFO", "logger": "game.state.preparation", "message": "\u2705 No weak hands - keeping existing starter: Bot 3", "module": "preparation_state", "function": "_deal_cards", "line": 205}
🎯 PREP_STATE_DEBUG: No weak hands detected - auto-transitioning to Declaration phase
{"timestamp": "2025-07-02T06:38:24.545068Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf No weak hands detected - transitioning to Declaration phase", "module": "preparation_state", "function": "_deal_cards", "line": 217}
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-02T06:38:24.545201Z", "level": "INFO", "logger": "game.state.preparation", "message": "Exiting preparation phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-02T06:38:24.545269Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf Round starter already set: Bot 3", "module": "preparation_state", "function": "_cleanup_phase", "line": 94}
🎯 PREP_STATE_DEBUG: Cleanup phase - current_player: Bot 3
🎯 PREP_STATE_DEBUG: Cleanup phase - round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:24.545349Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udccb Preparation complete - Starter: Bot 3, Multiplier: 1x", "module": "preparation_state", "function": "_cleanup_phase", "line": 105}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for declaration
🔧 BASE_STATE_DEBUG: on_enter() called for declaration phase
{"timestamp": "2025-07-02T06:38:24.545435Z", "level": "INFO", "logger": "game.state.declaration", "message": "Entering declaration phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for declaration
📢 DECL_STATE_DEBUG: Using round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:24.545519Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup - basic data", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 2 pts', 'Bot 4 - -5 pts', 'Andy - -17 pts', 'Bot 2 - -13 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0}, 'players': {'Andy': {'hand': ['ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'GENERAL_RED(14)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 6, 'reason': 'Declaration phase setup - basic data', 'sequence': 14, 'timestamp': 1751438304.5458062, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1227 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:24.546205Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup - basic data", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
{"timestamp": "2025-07-02T06:38:24.546400Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 2 pts', 'Bot 4 - -5 pts', 'Andy - -17 pts', 'Bot 2 - -13 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'players': {'Andy': {'hand': ['ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'GENERAL_RED(14)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 6, 'reason': 'Declaration phase setup complete - current declarer: Bot 3', 'sequence': 15, 'timestamp': 1751438304.5468092, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1278 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
{"timestamp": "2025-07-02T06:38:24.547465Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 3 - 2 pts', 'Bot 4 - -5 pts', 'Andy - -17 pts', 'Bot 2 - -13 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Declaration phase setup complete - current declarer: Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
🤖 BOT_SINGLE_DECLARE: Handling declaration for Bot 3
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 will declare in 0.7s...
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 declaring at position 0
🔧 BOT_DECLARE_DEBUG: Creating fire-and-forget task for state machine action
✅ BOT_DECLARE_DEBUG: Fire-and-forget declaration task created for Bot 3
✅ Bot Bot 3 declared 1
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
🤖 DECLARATION_DEBUG: Triggering bot manager for declaration phase
🔧 DECLARATION_DEBUG: Bot manager active games: ['050EE9']
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for declaration
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for declaration
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'preparation', 'new_phase': 'declaration', 'timestamp': '2025-07-01T23:38:25.209117', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 6, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to declaration with reason: No weak hands detected - preparation complete
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for declaration
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete', 'display': {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'GENERAL_RED(14)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'timestamp': 1751438305.2094898, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1323 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
🔧 HANDLE_ACTION_DEBUG: handle_action called for Bot 3 declare
🔧 HANDLE_ACTION_DEBUG: State machine running check: True
🔧 HANDLE_ACTION_DEBUG: Converting action to event
🔧 HANDLE_ACTION_DEBUG: Creating GameEvent from action
🔧 HANDLE_ACTION_DEBUG: GameEvent created successfully
🔧 HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 3
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for declaration
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase declaration for room 050EE9
🔔 BOT_MANAGER_DEBUG: Received event 'round_started' for room 050EE9 with data: {'phase': 'declaration', 'starter': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'round_started' with data keys: ['phase', 'starter']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'round_started'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎪 BOT_HANDLER_DEBUG: Analyzing round start
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action round_start (lock-free)
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Bot 3
🔍 BOT_ROUND_DEBUG: Game current_player: Bot 3
🔧 BOT_ROUND_DEBUG: Declarations now handled by enterprise phase change - skipping old path
✅ BOT_MANAGER_LOCK_FIX: Action round_start completed successfully
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for preparation
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for preparation
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'scoring', 'new_phase': 'preparation', 'timestamp': '2025-07-01T23:38:25.210574', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 6, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to preparation with reason: Scoring complete - starting next round
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for preparation
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'preparation', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Scoring complete - starting next round'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'preparation', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Scoring complete - starting next round', 'display': {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'GENERAL_RED(14)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'timestamp': 1751438305.2110431, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1316 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for preparation
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase preparation for room 050EE9
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for scoring
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for scoring
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.DECLARATION -> GamePhase.SCORING
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'declaration', 'new_phase': 'scoring', 'timestamp': '2025-07-01T23:38:25.211742', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 6, 'player_count': 4, 'current_player': 'Bot 3'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to scoring with reason: All hands empty - round complete
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for scoring
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'All hands empty - round complete'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'scoring', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'All hands empty - round complete', 'display': {'type': 'scoring', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'GENERAL_RED(14)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'timestamp': 1751438305.212054, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1301 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for scoring
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase scoring for room 050EE9
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.DECLARATION -> GamePhase.SCORING
{"timestamp": "2025-07-02T06:38:25.213001Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfc1 Turn phase complete - all hands empty", "module": "turn_state", "function": "_cleanup_phase", "line": 125}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for scoring
🔧 BASE_STATE_DEBUG: on_enter() called for scoring phase
{"timestamp": "2025-07-02T06:38:25.213119Z", "level": "INFO", "logger": "game.state.scoring", "message": "Entering scoring phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for scoring
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
{"timestamp": "2025-07-02T06:38:25.213203Z", "level": "INFO", "logger": "game.state.scoring", "message": "Setting up Scoring Phase", "module": "scoring_state", "function": "_setup_phase", "line": 83}
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Bot 2': 3, 'Bot 3': 1, 'Bot 4': 1, 'Andy': 4}
📋 SCORING_FIX_DEBUG: Andy - declared: 4, actual: 0
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 4, Actual: 0
   📊 Base Score: -4, Multiplier: 1x, Final: -4
   💯 Total Score: -21
{"timestamp": "2025-07-02T06:38:25.213319Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Andy: declared 4, actual 0, base -4, final -4 (\u00d71), total -21", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 3, actual: 0
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 3, Actual: 0
   📊 Base Score: -3, Multiplier: 1x, Final: -3
   💯 Total Score: -16
{"timestamp": "2025-07-02T06:38:25.213415Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 2: declared 3, actual 0, base -3, final -3 (\u00d71), total -16", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: 1
{"timestamp": "2025-07-02T06:38:25.213507Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 3: declared 1, actual 0, base -1, final -1 (\u00d71), total 1", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -6
{"timestamp": "2025-07-02T06:38:25.213596Z", "level": "INFO", "logger": "game.state.scoring", "message": "Player Bot 4: declared 1, actual 0, base -1, final -1 (\u00d71), total -6", "module": "scoring_state", "function": "_calculate_round_scores", "line": 332}
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 4, 'actual': 0, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -21}, 'Bot 2': {'declared': 3, 'actual': 0, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -16}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': 1}, 'Bot 4': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -6}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': -21, 'Bot 2': -16, 'Bot 3': 1, 'Bot 4': -6}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}]
{"timestamp": "2025-07-02T06:38:25.213874Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83c\udfae Phase Data Update: Scoring calculated for round 6", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'scoring', 'allowed_actions': ['timeout', 'player_disconnect', 'player_reconnect', 'game_state_update'], 'phase_data': {'round_scores': {'Andy': {'declared': 4, 'actual': 0, 'base_score': -4, 'multiplier': 1, 'final_score': -4, 'total_score': -21}, 'Bot 2': {'declared': 3, 'actual': 0, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -16}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': 1}, 'Bot 4': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -6}}, 'total_scores': {'Andy': -21, 'Bot 2': -16, 'Bot 3': 1, 'Bot 4': -6}, 'players': [{'name': 'Andy', 'is_bot': False, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 0, 'captured_piles': 0}], 'game_complete': False, 'winners': [], 'scores_calculated': True, 'redeal_multiplier': 1}, 'players': {'Andy': {'hand': ['ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'GENERAL_RED(14)'], 'hand_size': 8}, 'Bot 3': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'HORSE_RED(6)'], 'hand_size': 8}, 'Bot 4': {'hand': ['GENERAL_BLACK(13)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}}, 'round': 6, 'reason': 'Scoring calculated for round 6', 'sequence': 6, 'timestamp': 1751438305.2154748, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1989 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:25.216335Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Scoring calculated for round 6", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Scoring calculated for round 6
{"timestamp": "2025-07-02T06:38:25.216515Z", "level": "INFO", "logger": "game.state.scoring", "message": "Scoring complete. Game over: False", "module": "scoring_state", "function": "_setup_phase", "line": 131}
🎯 SCORING_DEBUG: Scores complete - auto-transitioning to next round (Preparation)
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.SCORING -> GamePhase.PREPARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-02T06:38:25.216934Z", "level": "INFO", "logger": "game.state.scoring", "message": "Exiting scoring phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-02T06:38:25.218244Z", "level": "INFO", "logger": "game.state.scoring", "message": "\ud83c\udfaf Next round starter set to last turn winner: Bot 3", "module": "scoring_state", "function": "_prepare_next_round", "line": 386}
{"timestamp": "2025-07-02T06:38:25.218345Z", "level": "INFO", "logger": "game.state.scoring", "message": "Prepared for round 7", "module": "scoring_state", "function": "_prepare_next_round", "line": 396}
{"timestamp": "2025-07-02T06:38:25.218466Z", "level": "INFO", "logger": "game.state.scoring", "message": "Prepared for next round", "module": "scoring_state", "function": "_cleanup_phase", "line": 158}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for preparation
🔧 BASE_STATE_DEBUG: on_enter() called for preparation phase
{"timestamp": "2025-07-02T06:38:25.218633Z", "level": "INFO", "logger": "game.state.preparation", "message": "Entering preparation phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for preparation
{"timestamp": "2025-07-02T06:38:25.218729Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfb4 Preparation phase starting - dealing cards", "module": "preparation_state", "function": "_setup_phase", "line": 80}
🎴 PREP_STATE_DEBUG: Setup phase starting for room 050EE9
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
🎴 PREP_STATE_DEBUG: Using guaranteed no redeal dealing
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: ELEPHANT_RED(10)
  → Bot 3 gets strong piece: ADVISOR_BLACK(11)
  → Bot 4 gets strong piece: ADVISOR_RED(12)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_BLACK(1)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'CHARIOT_BLACK(7)', 'ELEPHANT_RED(10)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CANNON_RED(4)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 2: ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: True
  Bot 3: ['SOLDIER_RED(2)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
  Bot 4: ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
{"timestamp": "2025-07-02T06:38:25.219296Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udd0d Weak hand check - Found 0 weak players: set()", "module": "preparation_state", "function": "_deal_cards", "line": 141}
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Bot 3
{"timestamp": "2025-07-02T06:38:25.219365Z", "level": "INFO", "logger": "game.state.preparation", "message": "\u2705 No weak hands - keeping existing starter: Bot 3", "module": "preparation_state", "function": "_deal_cards", "line": 205}
🎯 PREP_STATE_DEBUG: No weak hands detected - auto-transitioning to Declaration phase
{"timestamp": "2025-07-02T06:38:25.219421Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf No weak hands detected - transitioning to Declaration phase", "module": "preparation_state", "function": "_deal_cards", "line": 217}
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-02T06:38:25.219524Z", "level": "INFO", "logger": "game.state.preparation", "message": "Exiting preparation phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-02T06:38:25.219572Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf Round starter already set: Bot 3", "module": "preparation_state", "function": "_cleanup_phase", "line": 94}
🎯 PREP_STATE_DEBUG: Cleanup phase - current_player: Bot 3
🎯 PREP_STATE_DEBUG: Cleanup phase - round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:25.219628Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udccb Preparation complete - Starter: Bot 3, Multiplier: 1x", "module": "preparation_state", "function": "_cleanup_phase", "line": 105}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for declaration
🔧 BASE_STATE_DEBUG: on_enter() called for declaration phase
{"timestamp": "2025-07-02T06:38:25.219694Z", "level": "INFO", "logger": "game.state.declaration", "message": "Entering declaration phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for declaration
📢 DECL_STATE_DEBUG: Using round_starter: Bot 3
{"timestamp": "2025-07-02T06:38:25.219760Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup - basic data", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 1 pts', 'Bot 4 - -6 pts', 'Andy - -21 pts', 'Bot 2 - -16 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0}, 'players': {'Andy': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'CHARIOT_BLACK(7)', 'ELEPHANT_RED(10)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'hand_size': 8}}, 'round': 7, 'reason': 'Declaration phase setup - basic data', 'sequence': 16, 'timestamp': 1751438305.220074, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1226 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:25.220461Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup - basic data", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
{"timestamp": "2025-07-02T06:38:25.220605Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 1 pts', 'Bot 4 - -6 pts', 'Andy - -21 pts', 'Bot 2 - -16 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'players': {'Andy': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'CHARIOT_BLACK(7)', 'ELEPHANT_RED(10)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'hand_size': 8}}, 'round': 7, 'reason': 'Declaration phase setup complete - current declarer: Bot 3', 'sequence': 17, 'timestamp': 1751438305.220921, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1277 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
{"timestamp": "2025-07-02T06:38:25.221497Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Declaration phase setup complete - current declarer: Bot 3", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 3 - 1 pts', 'Bot 4 - -6 pts', 'Andy - -21 pts', 'Bot 2 - -16 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Declaration phase setup complete - current declarer: Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
🤖 BOT_SINGLE_DECLARE: Handling declaration for Bot 3
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 will declare in 0.8s...
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
❌ EVENT_PROCESSOR_DEBUG: Timeout waiting for processing_lock after 5 seconds
EventProcessor timeout for event play_pieces from Bot 4
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 5.001s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 5.0010600090026855, 'reason': 'EventProcessor timeout - possible deadlock', 'data': {}}
✅ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 4
🎯 BOT_PLAY_DEBUG: State machine result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 5.0010600090026855, 'reason': 'EventProcessor timeout - possible deadlock', 'data': {}}
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-02T06:38:25.662998Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Player Bot 3 declared 1", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 1 pts', 'Bot 4 - -6 pts', 'Andy - -21 pts', 'Bot 2 - -16 pts'], 'current_declarer_index': 1, 'declarations': {'Bot 3': 1}, 'declaration_total': 1, 'current_declarer': 'Bot 4'}, 'players': {'Andy': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'CHARIOT_BLACK(7)', 'ELEPHANT_RED(10)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'hand_size': 8}}, 'round': 7, 'reason': 'Player Bot 3 declared 1', 'sequence': 18, 'timestamp': 1751438305.6631072, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1253 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:25.663289Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Player Bot 3 declared 1", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 declared 1
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 3 - 1 pts', 'Bot 4 - -6 pts', 'Andy - -21 pts', 'Bot 2 - -16 pts'], 'current_declarer_index': 1, 'declarations': {'Bot 3': 1}, 'declaration_total': 1, 'current_declarer': 'Bot 4'}, 'current_declarer': 'Bot 4', 'reason': 'Player Bot 3 declared 1'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
🤖 BOT_SINGLE_DECLARE: Handling declaration for Bot 4
🤖 BOT_SINGLE_DECLARE: Bot Bot 4 will declare in 0.6s...
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🤖 BOT_SINGLE_DECLARE: Bot Bot 4 declaring at position 1
🔧 BOT_DECLARE_DEBUG: Creating fire-and-forget task for state machine action
✅ BOT_DECLARE_DEBUG: Fire-and-forget declaration task created for Bot 4
✅ Bot Bot 4 declared 1
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
🤖 DECLARATION_DEBUG: Triggering bot manager after Bot 3 declared
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
{"timestamp": "2025-07-02T06:38:26.257982Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Bot 3 declared 1", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 4.523s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 4.523280143737793, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 3', 'value': 1, 'total': 1}}
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 4.523280143737793, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 3', 'value': 1, 'total': 1}}
🔧 HANDLE_ACTION_DEBUG: handle_action called for Bot 4 declare
🔧 HANDLE_ACTION_DEBUG: State machine running check: True
🔧 HANDLE_ACTION_DEBUG: Converting action to event
🔧 HANDLE_ACTION_DEBUG: Creating GameEvent from action
🔧 HANDLE_ACTION_DEBUG: GameEvent created successfully
🔧 HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 4
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-02T06:38:26.258588Z", "level": "WARNING", "logger": "game.state.declaration", "message": "Wrong player turn: Bot 3, expected: Bot 4", "module": "declaration_state", "function": "_validate_action", "line": 112}
{"timestamp": "2025-07-02T06:38:26.258709Z", "level": "WARNING", "logger": "game.state.declaration", "message": "Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 1}, timestamp=datetime.datetime(2025, 7, 1, 23, 38, 26, 258525), sequence_id=0, is_bot=False)", "module": "base_state", "function": "handle_action", "line": 71}
✅ PROCESS_EVENT_DEBUG: State process_event completed: False
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: False
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 3.521s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 3.521169900894165, 'reason': 'Declaration action rejected', 'data': {}}
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 3.521169900894165, 'reason': 'Declaration action rejected', 'data': {}}
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-02T06:38:26.259065Z", "level": "WARNING", "logger": "game.state.declaration", "message": "Wrong player turn: Bot 3, expected: Bot 4", "module": "declaration_state", "function": "_validate_action", "line": 112}
{"timestamp": "2025-07-02T06:38:26.259227Z", "level": "WARNING", "logger": "game.state.declaration", "message": "Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 1}, timestamp=datetime.datetime(2025, 7, 1, 23, 38, 26, 259018), sequence_id=0, is_bot=False)", "module": "base_state", "function": "handle_action", "line": 71}
✅ PROCESS_EVENT_DEBUG: State process_event completed: False
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: False
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 2.684s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 2.683600902557373, 'reason': 'Declaration action rejected', 'data': {}}
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 2.683600902557373, 'reason': 'Declaration action rejected', 'data': {}}
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-02T06:38:26.259737Z", "level": "WARNING", "logger": "game.state.declaration", "message": "Wrong player turn: Bot 3, expected: Bot 4", "module": "declaration_state", "function": "_validate_action", "line": 112}
{"timestamp": "2025-07-02T06:38:26.260010Z", "level": "WARNING", "logger": "game.state.declaration", "message": "Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 1}, timestamp=datetime.datetime(2025, 7, 1, 23, 38, 26, 259671), sequence_id=0, is_bot=False)", "module": "base_state", "function": "handle_action", "line": 71}
✅ PROCESS_EVENT_DEBUG: State process_event completed: False
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: False
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 1.723s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 1.7233412265777588, 'reason': 'Declaration action rejected', 'data': {}}
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 1.7233412265777588, 'reason': 'Declaration action rejected', 'data': {}}
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-02T06:38:26.260488Z", "level": "WARNING", "logger": "game.state.declaration", "message": "Wrong player turn: Bot 3, expected: Bot 4", "module": "declaration_state", "function": "_validate_action", "line": 112}
{"timestamp": "2025-07-02T06:38:26.260610Z", "level": "WARNING", "logger": "game.state.declaration", "message": "Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 1}, timestamp=datetime.datetime(2025, 7, 1, 23, 38, 26, 260425), sequence_id=0, is_bot=False)", "module": "base_state", "function": "handle_action", "line": 71}
✅ PROCESS_EVENT_DEBUG: State process_event completed: False
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: False
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 1.051s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 1.050739049911499, 'reason': 'Declaration action rejected', 'data': {}}
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 1.050739049911499, 'reason': 'Declaration action rejected', 'data': {}}
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10f162410>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-02T06:38:26.261309Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Player Bot 4 declared 1", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room 050EE9, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'allowed_actions': ['timeout', 'declare', 'player_disconnect', 'player_reconnect'], 'phase_data': {'declaration_order': ['Bot 3 - 1 pts', 'Bot 4 - -6 pts', 'Andy - -21 pts', 'Bot 2 - -16 pts'], 'current_declarer_index': 2, 'declarations': {'Bot 3': 1, 'Bot 4': 1}, 'declaration_total': 2, 'current_declarer': 'Andy'}, 'players': {'Andy': {'hand': ['SOLDIER_BLACK(1)', 'ELEPHANT_RED(10)', 'HORSE_RED(6)', 'CHARIOT_BLACK(7)', 'ELEPHANT_RED(10)', 'CANNON_BLACK(3)', 'CANNON_RED(4)', 'CANNON_RED(4)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 3': {'hand': ['SOLDIER_RED(2)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'ADVISOR_BLACK(11)', 'ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)'], 'hand_size': 8}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'ADVISOR_RED(12)', 'HORSE_BLACK(5)', 'CHARIOT_RED(8)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'hand_size': 8}}, 'round': 7, 'reason': 'Player Bot 4 declared 1', 'sequence': 19, 'timestamp': 1751438306.261534, 'room_id': '050EE9'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1263 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 050EE9.
{"timestamp": "2025-07-02T06:38:26.261917Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 050EE9 - Player Bot 4 declared 1", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 declared 1
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 050EE9 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 3 - 1 pts', 'Bot 4 - -6 pts', 'Andy - -21 pts', 'Bot 2 - -16 pts'], 'current_declarer_index': 2, 'declarations': {'Bot 3': 1, 'Bot 4': 1}, 'declaration_total': 2, 'current_declarer': 'Andy'}, 'current_declarer': 'Andy', 'reason': 'Player Bot 4 declared 1'}
✅ BOT_MANAGER_DEBUG: Found handler for room 050EE9, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 050EE9 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 0 bot actions (lock-free)
🤖 DECLARATION_DEBUG: Triggering bot manager after Bot 4 declared
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
{"timestamp": "2025-07-02T06:38:26.262541Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Bot 4 declared 1", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.004s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.004377841949462891, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 4', 'value': 1, 'total': 2}}
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.004377841949462891, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 4', 'value': 1, 'total': 2}}
DEBUG_WS_QUEUE: Room 050EE9 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 050EE9.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 050EE9.
