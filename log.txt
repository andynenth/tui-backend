🔒 [Room 59B0F0] Starting game: op_id=59B0F0_1
🤖 Bot Bot 2 deciding: ACCEPT redeal
✅ Bot Bot 2 ACCEPTED redeal
✅ [Room 59B0F0] Game and StateMachine started successfully: op_id=59B0F0_1
✅ [Room 59B0F0] Bot manager registered for 3 bots
✅ Game started in room 59B0F0
INFO:     ('127.0.0.1', 54246) - "WebSocket /ws/59B0F0" [accepted]
INFO:     connection open
INFO:     connection closed
✅ Redeal accept queued: Andy
✅ Redeal accept queued: Andy
🤖 Bot Bot 2 deciding: ACCEPT redeal
✅ Bot Bot 2 ACCEPTED redeal
👤 Round starter is human or None: None
✅ Declaration queued: Andy -> 3
✅ Bot Bot 2 declared 2
✅ Bot Bot 3 declared 1
✅ Bot Bot 4 declared 1
✅ Bot Bot 3 declared 1
✅ Bot Bot 4 declared 1
✅ Bot Bot 4 declared 1
Action declare not allowed in turn
Action declare not allowed in turn
Action declare not allowed in turn
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [5, 0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 8
🎯 WS_PLAY_DEBUG: Added piece at index 5: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Added piece at index 0: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT chooses to play PAIR (2 pts): SOLDIER, SOLDIER
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play PAIR (4 pts): SOLDIER, SOLDIER
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'CANNON']
    🧠 Hand left: ['ADVISOR', 'CANNON', 'ELEPHANT', 'GENERAL', 'SOLDIER', 'CANNON', 'CHARIOT', 'CHARIOT']
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play PAIR (4 pts): SOLDIER, SOLDIER
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'CANNON']
    🧠 Hand left: ['ADVISOR', 'CANNON', 'ELEPHANT', 'GENERAL', 'SOLDIER', 'CANNON', 'CHARIOT', 'CHARIOT']
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'CANNON']
    🧠 Hand left: ['ADVISOR', 'CANNON', 'ELEPHANT', 'GENERAL', 'SOLDIER', 'CANNON', 'CHARIOT', 'CHARIOT']
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
Not Bot 3's turn - expected Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2), SOLDIER_RED(2)]}, timestamp=datetime.datetime(2025, 7, 9, 20, 59, 40, 660329), sequence_id=15, is_bot=True)
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2), CANNON_BLACK(3)]}, timestamp=datetime.datetime(2025, 7, 9, 20, 59, 42, 19850), sequence_id=16, is_bot=True)
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2), CANNON_BLACK(3)]}, timestamp=datetime.datetime(2025, 7, 9, 20, 59, 43, 326475), sequence_id=17, is_bot=True)
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 6
🎯 WS_PLAY_DEBUG: Added piece at index 1: ELEPHANT_RED(10)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ELEPHANT_RED(10)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_RED(12)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 0, 6, 384230), sequence_id=22, is_bot=True)
Player Bot 4 doesn't have piece: GENERAL_RED(14)
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 0, 7, 790593), sequence_id=23, is_bot=True)
Player Bot 4 doesn't have piece: GENERAL_RED(14)
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 0, 9, 142212), sequence_id=24, is_bot=True)
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [2]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 5
🎯 WS_PLAY_DEBUG: Added piece at index 2: ELEPHANT_BLACK(9)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ELEPHANT_BLACK(9)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT chooses to play SINGLE (7 pts): CHARIOT
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_BLACK(11)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 0, 31, 822156), sequence_id=29, is_bot=True)
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 4
🎯 WS_PLAY_DEBUG: Added piece at index 0: CHARIOT_RED(8)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['CHARIOT_RED(8)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT chooses to play SINGLE (6 pts): HORSE
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (5 pts): HORSE
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
Player Bot 3 doesn't have piece: ELEPHANT_RED(10)
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ELEPHANT_RED(10)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 0, 53, 73708), sequence_id=34, is_bot=True)
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 1, 9, 188586), sequence_id=37, is_bot=True)
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 3
🎯 WS_PLAY_DEBUG: Added piece at index 0: HORSE_RED(6)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['HORSE_RED(6)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT chooses to play SINGLE (4 pts): CANNON
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (7 pts): CHARIOT
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 2
🎯 WS_PLAY_DEBUG: Added piece at index 0: HORSE_BLACK(5)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['HORSE_BLACK(5)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT chooses to play SINGLE (3 pts): CANNON
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (4 pts): CANNON
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 1, 33, 629047), sequence_id=44, is_bot=True)
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 1
🎯 WS_PLAY_DEBUG: Added piece at index 0: ADVISOR_RED(12)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ADVISOR_RED(12)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
Unhandled action in turn results phase: ActionType.PLAY_PIECES
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Andy': 3, 'Bot 2': 2, 'Bot 3': 1, 'Bot 4': 1}
📋 SCORING_FIX_DEBUG: Andy - declared: 3, actual: 3
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 3, Actual: 3
   📊 Base Score: 8, Multiplier: 3x, Final: 24
   💯 Total Score: 24
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 2, actual: 0
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 2, Actual: 0
   📊 Base Score: -2, Multiplier: 3x, Final: -6
   💯 Total Score: -6
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 1
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 1
   📊 Base Score: 6, Multiplier: 3x, Final: 18
   💯 Total Score: 18
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 4
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 4
   📊 Base Score: -3, Multiplier: 3x, Final: -9
   💯 Total Score: -9
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 3, 'actual': 3, 'base_score': 8, 'multiplier': 3, 'final_score': 24, 'total_score': 24}, 'Bot 2': {'declared': 2, 'actual': 0, 'base_score': -2, 'multiplier': 3, 'final_score': -6, 'total_score': -6}, 'Bot 3': {'declared': 1, 'actual': 1, 'base_score': 6, 'multiplier': 3, 'final_score': 18, 'total_score': 18}, 'Bot 4': {'declared': 1, 'actual': 4, 'base_score': -3, 'multiplier': 3, 'final_score': -9, 'total_score': -9}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': 24, 'Bot 2': -6, 'Bot 3': 18, 'Bot 4': -9}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 3, 'captured_piles': 3}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 2, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 1, 'captured_piles': 1}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 1, 'captured_piles': 4}]
⏰ SCORING_DELAY_DEBUG: Starting 7-second display delay...
⏰ SCORING_DELAY_DEBUG: 7-second delay complete - setting display_delay_complete = True
🤖 Bot Bot 2 deciding: ACCEPT redeal
✅ Bot Bot 2 ACCEPTED redeal
✅ Redeal accept queued: Andy
✅ Redeal accept queued: Andy
🤖 Bot Bot 2 deciding: ACCEPT redeal
✅ Bot Bot 2 ACCEPTED redeal
👤 Round starter is human or None: None
✅ Declaration queued: Andy -> 3
✅ Bot Bot 2 declared 2
✅ Bot Bot 3 declared 1
✅ Bot Bot 4 declared 1
✅ Bot Bot 3 declared 1
✅ Bot Bot 4 declared 1
✅ Bot Bot 4 declared 1
Action declare not allowed in turn
Action declare not allowed in turn
Action declare not allowed in turn
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0, 5, 2, 3]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 8
🎯 WS_PLAY_DEBUG: Added piece at index 0: CHARIOT_BLACK(7)
🎯 WS_PLAY_DEBUG: Added piece at index 5: CANNON_BLACK(3)
🎯 WS_PLAY_DEBUG: Added piece at index 2: HORSE_BLACK(5)
🎯 WS_PLAY_DEBUG: Added piece at index 3: CANNON_BLACK(3)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['CHARIOT_BLACK(7)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)', 'CANNON_BLACK(3)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, CHARIOT, ELEPHANT
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'CHARIOT', 'ELEPHANT']
    🧠 Hand left: ['GENERAL', 'CHARIOT', 'ELEPHANT', 'ADVISOR', 'ADVISOR', 'SOLDIER', 'SOLDIER', 'ELEPHANT']
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'SOLDIER', 'CANNON']
    🧠 Hand left: ['CHARIOT', 'ADVISOR', 'SOLDIER', 'SOLDIER', 'CANNON', 'CHARIOT', 'ELEPHANT', 'SOLDIER']
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'SOLDIER', 'CANNON']
    🧠 Hand left: ['SOLDIER', 'HORSE', 'HORSE', 'HORSE', 'SOLDIER', 'GENERAL', 'SOLDIER', 'CANNON']
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'SOLDIER', 'CANNON']
    🧠 Hand left: ['CHARIOT', 'ADVISOR', 'SOLDIER', 'SOLDIER', 'CANNON', 'CHARIOT', 'ELEPHANT', 'SOLDIER']
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'SOLDIER', 'CANNON']
    🧠 Hand left: ['SOLDIER', 'HORSE', 'HORSE', 'HORSE', 'SOLDIER', 'GENERAL', 'SOLDIER', 'CANNON']
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'SOLDIER', 'CANNON']
    🧠 Hand left: ['SOLDIER', 'HORSE', 'HORSE', 'HORSE', 'SOLDIER', 'GENERAL', 'SOLDIER', 'CANNON']
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
Not Bot 3's turn - expected Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2), CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 2, 50, 580831), sequence_id=65, is_bot=True)
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2), CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 2, 51, 617751), sequence_id=66, is_bot=True)
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2), CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 2, 52, 511423), sequence_id=67, is_bot=True)
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 4
🎯 WS_PLAY_DEBUG: Added piece at index 0: ELEPHANT_RED(10)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ELEPHANT_RED(10)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play PAIR (12 pts): HORSE, HORSE
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_BLACK(11)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 3, 16, 371034), sequence_id=72, is_bot=True)
Player Bot 4 doesn't have piece: GENERAL_RED(14)
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 3, 17, 435354), sequence_id=73, is_bot=True)
Player Bot 4 doesn't have piece: GENERAL_RED(14)
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 3, 18, 746659), sequence_id=74, is_bot=True)
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0, 1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 3
🎯 WS_PLAY_DEBUG: Added piece at index 0: SOLDIER_BLACK(1)
🎯 WS_PLAY_DEBUG: Added piece at index 1: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT has no valid play. Discards lowest pieces: ELEPHANT, ADVISOR
    🔍 Final play: ['ELEPHANT', 'ADVISOR']
    🧠 Hand left: ['ADVISOR', 'ADVISOR', 'ELEPHANT']
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: CHARIOT, CHARIOT
    🔍 Final play: ['CHARIOT', 'CHARIOT']
    🧠 Hand left: ['CHARIOT', 'CHARIOT', 'ELEPHANT']
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT has no valid play. Discards lowest pieces: CHARIOT, CHARIOT
    🔍 Final play: ['CHARIOT', 'CHARIOT']
    🧠 Hand left: ['CHARIOT', 'CHARIOT', 'ELEPHANT']
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (5 pts): HORSE
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_BLACK(7), CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 9, 21, 3, 40, 604749), sequence_id=79, is_bot=True)
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 1
🎯 WS_PLAY_DEBUG: Added piece at index 0: ADVISOR_RED(12)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ADVISOR_RED(12)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
Unhandled action in turn results phase: ActionType.PLAY_PIECES
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Andy': 3, 'Bot 2': 2, 'Bot 3': 1, 'Bot 4': 1}
📋 SCORING_FIX_DEBUG: Andy - declared: 3, actual: 5
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 3, Actual: 5
   📊 Base Score: -2, Multiplier: 3x, Final: -6
   💯 Total Score: 18
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 2, actual: 0
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 2, Actual: 0
   📊 Base Score: -2, Multiplier: 3x, Final: -6
   💯 Total Score: -12
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 3x, Final: -3
   💯 Total Score: 15
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 3
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 3
   📊 Base Score: -2, Multiplier: 3x, Final: -6
   💯 Total Score: -15
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 3, 'actual': 5, 'base_score': -2, 'multiplier': 3, 'final_score': -6, 'total_score': 18}, 'Bot 2': {'declared': 2, 'actual': 0, 'base_score': -2, 'multiplier': 3, 'final_score': -6, 'total_score': -12}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 3, 'final_score': -3, 'total_score': 15}, 'Bot 4': {'declared': 1, 'actual': 3, 'base_score': -2, 'multiplier': 3, 'final_score': -6, 'total_score': -15}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': 18, 'Bot 2': -12, 'Bot 3': 15, 'Bot 4': -15}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 3, 'captured_piles': 5}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 2, 'captured_piles': 0}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 1, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 1, 'captured_piles': 3}]
⏰ SCORING_DELAY_DEBUG: Starting 7-second display delay...
⏰ SCORING_DELAY_DEBUG: 7-second delay complete - setting display_delay_complete = True
🤖 Bot Bot 2 deciding: ACCEPT redeal
✅ Bot Bot 2 ACCEPTED redeal
✅ Bot Bot 2 declared 1
✅ Bot Bot 3 declared 2
✅ Bot Bot 4 declared 4
✅ Bot Bot 3 declared 2
✅ Bot Bot 4 declared 4
✅ Bot Bot 4 declared 4
Wrong player turn: Bot 3, expected: Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 2}, timestamp=datetime.datetime(2025, 7, 9, 21, 5, 26, 111811), sequence_id=89, is_bot=True)