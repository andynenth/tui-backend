🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 3
🎯 WS_PLAY_DEBUG: Added piece at index 0: GENERAL_BLACK(13)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['GENERAL_BLACK(13)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['GENERAL_BLACK(13)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 13
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 1, Turn 6 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: ['Bot 4', 'Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.3s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [GENERAL_BLACK(13)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 6 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 4', 'Andy', 'Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.4s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 6 - Bot 3 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 6 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 6 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 2, 'Bot 2': 2, 'Bot 3': 2, 'Bot 4': 2}
🔧 CONSISTENCY_CHECK: Min: 2, Max: 2
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 2
DEBUG_WS: Message for event 'turn_complete' added to queue for room 9B9CC6.
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn after delay
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948024042}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948025495}
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Andy
🎯 NEW_TURN_DEBUG: Round 1, Turn 7 starting with starter Andy
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 7
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Andy - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Andy - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': None, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Not Bot 3's turn - expected Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 13, 40, 711045), sequence_id=50, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'play' from client in room 9B9CC6 with data: {'piece_indices': [0, 1], 'player_name': 'Andy', 'play_value': 24}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0, 1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 2
🎯 WS_PLAY_DEBUG: Added piece at index 0: ADVISOR_RED(12)
🎯 WS_PLAY_DEBUG: Added piece at index 1: ADVISOR_RED(12)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ADVISOR_RED(12)', 'ADVISOR_RED(12)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Andy playing 2 pieces: ['ADVISOR_RED(12)', 'ADVISOR_RED(12)']
🎯 TURN_STATE_DEBUG: Calculated play type: PAIR
🎯 TURN_STATE_DEBUG: Calculated play value: 24
🎯 TURN_STATE_DEBUG: Setting required piece count to 2
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 1, Turn 7 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: ['Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 1.1s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER
    🔍 Final play: ['SOLDIER', 'SOLDIER']
    🧠 Hand left: ['SOLDIER', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER
    🔍 Final play: ['SOLDIER', 'SOLDIER']
    🧠 Hand left: ['SOLDIER', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.3s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (2 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [ADVISOR_RED(12), ADVISOR_RED(12)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: INVALID
🎯 TURN_STATE_DEBUG: Calculated play value: 3
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 7 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Andy', 'Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.3s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER
    🔍 Final play: ['SOLDIER', 'SOLDIER']
    🧠 Hand left: ['SOLDIER', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.3s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (2 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [SOLDIER_BLACK(1), SOLDIER_RED(2)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: INVALID
🎯 TURN_STATE_DEBUG: Calculated play value: 3
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 7 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Andy', 'Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.0s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (2 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_BLACK(1), SOLDIER_RED(2)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Calculated play type: PAIR
🎯 TURN_STATE_DEBUG: Calculated play value: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 7 - Bot 4 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 7 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 7 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 2 = 3
🎯 TURN_COMPLETE_DEBUG: Awarded 2 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = True
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 0, 'Bot 2': 0, 'Bot 3': 0, 'Bot 4': 0}
🔧 CONSISTENCY_CHECK: Min: 0, Max: 0
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 0
DEBUG_WS: Message for event 'turn_complete' added to queue for room 9B9CC6.
🏁 TURN_COMPLETION_DEBUG: Round complete - will transition to scoring
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: None, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: None
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1)], 'piece_count': 2, 'required_count': 2, 'next_player': None, 'turn_complete': True}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
Unhandled action in turn results phase: ActionType.PLAY_PIECES
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Unhandled action in turn results phase: ActionType.PLAY_PIECES
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Unhandled action in turn results phase: ActionType.PLAY_PIECES
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Bot 2': 2, 'Bot 3': 1, 'Bot 4': 1, 'Andy': 3}
📋 SCORING_FIX_DEBUG: Andy - declared: 3, actual: 3
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 3, Actual: 3
   📊 Base Score: 8, Multiplier: 1x, Final: 8
   💯 Total Score: 8
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 2, actual: 1
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 2, Actual: 1
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -1
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -1
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 4
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 4
   📊 Base Score: -3, Multiplier: 1x, Final: -3
   💯 Total Score: -3
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 3, 'actual': 3, 'base_score': 8, 'multiplier': 1, 'final_score': 8, 'total_score': 8}, 'Bot 2': {'declared': 2, 'actual': 1, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -1}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -1}, 'Bot 4': {'declared': 1, 'actual': 4, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -3}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': 8, 'Bot 2': -1, 'Bot 3': -1, 'Bot 4': -3}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 3, 'captured_piles': 3}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 2, 'captured_piles': 1}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 1, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 1, 'captured_piles': 4}]
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
⏰ SCORING_DELAY_DEBUG: Starting 7-second display delay...
DEBUG_WS_RECEIVE: Received event 'start_next_round' from client in room 9B9CC6 with data: {}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948054043}
⏰ SCORING_DELAY_DEBUG: 7-second delay complete - setting display_delay_complete = True
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: GENERAL_BLACK(13)
  → Bot 3 gets strong piece: ELEPHANT_RED(10)
  → Bot 4 gets strong piece: ADVISOR_BLACK(11)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'CHARIOT_BLACK(7)', 'ELEPHANT_RED(10)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'HORSE_BLACK(5)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 2: ['SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'ADVISOR_BLACK(11)', 'GENERAL_RED(14)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: True
  Bot 3: ['SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'CANNON_RED(4)', 'HORSE_RED(6)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CANNON_RED(4)', 'CANNON_BLACK(3)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 4: ['CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_BLACK(1)', 'CHARIOT_RED(8)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: set()
   - Redeal decisions: {}
   - Weak players awaiting: set()
   - All decisions received: True
✅ PREP_STATE_DEBUG: No weak players, transitioning to DECLARATION
📢 DECL_STATE_DEBUG: Using round_starter: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔄 PHASE_TRACKING_FIX: New phase detected turn -> declaration
👤 ENTERPRISE_BOT_DEBUG: Current declarer Andy is human - waiting
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Andy
🔍 BOT_ROUND_DEBUG: Game current_player: Andy
👤 Round starter is human or None: None
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: ''
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer '' index: -1
🔍 DECL_PHASE_DEBUG: Starting loop from index 0 to 4
🔍 DECL_PHASE_DEBUG: Checking player 0 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948055496}
DEBUG_WS_RECEIVE: Received event 'declare' from client in room 9B9CC6 with data: {'value': 3, 'player_name': 'Andy'}
✅ Declaration queued: Andy -> 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: declaration
✅ PHASE_TRACKING_FIX: Marked declaration phase as triggered
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Andy'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Andy' index: 0
🔍 DECL_PHASE_DEBUG: Starting loop from index 1 to 4
🔍 DECL_PHASE_DEBUG: Checking player 1 (Bot 2), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 2 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3}
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will declare in 1.5s...
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 2 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 0.7s...
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 1.5s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948084044}
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: declaration
✅ PHASE_TRACKING_FIX: Marked declaration phase as triggered
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 2'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 2' index: 1
🔍 DECL_PHASE_DEBUG: Starting loop from index 2 to 4
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3, 'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 0.7s...
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 1
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948085497}
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3, 'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 1.4s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: declaration
✅ PHASE_TRACKING_FIX: Marked declaration phase as triggered
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 3'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 3' index: 2
🔍 DECL_PHASE_DEBUG: Starting loop from index 3 to 4
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 3, 'Bot 2': 1, 'Bot 3': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 0.6s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🎯 NEW_TURN_DEBUG: Round 2, Turn 1 starting with starter Andy
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔄 PHASE_TRACKING_FIX: New phase detected declaration -> turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Andy - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 DUPLICATE_DEBUG: Received turn_started event for Andy from unknown
🎯 TURN_START_DEBUG: Turn starter is Andy, triggering sequential handler
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
Action declare not allowed in turn
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action declare from Bot 3 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 3 action rejected - preventing downstream processing
🚫 BOT_VALIDATION_FIX: Bot Bot 3 hand size after rejection: 8
Action declare not allowed in turn
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action declare from Bot 4 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 4 action rejected - preventing downstream processing
🚫 BOT_VALIDATION_FIX: Bot Bot 4 hand size after rejection: 8
Action declare not allowed in turn
🚫 BOT_HANDLER_DEBUG: Handling action rejection
🚫 BOT_VALIDATION_FIX: Action declare from Bot 4 was REJECTED: Invalid action for current game state
🚫 BOT_VALIDATION_FIX: Bot Bot 4 action rejected - preventing downstream processing
🚫 BOT_VALIDATION_FIX: Bot Bot 4 hand size after rejection: 8
DEBUG_WS_RECEIVE: Received event 'play' from client in room 9B9CC6 with data: {'piece_indices': [3], 'player_name': 'Andy', 'play_value': 10}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [3]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 8
🎯 WS_PLAY_DEBUG: Added piece at index 3: ELEPHANT_RED(10)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ELEPHANT_RED(10)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['ELEPHANT_RED(10)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 10
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 2, Turn 1 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: ['Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 0.7s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_RED(14)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.1s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_RED(10)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 0.8s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [ELEPHANT_RED(10)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['GENERAL_RED(14)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 14
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 1 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Andy', 'Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_RED(10)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.2s...
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948114045}
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [GENERAL_RED(14)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['ELEPHANT_RED(10)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 10
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 1 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Andy', 'Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.3s...
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948115498}
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [ELEPHANT_RED(10)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ADVISOR_RED(12)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 12
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 1 - Bot 4 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 1 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 1 Winner determined: Bot 2
🎯 CAPTURED_PILES_DEBUG: Bot 2 captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 2
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 7, 'Bot 2': 7, 'Bot 3': 7, 'Bot 4': 7}
🔧 CONSISTENCY_CHECK: Min: 7, Max: 7
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 7
DEBUG_WS: Message for event 'turn_complete' added to queue for room 9B9CC6.
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn after delay
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 2
🎯 NEW_TURN_DEBUG: Round 2, Turn 2 starting with starter Bot 2
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 2 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 1.0s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.4s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 0.5s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play PAIR (16 pts): CHARIOT, CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 2 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 1.1s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.2s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.2s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play PAIR (16 pts): CHARIOT, CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ADVISOR_RED(12)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 3's turn - expected Bot 2
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ELEPHANT_RED(10)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 15, 13, 232011), sequence_id=69, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Not Bot 4's turn - expected Bot 2
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_RED(12)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 15, 14, 596965), sequence_id=70, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 4's turn - expected Bot 2
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_RED(12)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 15, 16, 103662), sequence_id=71, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['ADVISOR_RED(12)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 12
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 2 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.7s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.5s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_BLACK(11)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ADVISOR_RED(12)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 9
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 2 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.2s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_BLACK(11)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [ELEPHANT_BLACK(9)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Must play 1 pieces, got 2
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8), CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 15, 26, 676906), sequence_id=74, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 2's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_RED(12)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 15, 27, 980510), sequence_id=75, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ELEPHANT_BLACK(9)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 15, 29, 352268), sequence_id=76, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Must play 1 pieces, got 2
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8), CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 15, 30, 750382), sequence_id=77, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ELEPHANT_BLACK(9)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 15, 32, 135814), sequence_id=78, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 11
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 2 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: ['Bot 2', 'Bot 3', 'Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_BLACK(11)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 15, 35, 164497), sequence_id=80, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948144045}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948145499}
DEBUG_WS_RECEIVE: Received event 'play' from client in room 9B9CC6 with data: {'piece_indices': [1], 'player_name': 'Andy', 'play_value': 9}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 7
🎯 WS_PLAY_DEBUG: Added piece at index 1: ELEPHANT_BLACK(9)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ELEPHANT_BLACK(9)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 9
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 2 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 2 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 2 Winner determined: Bot 2
🎯 CAPTURED_PILES_DEBUG: Bot 2 captured_piles += 1 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 2
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 6, 'Bot 2': 6, 'Bot 3': 6, 'Bot 4': 6}
🔧 CONSISTENCY_CHECK: Min: 6, Max: 6
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 6
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 6
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 6
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 6
DEBUG_WS: Message for event 'turn_complete' added to queue for room 9B9CC6.
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn after delay
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 2
🎯 NEW_TURN_DEBUG: Round 2, Turn 3 starting with starter Bot 2
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 2 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_BLACK(11)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.4s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play PAIR (8 pts): CANNON, CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CANNON_RED(4)', 'CANNON_RED(4)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.3s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play PAIR (16 pts): CHARIOT, CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 2 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 1.2s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_BLACK(11)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play PAIR (8 pts): CANNON, CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CANNON_RED(4)', 'CANNON_RED(4)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 0.6s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play PAIR (16 pts): CHARIOT, CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [ELEPHANT_BLACK(9)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 11
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 3 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.0s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (6 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_RED(6)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
Must play 1 pieces, got 2
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_RED(4), CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 0, 926935), sequence_id=83, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Not Bot 4's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8), CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 2, 436120), sequence_id=84, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_BLACK(11)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 3, 817317), sequence_id=85, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
Must play 1 pieces, got 2
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_RED(4), CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 4, 919462), sequence_id=86, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Not Bot 4's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8), CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 5, 725354), sequence_id=87, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['HORSE_RED(6)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 6
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 3 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.4s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [HORSE_RED(6)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['CHARIOT_RED(8)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 8
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 3 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: ['Bot 2', 'Bot 3', 'Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [CHARIOT_RED(8)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 10, 726008), sequence_id=90, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948174045}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948175499}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948204046}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948205499}
DEBUG_WS_RECEIVE: Received event 'play' from client in room 9B9CC6 with data: {'piece_indices': [5], 'player_name': 'Andy', 'play_value': 5}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [5]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 6
🎯 WS_PLAY_DEBUG: Added piece at index 5: HORSE_BLACK(5)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['HORSE_BLACK(5)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['HORSE_BLACK(5)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 5
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 3 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 3 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 3 Winner determined: Bot 2
🎯 CAPTURED_PILES_DEBUG: Bot 2 captured_piles += 1 = 3
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 2
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 5, 'Bot 2': 5, 'Bot 3': 5, 'Bot 4': 5}
🔧 CONSISTENCY_CHECK: Min: 5, Max: 5
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 5
DEBUG_WS: Message for event 'turn_complete' added to queue for room 9B9CC6.
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn after delay
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 2
🎯 NEW_TURN_DEBUG: Round 2, Turn 4 starting with starter Bot 2
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 2 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 1.2s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (5 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_BLACK(5)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.8s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play PAIR (8 pts): CANNON, CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CANNON_RED(4)', 'CANNON_RED(4)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 0.7s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 2 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 1.4s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (5 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_BLACK(5)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play PAIR (8 pts): CANNON, CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CANNON_RED(4)', 'CANNON_RED(4)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.1s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [HORSE_BLACK(5)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['HORSE_BLACK(5)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 5
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 4 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (4 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_RED(4)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.4s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [HORSE_BLACK(5)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
Must play 1 pieces, got 2
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_RED(4), CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 56, 166923), sequence_id=93, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Not Bot 4's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 57, 48984), sequence_id=94, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [HORSE_BLACK(5)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 58, 611438), sequence_id=95, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
Must play 1 pieces, got 2
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_RED(4), CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 16, 59, 725552), sequence_id=96, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Not Bot 4's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 17, 0, 979793), sequence_id=97, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['CANNON_RED(4)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 4
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 4 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.3s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [CANNON_RED(4)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['CHARIOT_RED(8)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 8
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 4 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: ['Bot 2', 'Bot 3', 'Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [CHARIOT_RED(8)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 17, 6, 210091), sequence_id=100, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948234046}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948235500}
DEBUG_WS_RECEIVE: Received event 'play' from client in room 9B9CC6 with data: {'piece_indices': [0], 'player_name': 'Andy', 'play_value': 2}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 5
🎯 WS_PLAY_DEBUG: Added piece at index 0: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_RED(2)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 4 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 4 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 4 Winner determined: Bot 4
🎯 CAPTURED_PILES_DEBUG: Bot 4 captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 4
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 4, 'Bot 2': 4, 'Bot 3': 4, 'Bot 4': 4}
🔧 CONSISTENCY_CHECK: Min: 4, Max: 4
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 4
DEBUG_WS: Message for event 'turn_complete' added to queue for room 9B9CC6.
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn after delay
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 4
🎯 NEW_TURN_DEBUG: Round 2, Turn 5 starting with starter Bot 4
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 5
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 4 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.0s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (6 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_RED(6)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 4 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 0.8s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (6 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_RED(6)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 4', 'turn_complete': False}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['HORSE_RED(6)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 6
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 5 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: ['Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [HORSE_RED(6)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [HORSE_RED(6)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 17, 36, 567702), sequence_id=103, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'play' from client in room 9B9CC6 with data: {'piece_indices': [2], 'player_name': 'Andy', 'play_value': 1}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [2]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 4
🎯 WS_PLAY_DEBUG: Added piece at index 2: SOLDIER_BLACK(1)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_BLACK(1)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 2, Turn 5 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: ['Bot 4', 'Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 0.6s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (3 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_BLACK(3)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.6s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (4 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_RED(4)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['CANNON_BLACK(3)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 3
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 5 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 4', 'Andy', 'Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.2s...
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948264048}
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (4 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_RED(4)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [CANNON_BLACK(3)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['CANNON_RED(4)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 4
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 5 - Bot 3 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 5 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 5 Winner determined: Bot 4
🎯 CAPTURED_PILES_DEBUG: Bot 4 captured_piles += 1 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 4
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 3, 'Bot 2': 3, 'Bot 3': 3, 'Bot 4': 3}
🔧 CONSISTENCY_CHECK: Min: 3, Max: 3
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 3
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 3
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 3
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 3
DEBUG_WS: Message for event 'turn_complete' added to queue for room 9B9CC6.
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn after delay
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948265503}
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 4
🎯 NEW_TURN_DEBUG: Round 2, Turn 6 starting with starter Bot 4
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 6
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 4 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.2s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Bot 4 - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 0.9s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [CANNON_RED(4)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 17, 45, 57768), sequence_id=107, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 2
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 6 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: ['Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 17, 54, 572253), sequence_id=109, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'play' from client in room 9B9CC6 with data: {'piece_indices': [1], 'player_name': 'Andy', 'play_value': 13}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 3
🎯 WS_PLAY_DEBUG: Added piece at index 1: GENERAL_BLACK(13)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['GENERAL_BLACK(13)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['GENERAL_BLACK(13)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 13
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 2, Turn 6 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: ['Bot 4', 'Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 1.1s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.8s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (3 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_BLACK(3)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [GENERAL_BLACK(13)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 6 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 4', 'Andy', 'Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.7s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (3 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_BLACK(3)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['CANNON_BLACK(3)']
🎯 TURN_STATE_DEBUG: Calculated play type: SINGLE
🎯 TURN_STATE_DEBUG: Calculated play value: 3
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 6 - Bot 3 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 6 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 6 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 2, 'Bot 2': 2, 'Bot 3': 2, 'Bot 4': 2}
🔧 CONSISTENCY_CHECK: Min: 2, Max: 2
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 2
DEBUG_WS: Message for event 'turn_complete' added to queue for room 9B9CC6.
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn after delay
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Andy
🎯 NEW_TURN_DEBUG: Round 2, Turn 7 starting with starter Andy
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 7
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Andy - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Andy, turn_plays: []
🚀 ENTERPRISE_BOT_DEBUG: Turn starter Andy - using empty string to trigger from beginning
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: ''
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player '' index: -1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 0 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 0 (Andy)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Andy, is_bot: False
🎯 TURN_PLAY_PHASE_DEBUG: Player Andy is human, stopping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [CANNON_BLACK(3)], 'piece_count': 1, 'required_count': None, 'next_player': 'Andy', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Not Bot 3's turn - expected Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_BLACK(3)]}, timestamp=datetime.datetime(2025, 7, 7, 21, 18, 2, 232850), sequence_id=113, is_bot=True)
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
DEBUG_WS_RECEIVE: Received event 'play' from client in room 9B9CC6 with data: {'piece_indices': [0, 1], 'player_name': 'Andy', 'play_value': 14}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0, 1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 2
🎯 WS_PLAY_DEBUG: Added piece at index 0: CHARIOT_BLACK(7)
🎯 WS_PLAY_DEBUG: Added piece at index 1: CHARIOT_BLACK(7)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play accepted: Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Andy playing 2 pieces: ['CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)']
🎯 TURN_STATE_DEBUG: Calculated play type: PAIR
🎯 TURN_STATE_DEBUG: Calculated play value: 14
🎯 TURN_STATE_DEBUG: Setting required piece count to 2
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 2, Turn 7 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 2, turn_plays: ['Andy']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Andy
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Andy'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Andy' index: 0
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 1 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 1 (Bot 2)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 2, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will play in 1.0s...
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751948294054}
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 2 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER
    🔍 Final play: ['SOLDIER', 'SOLDIER']
    🧠 Hand left: ['SOLDIER', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 1.2s...
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 9B9CC6 with data: {'timestamp': 1751948295509}
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER
    🔍 Final play: ['SOLDIER', 'SOLDIER']
    🧠 Hand left: ['SOLDIER', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 0.8s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (2 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [CHARIOT_BLACK(7), CHARIOT_BLACK(7)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 2', 'turn_complete': False}
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: INVALID
🎯 TURN_STATE_DEBUG: Calculated play value: 3
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 7 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 3, turn_plays: ['Andy', 'Bot 2']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 2
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 2'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 2' index: 1
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 2 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 2 (Bot 3)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 3, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will play in 0.5s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 3 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER
    🔍 Final play: ['SOLDIER', 'SOLDIER']
    🧠 Hand left: ['SOLDIER', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.0s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (2 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [SOLDIER_BLACK(1), SOLDIER_RED(2)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 3', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 2 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Calculated play type: INVALID
🎯 TURN_STATE_DEBUG: Calculated play value: 3
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 7 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Andy', 'Bot 2', 'Bot 3']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 3
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 3'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 3' index: 2
🎯 TURN_PLAY_PHASE_DEBUG: Starting loop from index 3 to 4
🎯 TURN_PLAY_PHASE_DEBUG: Checking player 3 (Bot 4)
🎯 TURN_PLAY_PHASE_DEBUG: Found player Bot 4, is_bot: True
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will play in 1.2s...
🤖 TURN_PLAY_PHASE_DEBUG: Bot Bot 4 will now play!
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (2 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_BLACK(1), SOLDIER_RED(2)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 4', 'turn_complete': False}
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Calculated play type: PAIR
🎯 TURN_STATE_DEBUG: Calculated play value: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 7 - Bot 4 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 7 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 7 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 2 = 3
🎯 TURN_COMPLETE_DEBUG: Awarded 2 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PHASE_TRACKING_FIX: Same phase update: turn
🚀 ENTERPRISE_BOT_DEBUG: Turn phase update - current_player: Bot 4, turn_plays: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🚀 ENTERPRISE_BOT_DEBUG: Last player who played: Bot 4
🎯 TURN_PLAY_PHASE_DEBUG: _handle_turn_play_phase called with last_player: 'Bot 4'
🔍 TURN_ORDER_DEBUG: Got turn order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_PLAY_PHASE_DEBUG: Last player 'Bot 4' index: 3
🎯 TURN_PLAY_PHASE_DEBUG: Last player was end of turn order, no more players
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = True
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 0, 'Bot 2': 0, 'Bot 3': 0, 'Bot 4': 0}
🔧 CONSISTENCY_CHECK: Min: 0, Max: 0
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 0
DEBUG_WS: Message for event 'turn_complete' added to queue for room 9B9CC6.
🏁 TURN_COMPLETION_DEBUG: Round complete - will transition to scoring
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: None, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: None
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1)], 'piece_count': 2, 'required_count': 2, 'next_player': None, 'turn_complete': True}
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
Unhandled action in turn results phase: ActionType.PLAY_PIECES
✅ BOT_VALIDATION_FIX: Bot Bot 3 play accepted - state machine handling all updates
Unhandled action in turn results phase: ActionType.PLAY_PIECES
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
Unhandled action in turn results phase: ActionType.PLAY_PIECES
✅ BOT_VALIDATION_FIX: Bot Bot 4 play accepted - state machine handling all updates
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Andy': 3, 'Bot 2': 1, 'Bot 3': 1, 'Bot 4': 1}
📋 SCORING_FIX_DEBUG: Andy - declared: 3, actual: 3
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 3, Actual: 3
   📊 Base Score: 8, Multiplier: 1x, Final: 8
   💯 Total Score: 16
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 1, actual: 3
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 1, Actual: 3
   📊 Base Score: -2, Multiplier: 1x, Final: -2
   💯 Total Score: -3
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 0
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 0
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -2
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 2
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 2
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -4
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 3, 'actual': 3, 'base_score': 8, 'multiplier': 1, 'final_score': 8, 'total_score': 16}, 'Bot 2': {'declared': 1, 'actual': 3, 'base_score': -2, 'multiplier': 1, 'final_score': -2, 'total_score': -3}, 'Bot 3': {'declared': 1, 'actual': 0, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -2}, 'Bot 4': {'declared': 1, 'actual': 2, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -4}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': 16, 'Bot 2': -3, 'Bot 3': -2, 'Bot 4': -4}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 3, 'captured_piles': 3}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 1, 'captured_piles': 3}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 1, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 1, 'captured_piles': 2}]
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
⏰ SCORING_DELAY_DEBUG: Starting 7-second display delay...
DEBUG_WS_RECEIVE: Received event 'start_next_round' from client in room 9B9CC6 with data: {}
⏰ SCORING_DELAY_DEBUG: 7-second delay complete - setting display_delay_complete = True
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: GENERAL_BLACK(13)
  → Bot 3 gets strong piece: ADVISOR_RED(12)
  → Bot 4 gets strong piece: ELEPHANT_RED(10)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_BLACK(1)', 'HORSE_RED(6)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 2: ['CHARIOT_BLACK(7)', 'GENERAL_RED(14)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'HORSE_RED(6)', 'HORSE_BLACK(5)', 'ADVISOR_BLACK(11)', 'CHARIOT_RED(8)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: True
  Bot 3: ['HORSE_BLACK(5)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
  Bot 4: ['CANNON_RED(4)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: set()
   - Redeal decisions: {}
   - Weak players awaiting: set()
   - All decisions received: True
✅ PREP_STATE_DEBUG: No weak players, transitioning to DECLARATION
📢 DECL_STATE_DEBUG: Using round_starter: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔄 PHASE_TRACKING_FIX: New phase detected turn -> declaration
👤 ENTERPRISE_BOT_DEBUG: Current declarer Andy is human - waiting
DEBUG_WS: Message for event 'phase_change' added to queue for room 9B9CC6.
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Andy
🔍 BOT_ROUND_DEBUG: Game current_player: Andy
👤 Round starter is human or None: None
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: ''
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer '' index: -1
🔍 DECL_PHASE_DEBUG: Starting loop from index 0 to 4
🔍 DECL_PHASE_DEBUG: Checking player 0 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations