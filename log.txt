Frontend log

---

RecoveryService.ts:66 🔄 RecoveryService: Initialized
ServiceIntegration.ts:79 🔗 ServiceIntegration: Initialized
ServiceIntegration.ts:98 
ServiceIntegration.ts:99 🎯 =============================================
ServiceIntegration.ts:100 🚀 PHASE 1-4 ENTERPRISE ARCHITECTURE STARTING
ServiceIntegration.ts:101 🎯 =============================================
ServiceIntegration.ts:102 🔧 Initializing integrated service layer...
ServiceIntegration.ts:567 ✅ NetworkService integrated
ServiceIntegration.ts:575 ✅ GameService integrated
ServiceIntegration.ts:583 ✅ RecoveryService integrated
ServiceIntegration.ts:594 🩺 Health monitoring started (30000ms interval)
ServiceIntegration.ts:124 
ServiceIntegration.ts:125 ✅ =============================================
ServiceIntegration.ts:126 🎉 PHASE 1-4 ARCHITECTURE FULLY OPERATIONAL!
ServiceIntegration.ts:127 ✅ =============================================
ServiceIntegration.ts:128 🔗 NetworkService: Advanced WebSocket with auto-reconnection
ServiceIntegration.ts:129 🎮 GameService: React hooks with TypeScript state management
ServiceIntegration.ts:130 🛠️ RecoveryService: Automatic error recovery and health monitoring
ServiceIntegration.ts:131 🏢 Enterprise Features: Event sourcing, logging, metrics
ServiceIntegration.ts:132 ✅ Service integration layer initialized successfully
ServiceIntegration.ts:133 
App.jsx:121 🎮 Phase 1-4 Enterprise Architecture - Global services initialized
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room lobby
NetworkService.ts:214 📤 Queued message for lobby: get_rooms (1 queued)
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
LobbyPage.jsx:50 Received room_list_update: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1751154511199}
GameService.ts:1258 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room lobby
NetworkService.ts:214 📤 Queued message for lobby: get_rooms (1 queued)
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
LobbyPage.jsx:50 Received room_list_update: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1751154513003}
LobbyPage.jsx:60 Received room_created: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1751154513068}
LobbyPage.jsx:61 🟢 Navigation: room_id = 7E13B1 navigating to: /room/7E13B1
LobbyPage.jsx:65 ✅ Navigating to new room: 7E13B1
GameService.ts:1258 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room lobby
NetworkService.ts:214 📤 Queued message for lobby: get_rooms (1 queued)
RoomPage.jsx:181 🎯 SLOT_1: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_2: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_3: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_4: player= undefined isEmpty= true
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
NetworkService.ts:337 🔗 Connection opened to room 7E13B1
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room 7E13B1
RoomPage.jsx:181 🎯 SLOT_1: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_2: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_3: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_4: player= undefined isEmpty= true
RoomPage.jsx:49 🏠 ROOM_UPDATE: Full data received: {players: Array(4), host_name: 'Andy', room_id: '7E13B1', started: false}
RoomPage.jsx:50 🏠 ROOM_UPDATE: Players array: (4) [{…}, {…}, {…}, {…}]
RoomPage.jsx:51 🏠 ROOM_UPDATE: Players array type: object
RoomPage.jsx:52 🏠 ROOM_UPDATE: Players array length: 4
RoomPage.jsx:53 🏠 ROOM_UPDATE: Players array entries: (4) [Array(2), Array(2), Array(2), Array(2)]
RoomPage.jsx:181 🎯 SLOT_1: player= {name: 'Andy', is_bot: false, is_host: true} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_2: player= {name: 'Bot 2', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_3: player= {name: 'Bot 3', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_4: player= {name: 'Bot 4', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:87 🎮 START_GAME: Button clicked
RoomPage.jsx:88 🎮 START_GAME: Room ID: 7E13B1
RoomPage.jsx:181 🎯 SLOT_1: player= {name: 'Andy', is_bot: false, is_host: true} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_2: player= {name: 'Bot 2', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_3: player= {name: 'Bot 3', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_4: player= {name: 'Bot 4', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:60 Game started, navigating to game page
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154514.1068769, …}
GameService.ts:411 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
ServiceIntegration.ts:157 🔗 Connecting to room 7E13B1 as Andy...
RecoveryService.ts:106 🔄 RecoveryService: Initialized tracking for room 7E13B1
GameService.ts:1258 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room 7E13B1
GameContext.jsx:36 🚀 GAME_CONTEXT: Phase 1-4 Enterprise Architecture initializing
NetworkService.ts:337 🔗 Connection opened to room 7E13B1
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room 7E13B1
GameService.ts:1258 🎮 State Change: JOIN_ROOM
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {roomId: {…}, playerName: {…}, lastEventSequence: {…}}
GameService.ts:94 🎮 GameService: Joined room 7E13B1 as Andy
ServiceIntegration.ts:169 ✅ Successfully connected to room 7E13B1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Bot 2'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 0, …}
GameService.ts:1261 Diff: {phase: {…}, players: {…}, myHand: {…}, declarationOrder: {…}, currentDeclarer: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'declaration'
DeclarationUI.jsx:43 🎯 DECLARATION_UI_DEBUG: Props received: {myHandLength: 8, declarations: {…}, playersLength: 4, currentTotal: 0, isMyTurn: false, …}
DeclarationUI.jsx:52 🎯 DECLARATION_UI_DEBUG: Full players array: (4) [{…}, {…}, {…}, {…}]
DeclarationUI.jsx:53 🎯 DECLARATION_UI_DEBUG: Full declarations object: {}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154517.955473, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Bot 2'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 0, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 1, declarations: {…}, declaration_total: 2, current_declarer: 'Bot 3'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1261 Diff: {currentRound: {…}, declarations: {…}, declarationOrder: {…}, currentDeclarer: {…}, lastEventSequence: {…}, …}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 2, declarations: {…}, declaration_total: 3, current_declarer: 'Bot 4'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1261 Diff: {declarations: {…}, currentDeclarer: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 3, declarations: {…}, declaration_total: 4, current_declarer: 'Andy'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1261 Diff: {declarations: {…}, currentDeclarer: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameService.ts:1228 🎮 Action sent: declare {value: 3, player_name: 'Andy'}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 4, declarations: {…}, declaration_total: 7, current_declarer: null}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1261 Diff: {declarations: {…}, validOptions: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, …}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {phase: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, currentTurnNumber: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154544.321784, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}, canPlayAnyCount: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 3, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 1 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['GENERAL_RED(14)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['GENERAL_RED(14)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 4, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 1 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['GENERAL_BLACK(13)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['GENERAL_BLACK(13)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 3
 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 1 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_BLACK(11)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_BLACK(11)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 3, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 3, new selection: [3]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 9}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 2",
  "winning_play": {
    "pieces": [
      "GENERAL_RED(14)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 2",
        "pieces": [
          "GENERAL_RED(14)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "GENERAL_BLACK(13)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "ADVISOR_BLACK(11)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "ELEPHANT_BLACK(9)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 2",
    "winner_play": {
      "pieces": [
        "GENERAL_RED(14)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 2": 1,
    "Andy": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 1,
  "next_starter": "Bot 2",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 9,
  "timestamp": 1751154569.683127,
  "reason": "Turn 1 completed - winner: Bot 2",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 1 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 2, Next starter: Bot 2
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, turnNumber: 1, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, nextStarter: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 1
   🎪 nextStarter: Bot 2
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 1
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {phase: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 2 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ELEPHANT_BLACK(9)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ELEPHANT_BLACK(9)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 3, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 2 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_BLACK(11)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_BLACK(11)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 4, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 2 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_RED(12)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_RED(12)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 3
 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 2 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ELEPHANT_BLACK(9)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ELEPHANT_BLACK(9)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 2, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 2, new selection: [2]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 4}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 3",
  "winning_play": {
    "pieces": [
      "ADVISOR_RED(12)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 2",
        "pieces": [
          "ADVISOR_BLACK(11)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "ADVISOR_RED(12)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "ELEPHANT_BLACK(9)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "CANNON_RED(4)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 3",
    "winner_play": {
      "pieces": [
        "ADVISOR_RED(12)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 3": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 2,
  "next_starter": "Bot 3",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 20,
  "timestamp": 1751154593.1472378,
  "reason": "Turn 2 completed - winner: Bot 3",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 2 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 3, Next starter: Bot 3
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, turnNumber: 2, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 3
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
   🔢 turnNumber: 2
   🎪 nextStarter: Bot 3
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 3
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 3
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 2
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 3
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 2, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 2, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 3
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 2
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 3
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['ADVISOR_RED(12)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 3, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {phase: {…}, myHand: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 3, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 3 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CANNON_RED(4)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CANNON_RED(4)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 4, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 3 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ELEPHANT_RED(10)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ELEPHANT_RED(10)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Andy, Required: 1, Plays: 2
 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 3 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CHARIOT_RED(8)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CHARIOT_RED(8)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 5, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 5, new selection: [5]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 3}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 3 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CANNON_BLACK(3)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CANNON_BLACK(3)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 3",
  "winning_play": {
    "pieces": [
      "ELEPHANT_RED(10)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 3",
        "pieces": [
          "ELEPHANT_RED(10)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "CHARIOT_RED(8)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "CANNON_BLACK(3)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "ELEPHANT_RED(10)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 3",
    "winner_play": {
      "pieces": [
        "ELEPHANT_RED(10)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 3": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 3,
  "next_starter": "Bot 3",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 31,
  "timestamp": 1751154610.0686662,
  "reason": "Turn 3 completed - winner: Bot 3",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 3 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 3, Next starter: Bot 3
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 3', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, turnNumber: 3, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, winningPlay: {…}, turnNumber: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 3
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
   🔢 turnNumber: 3
   🎪 nextStarter: Bot 3
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 3
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 3
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 3
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 3
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 3
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 3
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 3, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 3', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 3, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 3
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 3: 1, Andy: 0, Bot 2: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 3
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 3
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['ELEPHANT_RED(10)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 3, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {phase: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 3, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
 🌐 PROCESS_EVENT_DEBUG: Handling play event
 🎲 PLAY_DEBUG: Round 1, Turn 4 - Bot 2 played 1 pieces
 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 3
 🎲 PLAY_DEBUG: Pieces data: ['ELEPHANT_RED(10)']
 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
 🎲 PLAY_DEBUG: Cards array: ['ELEPHANT_RED(10)']
 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 4, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 4 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CHARIOT_BLACK(7)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CHARIOT_BLACK(7)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Andy, Required: 1, Plays: 2
 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 4 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CHARIOT_RED(8)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CHARIOT_RED(8)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 0, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 0, new selection: [0]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 2}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 4 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 3', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 3, Current: Bot 2, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 4",
  "winning_play": {
    "pieces": [
      "CHARIOT_RED(8)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 3",
        "pieces": [
          "CHARIOT_BLACK(7)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "CHARIOT_RED(8)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "HORSE_RED(6)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 4",
    "winner_play": {
      "pieces": [
        "CHARIOT_RED(8)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 4": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 3": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 4,
  "next_starter": "Bot 4",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 42,
  "timestamp": 1751154633.615935,
  "reason": "Turn 4 completed - winner: Bot 4",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 4 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 4, Next starter: Bot 4
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, turnNumber: 4, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
   🔢 turnNumber: 4
   🎪 nextStarter: Bot 4
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 4
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 4
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 4
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 4
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 4, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 4, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 4
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 4
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 4
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['CHARIOT_RED(8)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 4, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 4
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 4
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 4
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['CHARIOT_RED(8)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {phase: {…}, myHand: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 5 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['HORSE_RED(6)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['HORSE_RED(6)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Andy, Required: 1, Plays: 1
 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 5 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CHARIOT_BLACK(7)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CHARIOT_BLACK(7)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 2, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 2, new selection: [2]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 1}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 2, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 5 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_BLACK(1)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_BLACK(1)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 5 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CANNON_RED(4)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CANNON_RED(4)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 5
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 4",
  "winning_play": {
    "pieces": [
      "CHARIOT_BLACK(7)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 4",
        "pieces": [
          "CHARIOT_BLACK(7)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "CANNON_RED(4)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "HORSE_RED(6)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 4",
    "winner_play": {
      "pieces": [
        "CHARIOT_BLACK(7)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 4": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 3": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 5,
  "next_starter": "Bot 4",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 53,
  "timestamp": 1751154649.362942,
  "reason": "Turn 5 completed - winner: Bot 4",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 5 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 4, Next starter: Bot 4
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, turnNumber: 5, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, winningPlay: {…}, turnNumber: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
   🔢 turnNumber: 5
   🎪 nextStarter: Bot 4
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Bot 4
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 4
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 5
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 4
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 5, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 5, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 4
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 5
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 4
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['CHARIOT_BLACK(7)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {phase: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 6 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['HORSE_RED(6)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['HORSE_RED(6)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Andy', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Andy, Required: 2, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(2), valid: true, play_type: 'PAIR', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 6 - Bot 4 played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 2, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(2), isValid: undefined, playType: 'PAIR', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 0, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 0, new selection: [0]
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 2, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 2, new selection: (2) [0, 2]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(2), player_name: 'Andy', play_value: 10}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 2, Required: 2, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(2), valid: true, play_type: 'PAIR', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 6 - Andy played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 2, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['HORSE_BLACK(5)', 'HORSE_BLACK(5)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(2), isValid: undefined, playType: 'PAIR', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['HORSE_BLACK(5)', 'HORSE_BLACK(5)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 2, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(2), valid: true, play_type: 'INVALID', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 6 - Bot 2 played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 2, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(2), isValid: undefined, playType: 'INVALID', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 6
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 2, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Andy",
  "winning_play": {
    "pieces": [
      "HORSE_BLACK(5)",
      "HORSE_BLACK(5)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 2
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_RED(2)",
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "HORSE_BLACK(5)",
          "HORSE_BLACK(5)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "SOLDIER_BLACK(1)",
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "SOLDIER_BLACK(1)",
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Andy",
    "winner_play": {
      "pieces": [
        "HORSE_BLACK(5)",
        "HORSE_BLACK(5)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 2
    }
  },
  "player_piles": {
    "Andy": 2,
    "Bot 2": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 6,
  "next_starter": "Andy",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 64,
  "timestamp": 1751154667.800798,
  "reason": "Turn 6 completed - winner: Andy",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 6 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Andy, Next starter: Andy
 🏆 TURN_COMPLETE_DATA: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Andy', winningPlay: {…}, playerPiles: {…}, turnNumber: 6, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
   📊 playerPiles: {Andy: 2, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 6
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Andy: 2, Bot 2: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Andy
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Andy
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Andy: 2, Bot 2: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Andy
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Andy
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Andy: 2, Bot 2: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Andy
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Andy
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
GameContainer.jsx:112   📊 gameState.playerPiles: {Andy: 2, Bot 2: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 6
GameContainer.jsx:115   🎪 gameState.nextStarter: Andy
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 6, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 6, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Andy
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
TurnResultsUI.jsx:34   📊 playerPiles: {Andy: 2, Bot 2: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 6
TurnResultsUI.jsx:37   🎪 nextStarter: Andy
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: (2) ['HORSE_BLACK(5)', 'HORSE_BLACK(5)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 2
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {phase: {…}, myHand: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}, canPlayAnyCount: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(2), valid: true, play_type: 'PAIR', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 7 - Bot 3 played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(2), isValid: undefined, playType: 'PAIR', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 0, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 0, new selection: [0]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 12}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 2, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 7 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_RED(12)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_RED(12)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 3, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 7 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CANNON_BLACK(3)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CANNON_BLACK(3)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 1, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 7 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Andy",
  "winning_play": {
    "pieces": [
      "ADVISOR_RED(12)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Andy",
        "pieces": [
          "ADVISOR_RED(12)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "CANNON_BLACK(3)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Andy",
    "winner_play": {
      "pieces": [
        "ADVISOR_RED(12)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Andy": 1,
    "Bot 2": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 7,
  "next_starter": "Andy",
  "all_hands_empty": true,
  "will_continue": false,
  "phase": "turn",
  "sequence": 75,
  "timestamp": 1751154688.1843998,
  "reason": "Turn 7 completed - winner: Andy",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 7 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Andy, Next starter: Andy
 🏆 TURN_COMPLETE_DATA: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Andy', winningPlay: {…}, playerPiles: {…}, turnNumber: 7, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, allHandsEmpty: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
   🎮 gameState.phase: turn_results
   🏅 gameState.turnWinner: Andy
   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 gameState.playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
   🔢 gameState.turnNumber: 7
   🎪 gameState.nextStarter: Andy
 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 7, …}
 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 7, …}
 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
   🏅 winner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   👥 players: (4) [{…}, {…}, {…}, {…}]
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
   ✅ hasWinner: true
   🃏 winningPieces: ['ADVISOR_RED(12)']
   💎 winningValue: 0
   🎲 winningType: unknown
   🏆 pilesWon: 1
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: null, turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 7
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: unknown, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {phase: {…}, myHand: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: null, …}
 🌐 PROCESS_EVENT_DEBUG: Handling play event
 🎲 PLAY_DEBUG: Round 1, Turn 7 - Bot 4 played 1 pieces
 🎲 PLAY_DEBUG: Required count: 1, Turn complete: true, Next: null
 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_BLACK(1)']
 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_BLACK(1)']
 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
 🎯 PLAY_DEBUG: Turn is complete but no next_player - turn should be finishing
 🎯 TURN_COMPLETE_FRONTEND: Turn marked as complete by backend
 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
 🎮 State Change: NETWORK_EVENT:PLAY
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Andy",
  "winning_play": {
    "pieces": [
      "ADVISOR_RED(12)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Andy",
        "pieces": [
          "ADVISOR_RED(12)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "CANNON_BLACK(3)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Andy",
    "winner_play": {
      "pieces": [
        "ADVISOR_RED(12)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Andy": 1,
    "Bot 2": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 7,
  "next_starter": "Andy",
  "all_hands_empty": true,
  "will_continue": false,
  "phase": "turn",
  "sequence": 78,
  "timestamp": 1751154688.190264,
  "reason": "Turn 7 completed - winner: Andy",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 7 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Andy, Next starter: Andy
 🏆 TURN_COMPLETE_DATA: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Andy', winningPlay: {…}, playerPiles: {…}, turnNumber: 7, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 Diff: {phase: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Andy
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'scoring', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: scoring
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {round_scores: {…}, total_scores: {…}, players: Array(4), game_complete: false, winners: Array(0), …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🏆 SCORING_FRONTEND_DEBUG: Processing scoring phase data
 📊 Raw phase data: {round_scores: {…}, total_scores: {…}, players: Array(4), game_complete: false, winners: Array(0), …}
 👥 Available players in newState: (4) [{…}, {…}, {…}, {…}]
 📊 SCORING_DEBUG: Raw round scores: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 ✅ SCORING_DEBUG: Processed round scores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
 ✅ SCORING_DEBUG: Processed total scores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
 ✅ SCORING_DEBUG: Game over: false
 ✅ SCORING_DEBUG: Winners: []
 ✅ SCORING_DEBUG: Redeal multiplier: 1
 🧮 SCORING_DEBUG: Calculating playersWithScores...
 🧮 SCORING_DEBUG: Generated playersWithScores: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'scoring', currentRound: 1, …}
 Diff: {phase: {…}, players: {…}, roundScores: {…}, totalScores: {…}, lastEventSequence: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
 🎮 GAME_CONTAINER_DEBUG: Passing props to ScoringUI:
   👥 players: (4) [{…}, {…}, {…}, {…}]
   📊 roundScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
   💯 totalScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
   ⚗️ redealMultiplier: 1
   🏁 gameOver: false
   🏆 winners: []
 🏆 SCORING_UI_DEBUG: ScoringUI props received:
   👥 players: (4) [{…}, {…}, {…}, {…}]
   📊 roundScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
   💯 totalScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
   ⚗️ redealMultiplier: 1
   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
   🏁 gameOver: false
   🏆 winners: []
 🎯 SCORING_UI_DEBUG: Final sortedPlayers: (4) [{…}, {…}, {…}, {…}]
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'scoring', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154688.194253, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: scoring
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {round_scores: {…}, total_scores: {…}, players: Array(4), game_complete: false, winners: Array(0), …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:663 🏆 SCORING_FRONTEND_DEBUG: Processing scoring phase data
GameService.ts:664 📊 Raw phase data: {round_scores: {…}, total_scores: {…}, players: Array(4), game_complete: false, winners: Array(0), …}
GameService.ts:665 👥 Available players in newState: (4) [{…}, {…}, {…}, {…}]
GameService.ts:671 📊 SCORING_DEBUG: Raw round scores: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:716 ✅ SCORING_DEBUG: Processed round scores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
GameService.ts:717 ✅ SCORING_DEBUG: Processed total scores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
GameService.ts:718 ✅ SCORING_DEBUG: Game over: false
GameService.ts:719 ✅ SCORING_DEBUG: Winners: []
GameService.ts:720 ✅ SCORING_DEBUG: Redeal multiplier: 1
GameService.ts:724 🧮 SCORING_DEBUG: Calculating playersWithScores...
GameService.ts:732 🧮 SCORING_DEBUG: Generated playersWithScores: (4) [{…}, {…}, {…}, {…}]
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'scoring', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'scoring', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:151 🎮 GAME_CONTAINER_DEBUG: Passing props to ScoringUI:
GameContainer.jsx:152   👥 players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:153   📊 roundScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
GameContainer.jsx:154   💯 totalScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
GameContainer.jsx:155   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:156   ⚗️ redealMultiplier: 1
GameContainer.jsx:157   🏁 gameOver: false
GameContainer.jsx:158   🏆 winners: []
ScoringUI.jsx:39 🏆 SCORING_UI_DEBUG: ScoringUI props received:
ScoringUI.jsx:40   👥 players: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:41   📊 roundScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
ScoringUI.jsx:42   💯 totalScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
ScoringUI.jsx:43   ⚗️ redealMultiplier: 1
ScoringUI.jsx:44   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:45   🏁 gameOver: false
ScoringUI.jsx:46   🏆 winners: []
ScoringUI.jsx:61 🎯 SCORING_UI_DEBUG: Final sortedPlayers: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:39 🏆 SCORING_UI_DEBUG: ScoringUI props received:
ScoringUI.jsx:40   👥 players: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:41   📊 roundScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
ScoringUI.jsx:42   💯 totalScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
ScoringUI.jsx:43   ⚗️ redealMultiplier: 1
ScoringUI.jsx:44   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:45   🏁 gameOver: false
ScoringUI.jsx:46   🏆 winners: []
ScoringUI.jsx:61 🎯 SCORING_UI_DEBUG: Final sortedPlayers: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:39 🏆 SCORING_UI_DEBUG: ScoringUI props received:
ScoringUI.jsx:40   👥 players: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:41   📊 roundScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
ScoringUI.jsx:42   💯 totalScores: {Andy: 8, Bot 2: -1, Bot 3: -1, Bot 4: -1}
ScoringUI.jsx:43   ⚗️ redealMultiplier: 1
ScoringUI.jsx:44   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:45   🏁 gameOver: false
ScoringUI.jsx:46   🏆 winners: []
ScoringUI.jsx:61 🎯 SCORING_UI_DEBUG: Final sortedPlayers: (4) [{…}, {…}, {…}, {…}]
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154695.2590249, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'scoring', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
GameService.ts:1261 Diff: {phase: {…}, players: {…}, myHand: {…}, lastEventSequence: {…}, isMyHandWeak: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'preparation', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1261 Diff: {phase: {…}, currentRound: {…}, declarations: {…}, declarationOrder: {…}, isMyTurn: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154695.3601332, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1261 Diff: {declarationOrder: {…}, lastEventSequence: {…}}
DeclarationUI.jsx:43 🎯 DECLARATION_UI_DEBUG: Props received: {myHandLength: 8, declarations: {…}, playersLength: 4, currentTotal: 0, isMyTurn: true, …}
DeclarationUI.jsx:52 🎯 DECLARATION_UI_DEBUG: Full players array: (4) [{…}, {…}, {…}, {…}]
DeclarationUI.jsx:53 🎯 DECLARATION_UI_DEBUG: Full declarations object: {}
GameService.ts:1228 🎮 Action sent: declare {value: 2, player_name: 'Andy'}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 1, declarations: {…}, declaration_total: 2, current_declarer: 'Bot 2'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1261 Diff: {declarations: {…}, declarationOrder: {…}, currentDeclarer: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 2, declarations: {…}, declaration_total: 3, current_declarer: 'Bot 3'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1261 Diff: {declarations: {…}, currentDeclarer: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 3, declarations: {…}, declaration_total: 5, current_declarer: 'Bot 4'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1261 Diff: {declarations: {…}, currentDeclarer: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, …}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 4, declarations: {…}, declaration_total: 6, current_declarer: null}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
 Diff: {declarations: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, isLastPlayer: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {phase: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, currentTurnNumber: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154715.153907, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}, canPlayAnyCount: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 5, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 5, new selection: [5]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 8}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 2, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 1 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CHARIOT_RED(8)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CHARIOT_RED(8)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 3, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 1 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['GENERAL_RED(14)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['GENERAL_RED(14)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 1, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 1 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['GENERAL_BLACK(13)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['GENERAL_BLACK(13)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 2",
  "winning_play": {
    "pieces": [
      "GENERAL_RED(14)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Andy",
        "pieces": [
          "CHARIOT_RED(8)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "GENERAL_RED(14)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "GENERAL_BLACK(13)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "ADVISOR_BLACK(11)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 2",
    "winner_play": {
      "pieces": [
        "GENERAL_RED(14)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 2": 1,
    "Andy": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 1,
  "next_starter": "Bot 2",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 87,
  "timestamp": 1751154743.447924,
  "reason": "Turn 1 completed - winner: Bot 2",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 2, Turn 1 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 2, Next starter: Bot 2
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, turnNumber: 1, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 1
   🎪 nextStarter: Bot 2
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 1
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {phase: {…}, myHand: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 2 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_BLACK(11)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_BLACK(11)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 2
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 3, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 2 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_RED(12)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_RED(12)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 2
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 4, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 2 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CHARIOT_RED(8)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CHARIOT_RED(8)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 3
 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 2 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ELEPHANT_RED(10)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ELEPHANT_RED(10)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 1, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 1, new selection: [1]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 6}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 2",
  "winning_play": {
    "pieces": [
      "ADVISOR_RED(12)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 2",
        "pieces": [
          "ADVISOR_RED(12)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "CHARIOT_RED(8)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "ELEPHANT_RED(10)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "HORSE_RED(6)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 2",
    "winner_play": {
      "pieces": [
        "ADVISOR_RED(12)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 2": 1,
    "Andy": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 2,
  "next_starter": "Bot 2",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 98,
  "timestamp": 1751154805.137037,
  "reason": "Turn 2 completed - winner: Bot 2",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 2, Turn 2 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 2, Next starter: Bot 2
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, turnNumber: 2, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 Diff: {phase: {…}, winningPlay: {…}, turnNumber: {…}, isMyTurn: {…}, allowedActions: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 2
   🎪 nextStarter: Bot 2
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 2
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 2
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 2, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 2, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 2
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['ADVISOR_RED(12)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {phase: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {lastEventSequence: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
 🌐 PROCESS_EVENT_DEBUG: Handling play event
 🎲 PLAY_DEBUG: Round 2, Turn 3 - Andy played 1 pieces
 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 2
 🎲 PLAY_DEBUG: Pieces data: ['HORSE_RED(6)']
 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
 🎲 PLAY_DEBUG: Cards array: ['HORSE_RED(6)']
 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 3
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 3, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 3 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ELEPHANT_BLACK(9)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ELEPHANT_BLACK(9)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 3
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 4, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 3 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['HORSE_RED(6)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['HORSE_RED(6)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 3
 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 3 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ELEPHANT_RED(10)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ELEPHANT_RED(10)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 5, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 5, new selection: [5]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 5}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(6), hand_size: 6}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 4",
  "winning_play": {
    "pieces": [
      "ELEPHANT_RED(10)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 2",
        "pieces": [
          "ELEPHANT_BLACK(9)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "HORSE_RED(6)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "ELEPHANT_RED(10)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "HORSE_BLACK(5)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 4",
    "winner_play": {
      "pieces": [
        "ELEPHANT_RED(10)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 4": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 3": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 3,
  "next_starter": "Bot 4",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 109,
  "timestamp": 1751154825.1515331,
  "reason": "Turn 3 completed - winner: Bot 4",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 2, Turn 3 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 4, Next starter: Bot 4
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, turnNumber: 3, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
   🔢 turnNumber: 3
   🎪 nextStarter: Bot 4
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 4
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 3
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 4
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 3, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 3, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 4
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 3
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 4
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['ELEPHANT_RED(10)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {phase: {…}, myHand: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 4 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['HORSE_BLACK(5)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['HORSE_BLACK(5)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Andy, Required: 1, Plays: 1
 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 4 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ELEPHANT_BLACK(9)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ELEPHANT_BLACK(9)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 1, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 1, new selection: [1]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 2}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 4
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 2, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 4 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 4
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 4 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CHARIOT_BLACK(7)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CHARIOT_BLACK(7)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(5), hand_size: 5}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 4",
  "winning_play": {
    "pieces": [
      "ELEPHANT_BLACK(9)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 4",
        "pieces": [
          "ELEPHANT_BLACK(9)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "CHARIOT_BLACK(7)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "HORSE_BLACK(5)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 4",
    "winner_play": {
      "pieces": [
        "ELEPHANT_BLACK(9)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 4": 1,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 3": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 4,
  "next_starter": "Bot 4",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 120,
  "timestamp": 1751154851.381737,
  "reason": "Turn 4 completed - winner: Bot 4",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 2, Turn 4 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 4, Next starter: Bot 4
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, turnNumber: 4, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 Diff: {phase: {…}, winningPlay: {…}, turnNumber: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
   🔢 turnNumber: 4
   🎪 nextStarter: Bot 4
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 4
useGameState.ts:41   🎪 nextStarter: Bot 4
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 4
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 4
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 4
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 4, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 4, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 4
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 4: 1, Andy: 0, Bot 2: 0, Bot 3: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 4
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 4
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['ELEPHANT_BLACK(9)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 5
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {phase: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 5
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 5 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['HORSE_BLACK(5)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['HORSE_BLACK(5)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 5
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Andy, Required: 1, Plays: 1
 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 5 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CHARIOT_BLACK(7)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CHARIOT_BLACK(7)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 3, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 3, new selection: [3]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 11}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 5
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 2, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 5 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_BLACK(11)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_BLACK(11)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 5
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 5 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CANNON_RED(4)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CANNON_RED(4)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 5
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 5
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 5
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Andy",
  "winning_play": {
    "pieces": [
      "ADVISOR_BLACK(11)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 4",
        "pieces": [
          "CHARIOT_BLACK(7)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "ADVISOR_BLACK(11)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "CANNON_RED(4)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "CANNON_RED(4)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Andy",
    "winner_play": {
      "pieces": [
        "ADVISOR_BLACK(11)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Andy": 1,
    "Bot 2": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 5,
  "next_starter": "Andy",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 131,
  "timestamp": 1751154872.175031,
  "reason": "Turn 5 completed - winner: Andy",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 2, Turn 5 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Andy, Next starter: Andy
 🏆 TURN_COMPLETE_DATA: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Andy', winningPlay: {…}, playerPiles: {…}, turnNumber: 5, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 5
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Andy
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Andy
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Andy
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Andy
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 5
useGameState.ts:41   🎪 nextStarter: Andy
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Andy
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 5
GameContainer.jsx:115   🎪 gameState.nextStarter: Andy
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 5, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 5, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Andy
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 5
TurnResultsUI.jsx:37   🎪 nextStarter: Andy
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['ADVISOR_BLACK(11)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 5, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Andy
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 5
TurnResultsUI.jsx:37   🎪 nextStarter: Andy
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['ADVISOR_BLACK(11)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 5, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Andy
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 5
TurnResultsUI.jsx:37   🎪 nextStarter: Andy
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['ADVISOR_BLACK(11)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 6
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {phase: {…}, myHand: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 6
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}, canPlayAnyCount: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 6 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CANNON_RED(4)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CANNON_RED(4)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 2, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 2, new selection: [2]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 2}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 6
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 2, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 6 - Andy played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 6
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 3, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 6 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CANNON_BLACK(3)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CANNON_BLACK(3)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 6
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 1, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 6 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(3), hand_size: 3}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 6
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 6
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 6
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 2",
  "winning_play": {
    "pieces": [
      "CANNON_BLACK(3)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Andy",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "CANNON_BLACK(3)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "CANNON_BLACK(3)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 2",
    "winner_play": {
      "pieces": [
        "CANNON_BLACK(3)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 2": 1,
    "Andy": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 6,
  "next_starter": "Bot 2",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 142,
  "timestamp": 1751154888.6979752,
  "reason": "Turn 6 completed - winner: Bot 2",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 2, Turn 6 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 2, Next starter: Bot 2
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, turnNumber: 6, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 6
   🎪 nextStarter: Bot 2
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 6
useGameState.ts:41   🎪 nextStarter: Bot 2
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 6
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 6, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 6, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 6
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['CANNON_BLACK(3)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 7
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {phase: {…}, myHand: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 7
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 7 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['CANNON_BLACK(3)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['CANNON_BLACK(3)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 7
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 3, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 7 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 7
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 4, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 7 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_BLACK(1)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_BLACK(1)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 7
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 3
 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 7 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 7
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 0, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 0, new selection: [0]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 1}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 7
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 7
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 2",
  "winning_play": {
    "pieces": [
      "SOLDIER_RED(2)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 2",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 2",
    "winner_play": {
      "pieces": [
        "SOLDIER_RED(2)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 2": 1,
    "Andy": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 7,
  "next_starter": "Bot 2",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 153,
  "timestamp": 1751154907.0531242,
  "reason": "Turn 7 completed - winner: Bot 2",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 2, Turn 7 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 2, Next starter: Bot 2
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, turnNumber: 7, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 Diff: {phase: {…}, winningPlay: {…}, turnNumber: {…}, isMyTurn: {…}, allowedActions: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 7
   🎪 nextStarter: Bot 2
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 7
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 7
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 7
useGameState.ts:41   🎪 nextStarter: Bot 2
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 7
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 7, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 7, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 7
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: ['SOLDIER_RED(2)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 8
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 8
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {phase: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 8
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 8
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {lastEventSequence: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 2', …}
 🌐 PROCESS_EVENT_DEBUG: Handling play event
 🎲 PLAY_DEBUG: Round 2, Turn 8 - Andy played 1 pieces
 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 2
 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_BLACK(1)']
 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_BLACK(1)']
 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 8
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 3, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 8
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 8 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_BLACK(1)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_BLACK(1)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 8
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 4, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 8
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 8 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_BLACK(1)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_BLACK(1)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 8
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 3
 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 8
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 2, Turn 8 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['SOLDIER_BLACK(1)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['SOLDIER_BLACK(1)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 0, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 0, new selection: [0]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 12}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(1), hand_size: 1}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 8
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 8
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Andy",
  "winning_play": {
    "pieces": [
      "ADVISOR_RED(12)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 2",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "ADVISOR_RED(12)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Andy",
    "winner_play": {
      "pieces": [
        "ADVISOR_RED(12)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Andy": 1,
    "Bot 2": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 8,
  "next_starter": "Andy",
  "all_hands_empty": true,
  "will_continue": false,
  "phase": "turn",
  "sequence": 164,
  "timestamp": 1751154921.743804,
  "reason": "Turn 8 completed - winner: Andy",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 2, Turn 8 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Andy, Next starter: Andy
 🏆 TURN_COMPLETE_DATA: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Andy', winningPlay: {…}, playerPiles: {…}, turnNumber: 8, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
   🎮 gameState.phase: turn_results
   🏅 gameState.turnWinner: Andy
   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 gameState.playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
   🔢 gameState.turnNumber: 8
   🎪 gameState.nextStarter: Andy
 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 8, …}
 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 8, …}
 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
   🏅 winner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   👥 players: (4) [{…}, {…}, {…}, {…}]
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
   ✅ hasWinner: true
   🃏 winningPieces: ['ADVISOR_RED(12)']
   💎 winningValue: 0
   🎲 winningType: unknown
   🏆 pilesWon: 1
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: null, turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 2, Turn 8
 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: unknown, Required: 1, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 8
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {phase: {…}, myHand: {…}, isMyTurn: {…}, allowedActions: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: null, …}
 🌐 PROCESS_EVENT_DEBUG: Handling play event
 🎲 PLAY_DEBUG: Round 2, Turn 8 - Andy played 1 pieces
 🎲 PLAY_DEBUG: Required count: 1, Turn complete: true, Next: null
 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_RED(12)']
 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_RED(12)']
 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
 🎯 PLAY_DEBUG: Turn is complete but no next_player - turn should be finishing
 🎯 TURN_COMPLETE_FRONTEND: Turn marked as complete by backend
 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
 🎮 State Change: NETWORK_EVENT:PLAY
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 8
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Andy",
  "winning_play": {
    "pieces": [
      "ADVISOR_RED(12)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 2",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "ADVISOR_RED(12)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Andy",
    "winner_play": {
      "pieces": [
        "ADVISOR_RED(12)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Andy": 1,
    "Bot 2": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 8,
  "next_starter": "Andy",
  "all_hands_empty": true,
  "will_continue": false,
  "phase": "turn",
  "sequence": 167,
  "timestamp": 1751154921.7542021,
  "reason": "Turn 8 completed - winner: Andy",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 2, Turn 8 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Andy, Next starter: Andy
 🏆 TURN_COMPLETE_DATA: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Andy', winningPlay: {…}, playerPiles: {…}, turnNumber: 8, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 Diff: {phase: {…}, isMyTurn: {…}, allowedActions: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
   🎮 gameState.phase: turn_results
   🏅 gameState.turnWinner: Andy
   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 gameState.playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
   🔢 gameState.turnNumber: 8
   🎪 gameState.nextStarter: Andy
 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 8, …}
 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 8, …}
 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
   🏅 winner: Andy
   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
   📊 playerPiles: {Andy: 1, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   👥 players: (4) [{…}, {…}, {…}, {…}]
   🔢 turnNumber: 8
   🎪 nextStarter: Andy
 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
   ✅ hasWinner: true
   🃏 winningPieces: ['ADVISOR_RED(12)']
   💎 winningValue: 0
   🎲 winningType: unknown
   🏆 pilesWon: 1
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'scoring', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 2, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: scoring
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {round_scores: {…}, total_scores: {…}, players: Array(4), game_complete: false, winners: Array(0), …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🏆 SCORING_FRONTEND_DEBUG: Processing scoring phase data
 📊 Raw phase data: {round_scores: {…}, total_scores: {…}, players: Array(4), game_complete: false, winners: Array(0), …}
 👥 Available players in newState: (4) [{…}, {…}, {…}, {…}]
 📊 SCORING_DEBUG: Raw round scores: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 ✅ SCORING_DEBUG: Processed round scores: {Andy: 7, Bot 2: -3, Bot 3: -2, Bot 4: -1}
 ✅ SCORING_DEBUG: Processed total scores: {Andy: 15, Bot 2: -4, Bot 3: -3, Bot 4: -2}
 ✅ SCORING_DEBUG: Game over: false
 ✅ SCORING_DEBUG: Winners: []
 ✅ SCORING_DEBUG: Redeal multiplier: 1
 🧮 SCORING_DEBUG: Calculating playersWithScores...
 🧮 SCORING_DEBUG: Generated playersWithScores: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'scoring', currentRound: 2, …}
 Diff: {phase: {…}, players: {…}, roundScores: {…}, totalScores: {…}, lastEventSequence: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'scoring'
 🎮 GAME_CONTAINER_DEBUG: Passing props to ScoringUI:
   👥 players: (4) [{…}, {…}, {…}, {…}]
   📊 roundScores: {Andy: 7, Bot 2: -3, Bot 3: -2, Bot 4: -1}
   💯 totalScores: {Andy: 15, Bot 2: -4, Bot 3: -3, Bot 4: -2}
   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
   ⚗️ redealMultiplier: 1
   🏁 gameOver: false
   🏆 winners: []
 🏆 SCORING_UI_DEBUG: ScoringUI props received:
   👥 players: (4) [{…}, {…}, {…}, {…}]
   📊 roundScores: {Andy: 7, Bot 2: -3, Bot 3: -2, Bot 4: -1}
   💯 totalScores: {Andy: 15, Bot 2: -4, Bot 3: -3, Bot 4: -2}
   ⚗️ redealMultiplier: 1
   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
   🏁 gameOver: false
   🏆 winners: []
 🎯 SCORING_UI_DEBUG: Final sortedPlayers: (4) [{…}, {…}, {…}, {…}]
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'scoring', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154921.762133, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: scoring
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {round_scores: {…}, total_scores: {…}, players: Array(4), game_complete: false, winners: Array(0), …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:663 🏆 SCORING_FRONTEND_DEBUG: Processing scoring phase data
GameService.ts:664 📊 Raw phase data: {round_scores: {…}, total_scores: {…}, players: Array(4), game_complete: false, winners: Array(0), …}
GameService.ts:665 👥 Available players in newState: (4) [{…}, {…}, {…}, {…}]
GameService.ts:671 📊 SCORING_DEBUG: Raw round scores: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:716 ✅ SCORING_DEBUG: Processed round scores: {Andy: 7, Bot 2: -3, Bot 3: -2, Bot 4: -1}
GameService.ts:717 ✅ SCORING_DEBUG: Processed total scores: {Andy: 15, Bot 2: -4, Bot 3: -3, Bot 4: -2}
GameService.ts:718 ✅ SCORING_DEBUG: Game over: false
GameService.ts:719 ✅ SCORING_DEBUG: Winners: []
GameService.ts:720 ✅ SCORING_DEBUG: Redeal multiplier: 1
GameService.ts:724 🧮 SCORING_DEBUG: Calculating playersWithScores...
GameService.ts:732 🧮 SCORING_DEBUG: Generated playersWithScores: (4) [{…}, {…}, {…}, {…}]
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'scoring', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'scoring', currentRound: 2, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:151 🎮 GAME_CONTAINER_DEBUG: Passing props to ScoringUI:
GameContainer.jsx:152   👥 players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:153   📊 roundScores: {Andy: 7, Bot 2: -3, Bot 3: -2, Bot 4: -1}
GameContainer.jsx:154   💯 totalScores: {Andy: 15, Bot 2: -4, Bot 3: -3, Bot 4: -2}
GameContainer.jsx:155   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:156   ⚗️ redealMultiplier: 1
GameContainer.jsx:157   🏁 gameOver: false
GameContainer.jsx:158   🏆 winners: []
ScoringUI.jsx:39 🏆 SCORING_UI_DEBUG: ScoringUI props received:
ScoringUI.jsx:40   👥 players: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:41   📊 roundScores: {Andy: 7, Bot 2: -3, Bot 3: -2, Bot 4: -1}
ScoringUI.jsx:42   💯 totalScores: {Andy: 15, Bot 2: -4, Bot 3: -3, Bot 4: -2}
ScoringUI.jsx:43   ⚗️ redealMultiplier: 1
ScoringUI.jsx:44   🧮 playersWithScores: (4) [{…}, {…}, {…}, {…}]
ScoringUI.jsx:45   🏁 gameOver: false
ScoringUI.jsx:46   🏆 winners: []
ScoringUI.jsx:61 🎯 SCORING_UI_DEBUG: Final sortedPlayers: (4) [{…}, {…}, {…}, {…}]
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154928.845917, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: preparation
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'scoring', currentRound: 2, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'preparation', currentRound: 2, …}
 Diff: {phase: {…}, players: {…}, myHand: {…}, lastEventSequence: {…}, handValue: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
 🎮 GAME_STATE_DEBUG: Phase changed from 'scoring' to 'preparation'
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'preparation', currentRound: 2, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1261 Diff: {phase: {…}, currentRound: {…}, declarations: {…}, declarationOrder: {…}, lastEventSequence: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'preparation' to 'declaration'
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1261 Diff: {currentDeclarer: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, lastEventSequence: {…}}
DeclarationUI.jsx:43 🎯 DECLARATION_UI_DEBUG: Props received: {myHandLength: 8, declarations: {…}, playersLength: 4, currentTotal: 0, isMyTurn: false, …}
DeclarationUI.jsx:52 🎯 DECLARATION_UI_DEBUG: Full players array: (4) [{…}, {…}, {…}, {…}]
DeclarationUI.jsx:53 🎯 DECLARATION_UI_DEBUG: Full declarations object: {}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751154928.946562, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 0, declarations: {…}, declaration_total: 0, current_declarer: 'Andy'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1261 Diff: {declarationOrder: {…}, lastEventSequence: {…}}
GameService.ts:1228 🎮 Action sent: declare {value: 6, player_name: 'Andy'}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 1, declarations: {…}, declaration_total: 6, current_declarer: 'Bot 2'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1261 Diff: {declarations: {…}, declarationOrder: {…}, currentDeclarer: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 2, declarations: {…}, declaration_total: 7, current_declarer: 'Bot 3'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1261 Diff: {declarations: {…}, currentDeclarer: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 3, declarations: {…}, declaration_total: 8, current_declarer: 'Bot 4'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1261 Diff: {declarations: {…}, currentDeclarer: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, …}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 4, declarations: {…}, declaration_total: 9, current_declarer: null}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1261 Diff: {declarations: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, isLastPlayer: {…}}
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'declaration', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {phase: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751155019.80963, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}, canPlayAnyCount: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 3, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 3, new selection: [3]
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 4, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 4, new selection: (2) [3, 4]
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 6, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 6, new selection: (3) [3, 4, 6]
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 7, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 7, new selection: (4) [3, 4, 6, 7]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(4), player_name: 'Andy', play_value: 4}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 4, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 4 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 2, Required: 4, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(4), valid: true, play_type: 'FOUR_OF_A_KIND', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 1 - Andy played 4 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 4, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (4) ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(4), isValid: undefined, playType: 'FOUR_OF_A_KIND', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (4) ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 4, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 4 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 3, Required: 4, Plays: 2
 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(4), valid: true, play_type: 'INVALID', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 1 - Bot 2 played 4 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 4, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (4) ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(4), isValid: undefined, playType: 'INVALID', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (4) ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 4, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 4 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 4, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(4), valid: true, play_type: 'INVALID', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 1 - Bot 3 played 4 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 4, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (4) ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'CANNON_RED(4)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(4), isValid: undefined, playType: 'INVALID', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (4) ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'CANNON_RED(4)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 4, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 4 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 1
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 4, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Andy",
  "winning_play": {
    "pieces": [
      "SOLDIER_BLACK(1)",
      "SOLDIER_BLACK(1)",
      "SOLDIER_BLACK(1)",
      "SOLDIER_BLACK(1)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 4
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Andy",
        "pieces": [
          "SOLDIER_BLACK(1)",
          "SOLDIER_BLACK(1)",
          "SOLDIER_BLACK(1)",
          "SOLDIER_BLACK(1)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "HORSE_BLACK(5)",
          "CHARIOT_BLACK(7)",
          "CHARIOT_BLACK(7)",
          "CHARIOT_RED(8)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "SOLDIER_BLACK(1)",
          "CANNON_BLACK(3)",
          "CANNON_BLACK(3)",
          "CANNON_RED(4)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "SOLDIER_RED(2)",
          "SOLDIER_RED(2)",
          "SOLDIER_RED(2)",
          "CANNON_RED(4)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Andy",
    "winner_play": {
      "pieces": [
        "SOLDIER_BLACK(1)",
        "SOLDIER_BLACK(1)",
        "SOLDIER_BLACK(1)",
        "SOLDIER_BLACK(1)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 4
    }
  },
  "player_piles": {
    "Andy": 4,
    "Bot 2": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 1,
  "next_starter": "Andy",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 176,
  "timestamp": 1751155031.057034,
  "reason": "Turn 1 completed - winner: Andy",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 3, Turn 1 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Andy, Next starter: Andy
 🏆 TURN_COMPLETE_DATA: {winner: 'Andy', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Andy', winningPlay: {…}, playerPiles: {…}, turnNumber: 1, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 3, …}
 Diff: {phase: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, allHandsEmpty: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
   🎯 winningPlay: {pieces: Array(4), value: 0, type: 'unknown', pilesWon: 4}
   📊 playerPiles: {Andy: 4, Bot 2: 0, Bot 3: 0, Bot 4: 0}
   🔢 turnNumber: 1
   🎪 nextStarter: Andy
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Andy
useGameState.ts:38   🎯 winningPlay: {pieces: Array(4), value: 0, type: 'unknown', pilesWon: 4}
useGameState.ts:39   📊 playerPiles: {Andy: 4, Bot 2: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Andy
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Andy
useGameState.ts:38   🎯 winningPlay: {pieces: Array(4), value: 0, type: 'unknown', pilesWon: 4}
useGameState.ts:39   📊 playerPiles: {Andy: 4, Bot 2: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Andy
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Andy
useGameState.ts:38   🎯 winningPlay: {pieces: Array(4), value: 0, type: 'unknown', pilesWon: 4}
useGameState.ts:39   📊 playerPiles: {Andy: 4, Bot 2: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Andy
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Andy
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(4), value: 0, type: 'unknown', pilesWon: 4}
GameContainer.jsx:112   📊 gameState.playerPiles: {Andy: 4, Bot 2: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 1
GameContainer.jsx:115   🎪 gameState.nextStarter: Andy
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Andy', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Andy
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(4), value: 0, type: 'unknown', pilesWon: 4}
TurnResultsUI.jsx:34   📊 playerPiles: {Andy: 4, Bot 2: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Andy
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: (4) ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {phase: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Andy', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Andy, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}, canPlayAnyCount: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(4), valid: true, play_type: 'INVALID', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 2 - Bot 4 played 4 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (4) ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CANNON_RED(4)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(4), isValid: undefined, playType: 'INVALID', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (4) ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CANNON_RED(4)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 3, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 3, new selection: [3]
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 1, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 1, new selection: (2) [3, 1]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(2), player_name: 'Andy', play_value: 4}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 2
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 2, Required: 2, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(2), valid: true, play_type: 'PAIR', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 2 - Andy played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 2, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(2), isValid: undefined, playType: 'PAIR', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 2
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 3, Required: 2, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(2), valid: true, play_type: 'INVALID', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 2 - Bot 2 played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 2, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(2), isValid: undefined, playType: 'INVALID', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 2
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 2, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(2), valid: true, play_type: 'INVALID', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 2 - Bot 3 played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 2, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(2), isValid: undefined, playType: 'INVALID', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Andy', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(4), hand_size: 4}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 2
 🎯 FRONTEND_TURN_STATE: Starter: Andy, Current: Bot 4, Required: 2, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 2
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 2
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 4",
  "winning_play": {
    "pieces": [
      "HORSE_RED(6)",
      "HORSE_RED(6)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 2
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Andy",
        "pieces": [
          "SOLDIER_RED(2)",
          "SOLDIER_RED(2)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "CHARIOT_RED(8)",
          "ELEPHANT_BLACK(9)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "HORSE_BLACK(5)",
          "ELEPHANT_BLACK(9)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "HORSE_RED(6)",
          "HORSE_RED(6)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 4",
    "winner_play": {
      "pieces": [
        "HORSE_RED(6)",
        "HORSE_RED(6)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 2
    }
  },
  "player_piles": {
    "Bot 4": 2,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 3": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 2,
  "next_starter": "Bot 4",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 187,
  "timestamp": 1751155048.293918,
  "reason": "Turn 2 completed - winner: Bot 4",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 3, Turn 2 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 4, Next starter: Bot 4
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, turnNumber: 2, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 3, …}
 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, turnNumber: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
   🔢 turnNumber: 2
   🎪 nextStarter: Bot 4
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 2
useGameState.ts:41   🎪 nextStarter: Bot 4
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 4
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 2
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 4
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 2, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 2, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 4
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 2
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 4
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: (2) ['HORSE_RED(6)', 'HORSE_RED(6)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 2
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 2, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 4
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 2
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 4
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: (2) ['HORSE_RED(6)', 'HORSE_RED(6)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 2
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 2, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 4
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 2
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 4
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: (2) ['HORSE_RED(6)', 'HORSE_RED(6)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 2
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {phase: {…}, myHand: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentTurnPlays: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(2), valid: true, play_type: 'PAIR', next_player: 'Bot 4', …}
 🌐 PROCESS_EVENT_DEBUG: Handling play event
 🎲 PLAY_DEBUG: Round 3, Turn 3 - Bot 4 played 2 pieces
 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 4
 🎲 PLAY_DEBUG: Pieces data: (2) ['HORSE_RED(6)', 'HORSE_RED(6)']
 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(2), isValid: undefined, playType: 'PAIR', totalValue: 0}
 🎲 PLAY_DEBUG: Cards array: (2) ['HORSE_RED(6)', 'HORSE_RED(6)']
 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
 🎮 State Change: NETWORK_EVENT:PLAY
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Andy', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Andy, Required: 2, Plays: 1
 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(2), valid: true, play_type: 'PAIR', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 3 - Bot 4 played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 2, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['HORSE_RED(6)', 'HORSE_RED(6)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(2), isValid: undefined, playType: 'PAIR', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['HORSE_RED(6)', 'HORSE_RED(6)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 0, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 0, new selection: [0]
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 1, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 1, new selection: (2) [0, 1]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(2), player_name: 'Andy', play_value: 23}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 3
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 2, Required: 2, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Andy', pieces: Array(2), valid: true, play_type: 'INVALID', next_player: 'Bot 2', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 3 - Andy played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 2, Turn complete: false, Next: Bot 2
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Andy', cards: Array(2), isValid: undefined, playType: 'INVALID', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 2 to Bot 2
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 3
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 2, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 2', pieces: Array(2), valid: true, play_type: 'INVALID', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 3 - Bot 2 played 2 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 2, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: (2) ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(2), isValid: undefined, playType: 'INVALID', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: (2) ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 2, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(2), hand_size: 2}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 2 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 3
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 3, Required: 2, Plays: 4
 🎲 TURN_PLAYS_DEBUG: Converted 4 plays to currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 3
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: (4) [{…}, {…}, {…}, {…}]
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {currentTurnPlays: {…}, lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 3
 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 7E13B1 {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 4",
  "winning_play": {
    "pieces": [
      "HORSE_RED(6)",
      "HORSE_RED(6)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 2
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 4",
        "pieces": [
          "HORSE_RED(6)",
          "HORSE_RED(6)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "ADVISOR_RED(12)",
          "ADVISOR_BLACK(11)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 2",
        "pieces": [
          "ADVISOR_BLACK(11)",
          "GENERAL_RED(14)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "ELEPHANT_RED(10)",
          "GENERAL_BLACK(13)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 4",
    "winner_play": {
      "pieces": [
        "HORSE_RED(6)",
        "HORSE_RED(6)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 2
    }
  },
  "player_piles": {
    "Bot 4": 2,
    "Andy": 0,
    "Bot 2": 0,
    "Bot 3": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 3,
  "next_starter": "Bot 4",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 198,
  "timestamp": 1751155067.7791622,
  "reason": "Turn 3 completed - winner: Bot 4",
  "room_id": "7E13B1"
}
 🏆 TURN_COMPLETE_DEBUG: Round 3, Turn 3 completed!
 🏆 TURN_WINNER_DEBUG: Winner: Bot 4, Next starter: Bot 4
 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 4', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, turnNumber: 3, …}
 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 3, …}
 Diff: {phase: {…}, turnNumber: {…}, lastEventSequence: {…}}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
   🔢 turnNumber: 3
   🎪 nextStarter: Bot 4
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 4
useGameState.ts:38   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
useGameState.ts:39   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
useGameState.ts:40   🔢 turnNumber: 3
useGameState.ts:41   🎪 nextStarter: Bot 4
GameContainer.jsx:108 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:109   🎮 gameState.phase: turn_results
GameContainer.jsx:110   🏅 gameState.turnWinner: Bot 4
GameContainer.jsx:111   🎯 gameState.winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
GameContainer.jsx:112   📊 gameState.playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
GameContainer.jsx:113   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:114   🔢 gameState.turnNumber: 3
GameContainer.jsx:115   🎪 gameState.nextStarter: Bot 4
GameContainer.jsx:127 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 3, …}
GameContainer.jsx:226 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 4', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 3, …}
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 4
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(2), value: 0, type: 'unknown', pilesWon: 2}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 4: 2, Andy: 0, Bot 2: 0, Bot 3: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 3
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 4
TurnResultsUI.jsx:45 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:46   ✅ hasWinner: true
TurnResultsUI.jsx:47   🃏 winningPieces: (2) ['HORSE_RED(6)', 'HORSE_RED(6)']
TurnResultsUI.jsx:48   💎 winningValue: 0
TurnResultsUI.jsx:49   🎲 winningType: unknown
TurnResultsUI.jsx:50   🏆 pilesWon: 2
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn_results', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {phase: {…}, myHand: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, …}
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🎮 GAME_STATE_DEBUG: Phase changed from 'turn_results' to 'turn'
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Bot 4, Required: null, Plays: 0
 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 3', pieces: Array(2), valid: true, play_type: 'INVALID', next_player: 'Bot 4', …}
 🌐 PROCESS_EVENT_DEBUG: Handling play event
 🎲 PLAY_DEBUG: Round 3, Turn 4 - Bot 3 played 2 pieces
 🎲 PLAY_DEBUG: Required count: null, Turn complete: false, Next: Bot 4
 🎲 PLAY_DEBUG: Pieces data: (2) ['ELEPHANT_RED(10)', 'GENERAL_BLACK(13)']
 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(2), isValid: undefined, playType: 'INVALID', totalValue: 0}
 🎲 PLAY_DEBUG: Cards array: (2) ['ELEPHANT_RED(10)', 'GENERAL_BLACK(13)']
 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
 🎯 TURN_DEBUG: currentTurnPlays: []
 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
 🎮 State Change: NETWORK_EVENT:PLAY
 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
 Diff: {lastEventSequence: {…}}
 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 7E13B1 {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 3, …}
 🔄 PHASE_CHANGE_DEBUG: Phase: turn
 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 4', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(0), hand_size: 0}
 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 3, Turn 4
 🎯 FRONTEND_TURN_STATE: Starter: Bot 4, Current: Andy, Required: 1, Plays: 1
 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, isMyTurn: {…}, allowedActions: {…}, …}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 7E13B1 {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 3, Turn 4 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_RED(12)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_RED(12)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1260 New: {isConnected: true, roomId: '7E13B1', playerName: 'Andy', phase: 'turn', currentRound: 3, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:86 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 4

---
Backend log
---
🔒 [Room 7E13B1] Starting game: op_id=7E13B1_1
🔄 STATE_MACHINE_DEBUG: Attempting transition from None to GamePhase.PREPARATION
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🎯 STATE_MACHINE_DEBUG: Phase updated: None -> GamePhase.PREPARATION
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.preparation_state.PreparationState object at 0x10ddccad0>
🎴 PREP_STATE_DEBUG: Setup phase starting for room 7E13B1
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
🎴 PREP_STATE_DEBUG: Using guaranteed no redeal dealing
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: ADVISOR_RED(12)
  → Bot 3 gets strong piece: ADVISOR_RED(12)
  → Bot 4 gets strong piece: ADVISOR_BLACK(11)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CANNON_BLACK(3)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 2: ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_RED(4)', 'HORSE_RED(6)', 'ELEPHANT_RED(10)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: True
  Bot 3: ['ELEPHANT_RED(10)', 'SOLDIER_BLACK(1)', 'CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'HORSE_RED(6)', 'GENERAL_BLACK(13)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
  Bot 4: ['CHARIOT_BLACK(7)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'CHARIOT_RED(8)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
🔍 STARTER_DEBUG: Looking for GENERAL_RED holder in round 1
🔍 STARTER_DEBUG: Checking player Andy
🔍 STARTER_DEBUG: Player Andy hand: ['SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'ADVISOR_RED(12)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'CANNON_BLACK(3)']
🔍 STARTER_DEBUG: Checking piece 'SOLDIER_RED(2)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'HORSE_BLACK(5)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'CANNON_RED(4)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'ELEPHANT_BLACK(9)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'ADVISOR_RED(12)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'SOLDIER_BLACK(1)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'HORSE_BLACK(5)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'CANNON_BLACK(3)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking player Bot 2
🔍 STARTER_DEBUG: Player Bot 2 hand: ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)', 'CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_RED(4)', 'HORSE_RED(6)', 'ELEPHANT_RED(10)']
🔍 STARTER_DEBUG: Checking piece 'ADVISOR_BLACK(11)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'GENERAL_RED(14)' for GENERAL_RED
✅ STARTER_DEBUG: Found GENERAL_RED in Bot 2's hand!
✅ PREP_STATE_DEBUG: No weak hands - determined new starter: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop started, is_running: True
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: set()
   - Redeal decisions: {}
   - Current weak player: None
✅ PREP_STATE_DEBUG: No weak players, transitioning to DECLARATION
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.PREPARATION to GamePhase.DECLARATION
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.preparation_state.PreparationState object at 0x10ddccad0>
🎯 PREP_STATE_DEBUG: Cleanup phase - current_player: Bot 2
🎯 PREP_STATE_DEBUG: Cleanup phase - round_starter: Bot 2
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.PREPARATION -> GamePhase.DECLARATION
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10ddcccd0>
📢 DECL_STATE_DEBUG: Using round_starter: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase preparation for room 7E13B1
✅ [Room 7E13B1] Game and StateMachine started successfully: op_id=7E13B1_1
✅ [Room 7E13B1] Bot manager registered for 3 bots
✅ Game started in room 7E13B1
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'current_declarer': 'Bot 2', 'reason': 'Declaration phase setup complete - current declarer: Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'current_declarer': 'Bot 2', 'reason': 'Declaration phase setup complete - current declarer: Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Declaration phase setup complete - current declarer: Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current declarer Bot 2 is a bot - triggering declaration
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: ''
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Last declarer '' index: -1
🔍 DECL_PHASE_DEBUG: Starting loop from index 0 to 4
🔍 DECL_PHASE_DEBUG: Checking player 0 (Bot 2), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 2 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {}
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will declare in 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_DISCONNECT: WebSocket client disconnected from room 7E13B1.
INFO:     connection closed
DEBUG_WS: Unregistered connection for room 7E13B1. Remaining connections: 0
DEBUG_WS: Room 7E13B1 has active game - keeping broadcast queue alive
INFO:     ('127.0.0.1', 59231) - "WebSocket /ws/7E13B1" [accepted]
DEBUG_WS: Registered new connection for room 7E13B1. Total connections: 1
INFO:     connection open
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room 7E13B1 with data: {'room_id': '7E13B1'}
DEBUG_WS_RECEIVE: Sent current game phase declaration to client in room 7E13B1
DEBUG_WS_RECEIVE: Sent initial room state to client in room 7E13B1 after client_ready.
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 2 (queue size: 1)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 2 declared 2
🔍 DECL_PHASE_DEBUG: Checking player 1 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 0.8s...
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 3 (queue size: 2)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 1.4s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 3)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 3 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase declaration for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'round_started' for room 7E13B1 with data: {'phase': 'declaration', 'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'round_started' with data: {'phase': 'declaration', 'starter': 'Bot 2'}
🎪 BOT_HANDLER_DEBUG: Handling round start
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Bot 2
🔍 BOT_ROUND_DEBUG: Game current_player: Bot 2
👤 Round starter is human or None: None
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: ''
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Last declarer '' index: -1
🔍 DECL_PHASE_DEBUG: Starting loop from index 0 to 4
🔍 DECL_PHASE_DEBUG: Checking player 0 (Bot 2), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 2 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {}
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will declare in 0.8s...
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 2 (queue size: 4)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 2 declared 2
🔍 DECL_PHASE_DEBUG: Checking player 1 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 1.1s...
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 3 (queue size: 5)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 0.7s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 6)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 3 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 6 actions
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 declared 2
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 2}, 'declaration_total': 2, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Player Bot 2 declared 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 2}, 'declaration_total': 2, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Player Bot 2 declared 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Player Bot 2 declared 2
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current declarer Bot 3 is a bot - triggering declaration
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 2'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 2' index: 0
🔍 DECL_PHASE_DEBUG: Starting loop from index 1 to 4
🔍 DECL_PHASE_DEBUG: Checking player 1 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Bot 2': 2}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 3 (queue size: 1)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Bot 2': 2}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 0.8s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 2)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 3 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 declared 1
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 2, 'declarations': {'Bot 2': 2, 'Bot 3': 1}, 'declaration_total': 3, 'current_declarer': 'Bot 4'}, 'current_declarer': 'Bot 4', 'reason': 'Player Bot 3 declared 1'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 2, 'declarations': {'Bot 2': 2, 'Bot 3': 1}, 'declaration_total': 3, 'current_declarer': 'Bot 4'}, 'current_declarer': 'Bot 4', 'reason': 'Player Bot 3 declared 1'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Player Bot 3 declared 1
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current declarer Bot 4 is a bot - triggering declaration
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 3'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 3' index: 1
🔍 DECL_PHASE_DEBUG: Starting loop from index 2 to 4
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Bot 2': 2, 'Bot 3': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 3)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 3 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 declared 1
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 3, 'declarations': {'Bot 2': 2, 'Bot 3': 1, 'Bot 4': 1}, 'declaration_total': 4, 'current_declarer': 'Andy'}, 'current_declarer': 'Andy', 'reason': 'Player Bot 4 declared 1'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 3, 'declarations': {'Bot 2': 2, 'Bot 3': 1, 'Bot 4': 1}, 'declaration_total': 4, 'current_declarer': 'Andy'}, 'current_declarer': 'Andy', 'reason': 'Player Bot 4 declared 1'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Player Bot 4 declared 1
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current declarer Andy is human - waiting
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 2
Wrong player turn: Bot 2, expected: Andy
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 2}, timestamp=datetime.datetime(2025, 6, 28, 16, 48, 39, 225696), sequence_id=3, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 3
Wrong player turn: Bot 3, expected: Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 1}, timestamp=datetime.datetime(2025, 6, 28, 16, 48, 40, 537057), sequence_id=4, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
Wrong player turn: Bot 4, expected: Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 1}, timestamp=datetime.datetime(2025, 6, 28, 16, 48, 41, 463153), sequence_id=5, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 3 actions
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 3
Wrong player turn: Bot 3, expected: Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 1}, timestamp=datetime.datetime(2025, 6, 28, 16, 48, 42, 807060), sequence_id=6, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
Wrong player turn: Bot 4, expected: Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 1}, timestamp=datetime.datetime(2025, 6, 28, 16, 48, 43, 845779), sequence_id=7, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
Wrong player turn: Bot 4, expected: Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.DECLARE: 'declare'>, payload={'value': 1}, timestamp=datetime.datetime(2025, 6, 28, 16, 48, 44, 709997), sequence_id=8, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Process loop iteration 50
🔍 STATE_MACHINE_DEBUG: Process loop iteration 100
🔍 STATE_MACHINE_DEBUG: Process loop iteration 150
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154543177}
DEBUG_WS_RECEIVE: Received event 'declare' from client in room 7E13B1 with data: {'value': 3, 'player_name': 'Andy'}
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Andy (queue size: 1)
✅ Declaration queued: Andy -> 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy declared 3
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.DECLARATION to GamePhase.TURN
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10ddcccd0>
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.DECLARATION -> GamePhase.TURN
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.turn_state.TurnState object at 0x10ddccd90>
🎯 NEW_TURN_DEBUG: Round 1, Turn 1 starting with starter Bot 2
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 2
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154544209}
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🤖 Bot Bot 2 will play 1 pieces: ['GENERAL_RED(14)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 1 started with starter Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 2', 'reason': 'New turn 1 started with starter Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 2', 'reason': 'New turn 1 started with starter Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 1 started with starter Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase turn for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 2
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🤖 Bot Bot 2 will play 1 pieces: ['GENERAL_RED(14)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['GENERAL_RED(14)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154544.320951}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154544.320951}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_BLACK(13)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_BLACK(13)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [GENERAL_RED(14)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 49, 4, 874832), sequence_id=11, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['GENERAL_BLACK(13)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154544.320951}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154545.8284}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154544.320951}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154545.8284}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_BLACK(11)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.5s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_BLACK(11)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [GENERAL_BLACK(13)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_BLACK(13)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 49, 6, 438811), sequence_id=13, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154544.320951}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154545.8284}, 'Bot 4': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154547.203574}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154544.320951}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154545.8284}, 'Bot 4': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154547.203574}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_BLACK(11)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 49, 7, 708348), sequence_id=15, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 200
🔍 STATE_MACHINE_DEBUG: Process loop iteration 250
🔍 STATE_MACHINE_DEBUG: Process loop iteration 300
🔍 STATE_MACHINE_DEBUG: Process loop iteration 350
🔍 STATE_MACHINE_DEBUG: Process loop iteration 400
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [3], 'player_name': 'Andy', 'play_value': 9}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [3]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 8
🎯 WS_PLAY_DEBUG: Added piece at index 3: ELEPHANT_BLACK(9)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ELEPHANT_BLACK(9)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [3]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 1 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 1 Winner determined: Bot 2
🎯 CAPTURED_PILES_DEBUG: Bot 2 captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 2
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154544.320951}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154545.8284}, 'Bot 4': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154547.203574}, 'Andy': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154569.58789}}, 'turn_complete': True, 'current_turn_number': 1, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154544.320951}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154545.8284}, 'Bot 4': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154547.203574}, 'Andy': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154569.58789}}, 'turn_complete': True, 'current_turn_number': 1, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 7
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154573179}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154574211}
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 2
🎯 NEW_TURN_DEBUG: Round 1, Turn 2 starting with starter Bot 2
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 2
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 0.9s...
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🤖 Bot Bot 2 will play 1 pieces: ['ADVISOR_BLACK(11)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 2 started with starter Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 2 started with starter Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 2 started with starter Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 2 started with starter Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [ELEPHANT_BLACK(9)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154577.574209}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154577.574209}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.5s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_RED(12)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['ADVISOR_RED(12)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154577.574209}, 'Bot 3': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154578.181862}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154577.574209}, 'Bot 3': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154578.181862}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_BLACK(9)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_BLACK(9)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [ADVISOR_RED(12)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_RED(12)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 49, 38, 806151), sequence_id=19, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154577.574209}, 'Bot 3': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154578.181862}, 'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154579.769811}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154577.574209}, 'Bot 3': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154578.181862}, 'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154579.769811}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ELEPHANT_BLACK(9)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ELEPHANT_BLACK(9)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 49, 40, 521638), sequence_id=21, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 450
🔍 STATE_MACHINE_DEBUG: Process loop iteration 500
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [2], 'player_name': 'Andy', 'play_value': 4}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [2]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 7
🎯 WS_PLAY_DEBUG: Added piece at index 2: CANNON_RED(4)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['CANNON_RED(4)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [2]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['CANNON_RED(4)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 2 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 2 Winner determined: Bot 3
🎯 CAPTURED_PILES_DEBUG: Bot 3 captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 3
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154577.574209}, 'Bot 3': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154578.181862}, 'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154579.769811}, 'Andy': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154593.122187}}, 'turn_complete': True, 'current_turn_number': 2, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154577.574209}, 'Bot 3': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154578.181862}, 'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154579.769811}, 'Andy': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154593.122187}}, 'turn_complete': True, 'current_turn_number': 2, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 3'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 3
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 6
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 6
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 6
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 6
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 3
🎯 NEW_TURN_DEBUG: Round 1, Turn 3 starting with starter Bot 3
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 3 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 3'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 3
🤖 Bot Bot 3 will play first
🤖 Bot Bot 3 thinking for 0.7s...
🤖 Bot Bot 3 choosing first play...
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
🤖 Bot Bot 3 will play 1 pieces: ['ELEPHANT_RED(10)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 3 started with starter Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 3', 'reason': 'New turn 3 started with starter Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 3', 'reason': 'New turn 3 started with starter Bot 3'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 3 started with starter Bot 3
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 3', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 3', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [CANNON_RED(4)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['ELEPHANT_RED(10)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 3 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 4', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154600.847829}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 4', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154600.847829}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [ELEPHANT_RED(10)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['CHARIOT_RED(8)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 3 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Andy', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154600.847829}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154601.584693}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Andy', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154600.847829}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154601.584693}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [CHARIOT_RED(8)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 50, 2, 477492), sequence_id=25, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154603180}
🔍 STATE_MACHINE_DEBUG: Process loop iteration 550
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154604212}
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [5], 'player_name': 'Andy', 'play_value': 3}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [5]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 6
🎯 WS_PLAY_DEBUG: Added piece at index 5: CANNON_BLACK(3)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['CANNON_BLACK(3)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [5]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['CANNON_BLACK(3)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 1, Turn 3 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154600.847829}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154601.584693}, 'Andy': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154608.330077}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154600.847829}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154601.584693}, 'Andy': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154608.330077}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_RED(10)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_RED(10)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [CANNON_BLACK(3)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['ELEPHANT_RED(10)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 3 - Bot 2 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 3 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 3 Winner determined: Bot 3
🎯 CAPTURED_PILES_DEBUG: Bot 3 captured_piles += 1 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 3
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154600.847829}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154601.584693}, 'Andy': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154608.330077}, 'Bot 2': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154609.297277}}, 'turn_complete': True, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Turn completed - winner: Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154600.847829}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154601.584693}, 'Andy': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154608.330077}, 'Bot 2': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154609.297277}}, 'turn_complete': True, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Turn completed - winner: Bot 3'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 3
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 2, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 5
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 3
🎯 NEW_TURN_DEBUG: Round 1, Turn 4 starting with starter Bot 3
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 3 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 3'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 3
🤖 Bot Bot 3 will play first
🤖 Bot Bot 3 thinking for 0.7s...
🤖 Bot Bot 3 choosing first play...
🤖 BOT chooses to play SINGLE (7 pts): CHARIOT
🤖 Bot Bot 3 will play 1 pieces: ['CHARIOT_BLACK(7)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 4 started with starter Bot 3
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 3', 'reason': 'New turn 4 started with starter Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 3', 'reason': 'New turn 4 started with starter Bot 3'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 4 started with starter Bot 3
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ELEPHANT_RED(10)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ELEPHANT_RED(10)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 50, 9, 965624), sequence_id=28, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['CHARIOT_BLACK(7)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 4 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 4', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154617.816784}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 4', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154617.816784}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [CHARIOT_BLACK(7)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['CHARIOT_RED(8)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 4 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Andy', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154617.816784}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154618.91064}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Andy', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154617.816784}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154618.91064}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [CHARIOT_RED(8)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 50, 19, 670950), sequence_id=31, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 600
🔍 STATE_MACHINE_DEBUG: Process loop iteration 650
🔍 STATE_MACHINE_DEBUG: Process loop iteration 700
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [0], 'player_name': 'Andy', 'play_value': 2}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 5
🎯 WS_PLAY_DEBUG: Added piece at index 0: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_RED(2)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [0]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 1, Turn 4 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154617.816784}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154618.91064}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154632.291443}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154617.816784}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154618.91064}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154632.291443}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (6 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_RED(6)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.5s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154633180}
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (6 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_RED(6)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['HORSE_RED(6)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 4 - Bot 2 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 4 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 4 Winner determined: Bot 4
🎯 CAPTURED_PILES_DEBUG: Bot 4 captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 4
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154617.816784}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154618.91064}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154632.291443}, 'Bot 2': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154632.985368}}, 'turn_complete': True, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Turn completed - winner: Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 2', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154617.816784}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154618.91064}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154632.291443}, 'Bot 2': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154632.985368}}, 'turn_complete': True, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Turn completed - winner: Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 2, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 4
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154634213}
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 4
🎯 NEW_TURN_DEBUG: Round 1, Turn 5 starting with starter Bot 4
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 4 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 4
🤖 Bot Bot 4 will play first
🤖 Bot Bot 4 thinking for 0.5s...
🤖 Bot Bot 4 choosing first play...
🤖 BOT chooses to play SINGLE (7 pts): CHARIOT
🤖 Bot Bot 4 will play 1 pieces: ['CHARIOT_BLACK(7)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 5
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 5 started with starter Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 5 started with starter Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 5 started with starter Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 5 started with starter Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [HORSE_RED(6)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [HORSE_RED(6)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 50, 33, 510707), sequence_id=34, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['CHARIOT_BLACK(7)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 5 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154641.158261}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154641.158261}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [CHARIOT_BLACK(7)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 750
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [2], 'player_name': 'Andy', 'play_value': 1}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [2]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 4
🎯 WS_PLAY_DEBUG: Added piece at index 2: SOLDIER_BLACK(1)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_BLACK(1)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [2]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 1, Turn 5 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154641.158261}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154645.624401}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154641.158261}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154645.624401}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (4 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (4 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['CANNON_RED(4)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 5 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154641.158261}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154645.624401}, 'Bot 2': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154646.403945}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154641.158261}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154645.624401}, 'Bot 2': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154646.403945}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (6 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_RED(6)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (6 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_RED(6)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [CANNON_RED(4)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 50, 47, 238650), sequence_id=38, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['HORSE_RED(6)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 5 - Bot 3 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 5 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 5 Winner determined: Bot 4
🎯 CAPTURED_PILES_DEBUG: Bot 4 captured_piles += 1 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 4
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154641.158261}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154645.624401}, 'Bot 2': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154646.403945}, 'Bot 3': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154648.281226}}, 'turn_complete': True, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154641.158261}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154645.624401}, 'Bot 2': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154646.403945}, 'Bot 3': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154648.281226}}, 'turn_complete': True, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 3, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 3
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 3
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 3
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 3
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 4
🎯 NEW_TURN_DEBUG: Round 1, Turn 6 starting with starter Bot 4
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 4 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 4
🤖 Bot Bot 4 will play first
🤖 Bot Bot 4 thinking for 0.8s...
🤖 Bot Bot 4 choosing first play...
🤖 BOT chooses to play PAIR (4 pts): SOLDIER, SOLDIER
🤖 Bot Bot 4 will play 2 pieces: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 6
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 6 started with starter Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 6 started with starter Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 6 started with starter Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 6 started with starter Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [HORSE_RED(6)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [HORSE_RED(6)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 50, 49, 258611), sequence_id=40, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 2 pieces: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 2
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 6 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154657.119411}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154657.119411}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_RED(2), SOLDIER_RED(2)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 800
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154663180}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154664214}
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [0, 2], 'player_name': 'Andy', 'play_value': 10}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0, 2]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 3
🎯 WS_PLAY_DEBUG: Added piece at index 0: HORSE_BLACK(5)
🎯 WS_PLAY_DEBUG: Added piece at index 2: HORSE_BLACK(5)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['HORSE_BLACK(5)', 'HORSE_BLACK(5)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [0, 2]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Andy playing 2 pieces: ['HORSE_BLACK(5)', 'HORSE_BLACK(5)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 1, Turn 6 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154657.119411}, 'Andy': {'pieces': ['HORSE_BLACK(5)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154664.376884}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154657.119411}, 'Andy': {'pieces': ['HORSE_BLACK(5)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154664.376884}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER
    🔍 Final play: ['SOLDIER', 'SOLDIER']
    🧠 Hand left: ['CANNON', 'SOLDIER', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER
    🔍 Final play: ['SOLDIER', 'SOLDIER']
    🧠 Hand left: ['CANNON', 'SOLDIER', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [HORSE_BLACK(5), HORSE_BLACK(5)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 6 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154657.119411}, 'Andy': {'pieces': ['HORSE_BLACK(5)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154664.376884}, 'Bot 2': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154665.210021}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154657.119411}, 'Andy': {'pieces': ['HORSE_BLACK(5)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154664.376884}, 'Bot 2': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154665.210021}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (2 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (2 pts): SOLDIER, SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [SOLDIER_BLACK(1), SOLDIER_RED(2)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1), SOLDIER_RED(2)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 51, 6, 40473), sequence_id=44, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 2 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 6 - Bot 3 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 6 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 6 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 2 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 2 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154657.119411}, 'Andy': {'pieces': ['HORSE_BLACK(5)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154664.376884}, 'Bot 2': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154665.210021}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154666.755098}}, 'turn_complete': True, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154657.119411}, 'Andy': {'pieces': ['HORSE_BLACK(5)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154664.376884}, 'Bot 2': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154665.210021}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154666.755098}}, 'turn_complete': True, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 3, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 1
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 1
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 1
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 1
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Andy
🎯 NEW_TURN_DEBUG: Round 1, Turn 7 starting with starter Andy
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Andy for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Andy'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Andy
👤 Human player Andy starts, waiting for their play
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 7
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 7 started with starter Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'New turn 7 started with starter Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'New turn 7 started with starter Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 7 started with starter Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'Player Bot 3 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'Player Bot 3 played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1)], 'piece_count': 2, 'required_count': None, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 51, 7, 694793), sequence_id=46, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 850
🔍 STATE_MACHINE_DEBUG: Process loop iteration 900
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [0], 'player_name': 'Andy', 'play_value': 12}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 1
🎯 WS_PLAY_DEBUG: Added piece at index 0: ADVISOR_RED(12)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ADVISOR_RED(12)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [0]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['ADVISOR_RED(12)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 1, Turn 7 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154682.603398}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154682.603398}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (3 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_BLACK(3)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (3 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_BLACK(3)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [ADVISOR_RED(12)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['CANNON_BLACK(3)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 7 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154682.603398}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154683.624005}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154682.603398}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154683.624005}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [CANNON_BLACK(3)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_BLACK(3)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 51, 24, 604870), sequence_id=49, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 7 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154682.603398}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154683.624005}, 'Bot 3': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154685.503466}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154682.603398}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154683.624005}, 'Bot 3': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154685.503466}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 2, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 51, 26, 116727), sequence_id=51, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 7 - Bot 4 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 7 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 7 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 1 = 3
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154682.603398}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154683.624005}, 'Bot 3': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154685.503466}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154687.172895}}, 'turn_complete': True, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154682.603398}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154683.624005}, 'Bot 3': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154685.503466}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154687.172895}}, 'turn_complete': True, 'current_turn_number': 7, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 4, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = True
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 0
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: None, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: None
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: None
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 4, turn should be complete
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': None, 'turn_complete': True}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected None
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 51, 28, 80601), sequence_id=53, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.TURN to GamePhase.SCORING
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.turn_state.TurnState object at 0x10ddccd90>
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = True
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 0
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.TURN -> GamePhase.SCORING
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.scoring_state.ScoringState object at 0x10ddccfd0>
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Bot 2': 2, 'Bot 3': 1, 'Bot 4': 1, 'Andy': 3}
📋 SCORING_FIX_DEBUG: Andy - declared: 3, actual: 3
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 3, Actual: 3
   📊 Base Score: 8, Multiplier: 1x, Final: 8
   💯 Total Score: 8
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 2, actual: 1
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 2, Actual: 1
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -1
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 1, actual: 2
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 1, Actual: 2
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -1
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 2
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 2
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -1
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 3, 'actual': 3, 'base_score': 8, 'multiplier': 1, 'final_score': 8, 'total_score': 8}, 'Bot 2': {'declared': 2, 'actual': 1, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -1}, 'Bot 3': {'declared': 1, 'actual': 2, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -1}, 'Bot 4': {'declared': 1, 'actual': 2, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -1}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': 8, 'Bot 2': -1, 'Bot 3': -1, 'Bot 4': -1}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 3, 'captured_piles': 3}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 2, 'captured_piles': 1}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 1, 'captured_piles': 2}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 1, 'captured_piles': 2}]
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Scoring calculated for round 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
⏰ SCORING_DELAY_DEBUG: Starting 7-second display delay...
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase scoring for room 7E13B1
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 STATE_MACHINE_DEBUG: Process loop iteration 950
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154693181}
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154694214}
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
⏰ SCORING_DELAY_DEBUG: 7-second delay complete - setting display_delay_complete = True
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: True
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Ready to transition to PREPARATION
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.SCORING to GamePhase.PREPARATION
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.scoring_state.ScoringState object at 0x10ddccfd0>
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.SCORING -> GamePhase.PREPARATION
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.preparation_state.PreparationState object at 0x10ddccad0>
🎴 PREP_STATE_DEBUG: Setup phase starting for room 7E13B1
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
🎴 PREP_STATE_DEBUG: Using guaranteed no redeal dealing
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: ADVISOR_RED(12)
  → Bot 3 gets strong piece: GENERAL_BLACK(13)
  → Bot 4 gets strong piece: ELEPHANT_RED(10)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['SOLDIER_BLACK(1)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'CHARIOT_RED(8)', 'ADVISOR_BLACK(11)', 'HORSE_BLACK(5)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 2: ['CHARIOT_BLACK(7)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)', 'GENERAL_RED(14)', 'CANNON_RED(4)', 'ELEPHANT_BLACK(9)', 'SOLDIER_BLACK(1)', 'ADVISOR_RED(12)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: True
  Bot 3: ['HORSE_BLACK(5)', 'CANNON_RED(4)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_RED(6)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 4: ['CANNON_BLACK(3)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'ELEPHANT_RED(10)', 'CHARIOT_BLACK(7)', 'ELEPHANT_RED(10)', 'ADVISOR_BLACK(11)', 'ELEPHANT_BLACK(9)']
    → Strong pieces (>9): 3
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase preparation for room 7E13B1
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: set()
   - Redeal decisions: {}
   - Current weak player: None
✅ PREP_STATE_DEBUG: No weak players, transitioning to DECLARATION
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.PREPARATION to GamePhase.DECLARATION
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.preparation_state.PreparationState object at 0x10ddccad0>
🎯 PREP_STATE_DEBUG: Cleanup phase - current_player: Andy
🎯 PREP_STATE_DEBUG: Cleanup phase - round_starter: Andy
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.PREPARATION -> GamePhase.DECLARATION
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10ddcccd0>
📢 DECL_STATE_DEBUG: Using round_starter: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Andy
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 8 pts', 'Bot 2 - -1 pts', 'Bot 3 - -1 pts', 'Bot 4 - -1 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Andy'}, 'current_declarer': 'Andy', 'reason': 'Declaration phase setup complete - current declarer: Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 8 pts', 'Bot 2 - -1 pts', 'Bot 3 - -1 pts', 'Bot 4 - -1 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Andy'}, 'current_declarer': 'Andy', 'reason': 'Declaration phase setup complete - current declarer: Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Declaration phase setup complete - current declarer: Andy
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current declarer Andy is human - waiting
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase declaration for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'round_started' for room 7E13B1 with data: {'phase': 'declaration', 'starter': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'round_started' with data: {'phase': 'declaration', 'starter': 'Andy'}
🎪 BOT_HANDLER_DEBUG: Handling round start
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Andy
🔍 BOT_ROUND_DEBUG: Game current_player: Andy
👤 Round starter is human or None: None
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: ''
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer '' index: -1
🔍 DECL_PHASE_DEBUG: Starting loop from index 0 to 4
🔍 DECL_PHASE_DEBUG: Checking player 0 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1000
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1050
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1100
DEBUG_WS_RECEIVE: Received event 'declare' from client in room 7E13B1 with data: {'value': 2, 'player_name': 'Andy'}
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Andy (queue size: 1)
✅ Declaration queued: Andy -> 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy declared 2
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 8 pts', 'Bot 2 - -1 pts', 'Bot 3 - -1 pts', 'Bot 4 - -1 pts'], 'current_declarer_index': 1, 'declarations': {'Andy': 2}, 'declaration_total': 2, 'current_declarer': 'Bot 2'}, 'current_declarer': 'Bot 2', 'reason': 'Player Andy declared 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 8 pts', 'Bot 2 - -1 pts', 'Bot 3 - -1 pts', 'Bot 4 - -1 pts'], 'current_declarer_index': 1, 'declarations': {'Andy': 2}, 'declaration_total': 2, 'current_declarer': 'Bot 2'}, 'current_declarer': 'Bot 2', 'reason': 'Player Andy declared 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Player Andy declared 2
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current declarer Bot 2 is a bot - triggering declaration
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Andy'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Andy' index: 0
🔍 DECL_PHASE_DEBUG: Starting loop from index 1 to 4
🔍 DECL_PHASE_DEBUG: Checking player 1 (Bot 2), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 2 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 2}
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will declare in 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 2 (queue size: 1)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 2 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 2}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 0.7s...
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 3 (queue size: 2)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 2
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 2}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 1.0s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 3)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 3 actions
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 declared 1
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 8 pts', 'Bot 2 - -1 pts', 'Bot 3 - -1 pts', 'Bot 4 - -1 pts'], 'current_declarer_index': 2, 'declarations': {'Andy': 2, 'Bot 2': 1}, 'declaration_total': 3, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Player Bot 2 declared 1'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 8 pts', 'Bot 2 - -1 pts', 'Bot 3 - -1 pts', 'Bot 4 - -1 pts'], 'current_declarer_index': 2, 'declarations': {'Andy': 2, 'Bot 2': 1}, 'declaration_total': 3, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Player Bot 2 declared 1'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Player Bot 2 declared 1
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current declarer Bot 3 is a bot - triggering declaration
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 2'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 2' index: 1
🔍 DECL_PHASE_DEBUG: Starting loop from index 2 to 4
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 2, 'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 3 (queue size: 1)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 2
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 2, 'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 0.9s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 2)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 declared 2
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 8 pts', 'Bot 2 - -1 pts', 'Bot 3 - -1 pts', 'Bot 4 - -1 pts'], 'current_declarer_index': 3, 'declarations': {'Andy': 2, 'Bot 2': 1, 'Bot 3': 2}, 'declaration_total': 5, 'current_declarer': 'Bot 4'}, 'current_declarer': 'Bot 4', 'reason': 'Player Bot 3 declared 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 8 pts', 'Bot 2 - -1 pts', 'Bot 3 - -1 pts', 'Bot 4 - -1 pts'], 'current_declarer_index': 3, 'declarations': {'Andy': 2, 'Bot 2': 1, 'Bot 3': 2}, 'declaration_total': 5, 'current_declarer': 'Bot 4'}, 'current_declarer': 'Bot 4', 'reason': 'Player Bot 3 declared 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Player Bot 3 declared 2
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current declarer Bot 4 is a bot - triggering declaration
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 3'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 3' index: 2
🔍 DECL_PHASE_DEBUG: Starting loop from index 3 to 4
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 2, 'Bot 2': 1, 'Bot 3': 2}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 3)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 declared 1
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.DECLARATION to GamePhase.TURN
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10ddcccd0>
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.DECLARATION -> GamePhase.TURN
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.turn_state.TurnState object at 0x10ddccd90>
🎯 NEW_TURN_DEBUG: Round 2, Turn 1 starting with starter Andy
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Andy for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Andy'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Andy
👤 Human player Andy starts, waiting for their play
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 1 started with starter Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Andy', 'reason': 'New turn 1 started with starter Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Andy', 'reason': 'New turn 1 started with starter Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 1 started with starter Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase turn for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Andy'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Andy
👤 Human player Andy starts, waiting for their play
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 3 actions
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 3
Action declare not allowed in turn
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
Action declare not allowed in turn
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
Action declare not allowed in turn
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1150
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1200
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154723183}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154724215}
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1250
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1300
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [5], 'player_name': 'Andy', 'play_value': 8}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [5]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 8
🎯 WS_PLAY_DEBUG: Added piece at index 5: CHARIOT_RED(8)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['CHARIOT_RED(8)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [5]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['CHARIOT_RED(8)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 2, Turn 1 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154737.874958}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154737.874958}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_RED(14)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (14 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_RED(14)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [CHARIOT_RED(8)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['GENERAL_RED(14)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 1 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154737.874958}, 'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154738.768875}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154737.874958}, 'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154738.768875}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_BLACK(13)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (13 pts): GENERAL
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['GENERAL_BLACK(13)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [GENERAL_RED(14)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 52, 19, 744775), sequence_id=63, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['GENERAL_BLACK(13)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 1 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154737.874958}, 'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154738.768875}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154740.826965}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154737.874958}, 'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154738.768875}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154740.826965}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_BLACK(11)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ADVISOR_BLACK(11)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [GENERAL_BLACK(13)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [GENERAL_BLACK(13)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 52, 21, 557209), sequence_id=65, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1350
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 1 - Bot 4 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 1 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 1 Winner determined: Bot 2
🎯 CAPTURED_PILES_DEBUG: Bot 2 captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 2
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154737.874958}, 'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154738.768875}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154740.826965}, 'Bot 4': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154742.649964}}, 'turn_complete': True, 'current_turn_number': 1, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154737.874958}, 'Bot 2': {'pieces': ['GENERAL_RED(14)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154738.768875}, 'Bot 3': {'pieces': ['GENERAL_BLACK(13)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154740.826965}, 'Bot 4': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154742.649964}}, 'turn_complete': True, 'current_turn_number': 1, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 4, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 7
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 7
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 2
🎯 NEW_TURN_DEBUG: Round 2, Turn 2 starting with starter Bot 2
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 2
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 0.8s...
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🤖 Bot Bot 2 will play 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 2 started with starter Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 2 started with starter Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 2 started with starter Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 2 started with starter Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Bot 2
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_BLACK(11)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 52, 23, 343892), sequence_id=67, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['ADVISOR_RED(12)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 2 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154751.298883}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154751.298883}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154753183}
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (8 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_RED(8)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ADVISOR_RED(12)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['CHARIOT_RED(8)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 2 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154751.298883}, 'Bot 3': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154752.342444}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154751.298883}, 'Bot 3': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154752.342444}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_RED(10)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154754216}
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_RED(10)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [CHARIOT_RED(8)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 52, 33, 222693), sequence_id=70, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ELEPHANT_RED(10)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 2 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154751.298883}, 'Bot 3': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154752.342444}, 'Bot 4': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154754.111322}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154751.298883}, 'Bot 3': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154752.342444}, 'Bot 4': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154754.111322}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ELEPHANT_RED(10)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ELEPHANT_RED(10)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 52, 34, 775516), sequence_id=72, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1400
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1450
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1500
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1550
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1600
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154783184}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154784216}
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1650
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1700
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1750
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1800
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1850
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [1], 'player_name': 'Andy', 'play_value': 6}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 7
🎯 WS_PLAY_DEBUG: Added piece at index 1: HORSE_RED(6)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['HORSE_RED(6)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [1]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['HORSE_RED(6)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 2 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 2 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 2 Winner determined: Bot 2
🎯 CAPTURED_PILES_DEBUG: Bot 2 captured_piles += 1 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 2
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154751.298883}, 'Bot 3': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154752.342444}, 'Bot 4': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154754.111322}, 'Andy': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154805.053513}}, 'turn_complete': True, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154751.298883}, 'Bot 3': {'pieces': ['CHARIOT_RED(8)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154752.342444}, 'Bot 4': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154754.111322}, 'Andy': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154805.053513}}, 'turn_complete': True, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 6
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 6
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 6
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 6
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 2
🎯 NEW_TURN_DEBUG: Round 2, Turn 3 starting with starter Bot 2
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 2
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 1.0s...
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
🤖 Bot Bot 2 will play 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 3 started with starter Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 3 started with starter Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 3 started with starter Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 3 started with starter Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [HORSE_RED(6)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154813184}
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 3 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.132036}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.132036}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.5s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (6 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_RED(6)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154814218}
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (6 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_RED(6)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ELEPHANT_BLACK(9)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['HORSE_RED(6)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 3 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.132036}, 'Bot 3': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.772256}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.132036}, 'Bot 3': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.772256}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_RED(10)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (10 pts): ELEPHANT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['ELEPHANT_RED(10)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [HORSE_RED(6)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [HORSE_RED(6)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 53, 34, 734386), sequence_id=76, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ELEPHANT_RED(10)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 3 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.132036}, 'Bot 3': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.772256}, 'Bot 4': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154815.438155}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.132036}, 'Bot 3': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.772256}, 'Bot 4': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154815.438155}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ELEPHANT_RED(10)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ELEPHANT_RED(10)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 53, 36, 414901), sequence_id=78, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1900
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [5], 'player_name': 'Andy', 'play_value': 5}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [5]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 6
🎯 WS_PLAY_DEBUG: Added piece at index 5: HORSE_BLACK(5)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['HORSE_BLACK(5)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [5]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['HORSE_BLACK(5)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 3 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 3 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 3 Winner determined: Bot 4
🎯 CAPTURED_PILES_DEBUG: Bot 4 captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 4
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.132036}, 'Bot 3': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.772256}, 'Bot 4': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154815.438155}, 'Andy': {'pieces': ['HORSE_BLACK(5)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154825.059257}}, 'turn_complete': True, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.132036}, 'Bot 3': {'pieces': ['HORSE_RED(6)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154813.772256}, 'Bot 4': {'pieces': ['ELEPHANT_RED(10)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154815.438155}, 'Andy': {'pieces': ['HORSE_BLACK(5)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154825.059257}}, 'turn_complete': True, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 5
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 5
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 4
🎯 NEW_TURN_DEBUG: Round 2, Turn 4 starting with starter Bot 4
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 4 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 4
🤖 Bot Bot 4 will play first
🤖 Bot Bot 4 thinking for 0.9s...
🤖 Bot Bot 4 choosing first play...
🤖 BOT chooses to play SINGLE (9 pts): ELEPHANT
🤖 Bot Bot 4 will play 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 4 started with starter Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 4 started with starter Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 4 started with starter Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 4 started with starter Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [HORSE_BLACK(5)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 4 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154833.058936}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154833.058936}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ELEPHANT_BLACK(9)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 1950
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2000
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154843186}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154844218}
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2050
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [1], 'player_name': 'Andy', 'play_value': 2}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 5
🎯 WS_PLAY_DEBUG: Added piece at index 1: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_RED(2)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [1]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 2, Turn 4 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154833.058936}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.052638}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154833.058936}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.052638}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (7 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_BLACK(7)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (7 pts): CHARIOT
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CHARIOT_BLACK(7)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['CHARIOT_BLACK(7)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 4 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154833.058936}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.052638}, 'Bot 2': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.761815}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154833.058936}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.052638}, 'Bot 2': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.761815}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (5 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_BLACK(5)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (5 pts): HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_BLACK(5)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [CHARIOT_BLACK(7)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_BLACK(7)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 54, 9, 651807), sequence_id=83, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['HORSE_BLACK(5)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 4 - Bot 3 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 4 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 4 Winner determined: Bot 4
🎯 CAPTURED_PILES_DEBUG: Bot 4 captured_piles += 1 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 4
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154833.058936}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.052638}, 'Bot 2': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.761815}, 'Bot 3': {'pieces': ['HORSE_BLACK(5)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154850.669939}}, 'turn_complete': True, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ELEPHANT_BLACK(9)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154833.058936}, 'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.052638}, 'Bot 2': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154848.761815}, 'Bot 3': {'pieces': ['HORSE_BLACK(5)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154850.669939}}, 'turn_complete': True, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 3, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 4
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 4
🎯 NEW_TURN_DEBUG: Round 2, Turn 5 starting with starter Bot 4
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 4 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 4
🤖 Bot Bot 4 will play first
🤖 Bot Bot 4 thinking for 0.9s...
🤖 Bot Bot 4 choosing first play...
🤖 BOT chooses to play SINGLE (7 pts): CHARIOT
🤖 Bot Bot 4 will play 1 pieces: ['CHARIOT_BLACK(7)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 5
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 5 started with starter Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 5 started with starter Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 5 started with starter Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 5 started with starter Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [HORSE_BLACK(5)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [HORSE_BLACK(5)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 54, 11, 279967), sequence_id=85, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['CHARIOT_BLACK(7)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 5 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154859.293873}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154859.293873}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [CHARIOT_BLACK(7)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2100
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2150
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [3], 'player_name': 'Andy', 'play_value': 11}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [3]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 4
🎯 WS_PLAY_DEBUG: Added piece at index 3: ADVISOR_BLACK(11)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ADVISOR_BLACK(11)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [3]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 2, Turn 5 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154859.293873}, 'Andy': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154868.437946}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154859.293873}, 'Andy': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154868.437946}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (4 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (4 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['CANNON_RED(4)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 5 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154859.293873}, 'Andy': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154868.437946}, 'Bot 2': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154869.49571}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154859.293873}, 'Andy': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154868.437946}, 'Bot 2': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154869.49571}}, 'turn_complete': False, 'current_turn_number': 5, 'winner': 'Bot 4', 'piles_won': 1, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (4 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (4 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [CANNON_RED(4)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 54, 30, 317371), sequence_id=89, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['CANNON_RED(4)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 5 - Bot 3 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 5 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 5 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 1 = 1
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154859.293873}, 'Andy': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154868.437946}, 'Bot 2': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154869.49571}, 'Bot 3': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154871.128039}}, 'turn_complete': True, 'current_turn_number': 5, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['CHARIOT_BLACK(7)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154859.293873}, 'Andy': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154868.437946}, 'Bot 2': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154869.49571}, 'Bot 3': {'pieces': ['CANNON_RED(4)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154871.128039}}, 'turn_complete': True, 'current_turn_number': 5, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 3, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 3
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 3
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 3
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 3
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154873187}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154874219}
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Andy
🎯 NEW_TURN_DEBUG: Round 2, Turn 6 starting with starter Andy
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Andy for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Andy'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Andy
👤 Human player Andy starts, waiting for their play
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 6
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 6 started with starter Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'New turn 6 started with starter Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'New turn 6 started with starter Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 6 started with starter Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [CANNON_RED(4)], 'piece_count': 1, 'required_count': None, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Andy
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 54, 32, 70860), sequence_id=91, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2200
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [2], 'player_name': 'Andy', 'play_value': 2}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [2]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 3
🎯 WS_PLAY_DEBUG: Added piece at index 2: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_RED(2)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [2]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 2, Turn 6 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154883.955621}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154883.955621}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (3 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_BLACK(3)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (3 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_BLACK(3)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['CANNON_BLACK(3)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 6 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154883.955621}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154884.69151}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154883.955621}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154884.69151}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.5s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [CANNON_BLACK(3)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_BLACK(3)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 54, 45, 543981), sequence_id=94, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 6 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154883.955621}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154884.69151}, 'Bot 3': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154886.255193}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154883.955621}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154884.69151}, 'Bot 3': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154886.255193}}, 'turn_complete': False, 'current_turn_number': 6, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (3 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_BLACK(3)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (3 pts): CANNON
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['CANNON_BLACK(3)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 54, 46, 788320), sequence_id=96, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['CANNON_BLACK(3)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 6 - Bot 4 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 6 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 6 Winner determined: Bot 2
🎯 CAPTURED_PILES_DEBUG: Bot 2 captured_piles += 1 = 3
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 2
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154883.955621}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154884.69151}, 'Bot 3': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154886.255193}, 'Bot 4': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154887.842787}}, 'turn_complete': True, 'current_turn_number': 6, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 1, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154883.955621}, 'Bot 2': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154884.69151}, 'Bot 3': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154886.255193}, 'Bot 4': {'pieces': ['CANNON_BLACK(3)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154887.842787}}, 'turn_complete': True, 'current_turn_number': 6, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 4, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 2
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 2
🎯 NEW_TURN_DEBUG: Round 2, Turn 7 starting with starter Bot 2
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 2
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 0.8s...
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🤖 Bot Bot 2 will play 1 pieces: ['SOLDIER_RED(2)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 7
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 7 started with starter Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 7 started with starter Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 7 started with starter Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 7 started with starter Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [CANNON_BLACK(3)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Bot 2
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CANNON_BLACK(3)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 54, 48, 526051), sequence_id=98, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 7 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154896.478265}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154896.478265}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 7 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154896.478265}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154897.51443}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154896.478265}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154897.51443}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (2 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_RED(2)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 54, 58, 489284), sequence_id=101, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 7 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154896.478265}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154897.51443}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154899.53142}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154896.478265}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154897.51443}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154899.53142}}, 'turn_complete': False, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_RED(2)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 55, 0, 479916), sequence_id=103, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2250
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154903188}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154904220}
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [0], 'player_name': 'Andy', 'play_value': 1}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 2
🎯 WS_PLAY_DEBUG: Added piece at index 0: SOLDIER_BLACK(1)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_BLACK(1)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [0]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 7 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 7 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 7 Winner determined: Bot 2
🎯 CAPTURED_PILES_DEBUG: Bot 2 captured_piles += 1 = 4
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Bot 2
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154896.478265}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154897.51443}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154899.53142}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154907.000016}}, 'turn_complete': True, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154896.478265}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154897.51443}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154899.53142}, 'Andy': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154907.000016}}, 'turn_complete': True, 'current_turn_number': 7, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 1
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 1
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 1
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 1
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 2
🎯 NEW_TURN_DEBUG: Round 2, Turn 8 starting with starter Bot 2
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 2
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 0.6s...
🤖 Bot Bot 2 choosing first play...
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🤖 Bot Bot 2 will play 1 pieces: ['SOLDIER_BLACK(1)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 8
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 8 started with starter Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 8 started with starter Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 8 started with starter Bot 2'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 8 started with starter Bot 2
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2300
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 2, Turn 8 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154914.665994}}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154914.665994}}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 2, Turn 8 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154914.665994}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154915.471982}}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154914.665994}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154915.471982}}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🤖 BOT chooses to play SINGLE (1 pts): SOLDIER
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['SOLDIER_BLACK(1)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 55, 16, 241066), sequence_id=107, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 2, Turn 8 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154914.665994}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154915.471982}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154917.077085}}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154914.665994}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154915.471982}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154917.077085}}, 'turn_complete': False, 'current_turn_number': 8, 'winner': 'Bot 2', 'piles_won': 1, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_BLACK(1)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 55, 17, 891182), sequence_id=109, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [0], 'player_name': 'Andy', 'play_value': 12}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 1
🎯 WS_PLAY_DEBUG: Added piece at index 0: ADVISOR_RED(12)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ADVISOR_RED(12)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [0]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 1 pieces: ['ADVISOR_RED(12)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 2, Turn 8 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 8 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 2, Turn 8 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 1 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 1 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154914.665994}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154915.471982}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154917.077085}, 'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154921.728511}}, 'turn_complete': True, 'current_turn_number': 8, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 1, 'turn_plays': {'Bot 2': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154914.665994}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154915.471982}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154917.077085}, 'Andy': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751154921.728511}}, 'turn_complete': True, 'current_turn_number': 8, 'winner': 'Andy', 'piles_won': 1, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'Turn completed - winner: Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = True
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 0
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: None, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: None
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: None
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Andy, turn should be complete
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [ADVISOR_RED(12)], 'piece_count': 1, 'required_count': 1, 'next_player': None, 'turn_complete': True}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.TURN to GamePhase.SCORING
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.turn_state.TurnState object at 0x10ddccd90>
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = True
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 0
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.TURN -> GamePhase.SCORING
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.scoring_state.ScoringState object at 0x10ddccfd0>
🔄 SCORING_SETUP_DEBUG: Reset display_delay_complete = False
🗳️ DECLARATION_DEBUG: game.player_declarations = {'Andy': 2, 'Bot 2': 1, 'Bot 3': 2, 'Bot 4': 1}
📋 SCORING_FIX_DEBUG: Andy - declared: 2, actual: 2
🏆 SCORING_DEBUG: Andy scoring data:
   📋 Declared: 2, Actual: 2
   📊 Base Score: 7, Multiplier: 1x, Final: 7
   💯 Total Score: 15
📋 SCORING_FIX_DEBUG: Bot 2 - declared: 1, actual: 4
🏆 SCORING_DEBUG: Bot 2 scoring data:
   📋 Declared: 1, Actual: 4
   📊 Base Score: -3, Multiplier: 1x, Final: -3
   💯 Total Score: -4
📋 SCORING_FIX_DEBUG: Bot 3 - declared: 2, actual: 0
🏆 SCORING_DEBUG: Bot 3 scoring data:
   📋 Declared: 2, Actual: 0
   📊 Base Score: -2, Multiplier: 1x, Final: -2
   💯 Total Score: -3
📋 SCORING_FIX_DEBUG: Bot 4 - declared: 1, actual: 2
🏆 SCORING_DEBUG: Bot 4 scoring data:
   📋 Declared: 1, Actual: 2
   📊 Base Score: -1, Multiplier: 1x, Final: -1
   💯 Total Score: -2
🚀 SCORING_BROADCAST_DEBUG: Broadcasting scoring data:
   📊 Round scores: {'Andy': {'declared': 2, 'actual': 2, 'base_score': 7, 'multiplier': 1, 'final_score': 7, 'total_score': 15}, 'Bot 2': {'declared': 1, 'actual': 4, 'base_score': -3, 'multiplier': 1, 'final_score': -3, 'total_score': -4}, 'Bot 3': {'declared': 2, 'actual': 0, 'base_score': -2, 'multiplier': 1, 'final_score': -2, 'total_score': -3}, 'Bot 4': {'declared': 1, 'actual': 2, 'base_score': -1, 'multiplier': 1, 'final_score': -1, 'total_score': -2}}
   🏁 Game complete: False
   🏆 Winners: []
🚀 SCORING_BROADCAST_DEBUG: Also sending:
   💯 Total scores: {'Andy': 15, 'Bot 2': -4, 'Bot 3': -3, 'Bot 4': -2}
   👥 Players data: [{'name': 'Andy', 'is_bot': False, 'pile_count': 2, 'captured_piles': 2}, {'name': 'Bot 2', 'is_bot': True, 'pile_count': 1, 'captured_piles': 4}, {'name': 'Bot 3', 'is_bot': True, 'pile_count': 2, 'captured_piles': 0}, {'name': 'Bot 4', 'is_bot': True, 'pile_count': 1, 'captured_piles': 2}]
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Scoring calculated for round 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
⏰ SCORING_DELAY_DEBUG: Starting 7-second display delay...
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase scoring for room 7E13B1
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2350
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2400
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: False
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Not ready - display delay not complete
⏰ SCORING_DELAY_DEBUG: 7-second delay complete - setting display_delay_complete = True
🔍 SCORING_TRANSITION_DEBUG: Checking transition conditions:
  📊 scores_calculated: True
  ⏰ display_delay_complete: True
  🏁 game_complete: False
🔍 SCORING_TRANSITION_DEBUG: Ready to transition to PREPARATION
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.SCORING to GamePhase.PREPARATION
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.scoring_state.ScoringState object at 0x10ddccfd0>
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.SCORING -> GamePhase.PREPARATION
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.preparation_state.PreparationState object at 0x10ddccad0>
🎴 PREP_STATE_DEBUG: Setup phase starting for room 7E13B1
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
🎴 PREP_STATE_DEBUG: Using guaranteed no redeal dealing
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: ADVISOR_RED(12)
  → Bot 3 gets strong piece: ELEPHANT_RED(10)
  → Bot 4 gets strong piece: ADVISOR_RED(12)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['ADVISOR_RED(12)', 'SOLDIER_RED(2)', 'ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 2: ['GENERAL_RED(14)', 'ADVISOR_BLACK(11)', 'HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: True
  Bot 3: ['HORSE_BLACK(5)', 'CANNON_RED(4)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 4: ['ELEPHANT_RED(10)', 'HORSE_RED(6)', 'ADVISOR_RED(12)', 'HORSE_RED(6)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CANNON_RED(4)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
✅ PREP_STATE_DEBUG: No weak hands - keeping existing starter: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase preparation for room 7E13B1
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 PREP_STATE_DEBUG: Checking transition conditions...
   - Initial deal complete: True
   - Weak players: set()
   - Redeal decisions: {}
   - Current weak player: None
✅ PREP_STATE_DEBUG: No weak players, transitioning to DECLARATION
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.PREPARATION to GamePhase.DECLARATION
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.preparation_state.PreparationState object at 0x10ddccad0>
🎯 PREP_STATE_DEBUG: Cleanup phase - current_player: Andy
🎯 PREP_STATE_DEBUG: Cleanup phase - round_starter: Andy
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.PREPARATION -> GamePhase.DECLARATION
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10ddcccd0>
📢 DECL_STATE_DEBUG: Using round_starter: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Andy
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 15 pts', 'Bot 2 - -4 pts', 'Bot 3 - -3 pts', 'Bot 4 - -2 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Andy'}, 'current_declarer': 'Andy', 'reason': 'Declaration phase setup complete - current declarer: Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 15 pts', 'Bot 2 - -4 pts', 'Bot 3 - -3 pts', 'Bot 4 - -2 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Andy'}, 'current_declarer': 'Andy', 'reason': 'Declaration phase setup complete - current declarer: Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Declaration phase setup complete - current declarer: Andy
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current declarer Andy is human - waiting
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase declaration for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'round_started' for room 7E13B1 with data: {'phase': 'declaration', 'starter': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'round_started' with data: {'phase': 'declaration', 'starter': 'Andy'}
🎪 BOT_HANDLER_DEBUG: Handling round start
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Andy
🔍 BOT_ROUND_DEBUG: Game current_player: Andy
👤 Round starter is human or None: None
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: ''
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer '' index: -1
🔍 DECL_PHASE_DEBUG: Starting loop from index 0 to 4
🔍 DECL_PHASE_DEBUG: Checking player 0 (Andy), is_bot: False
🔍 DECL_PHASE_DEBUG: Player Andy is human, stopping bot declarations
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154933188}
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2450
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154934221}
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2500
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2550
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2600
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2650
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2700
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154963189}
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2750
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154964222}
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2800
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2850
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2900
🔍 STATE_MACHINE_DEBUG: Process loop iteration 2950
🔍 STATE_MACHINE_DEBUG: Process loop iteration 3000
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751154993190}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751154994223}
🔍 STATE_MACHINE_DEBUG: Process loop iteration 3050
🔍 STATE_MACHINE_DEBUG: Process loop iteration 3100
🔍 STATE_MACHINE_DEBUG: Process loop iteration 3150
🔍 STATE_MACHINE_DEBUG: Process loop iteration 3200
DEBUG_WS_RECEIVE: Received event 'declare' from client in room 7E13B1 with data: {'value': 6, 'player_name': 'Andy'}
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Andy (queue size: 1)
✅ Declaration queued: Andy -> 6
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy declared 6
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 15 pts', 'Bot 2 - -4 pts', 'Bot 3 - -3 pts', 'Bot 4 - -2 pts'], 'current_declarer_index': 1, 'declarations': {'Andy': 6}, 'declaration_total': 6, 'current_declarer': 'Bot 2'}, 'current_declarer': 'Bot 2', 'reason': 'Player Andy declared 6'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 15 pts', 'Bot 2 - -4 pts', 'Bot 3 - -3 pts', 'Bot 4 - -2 pts'], 'current_declarer_index': 1, 'declarations': {'Andy': 6}, 'declaration_total': 6, 'current_declarer': 'Bot 2'}, 'current_declarer': 'Bot 2', 'reason': 'Player Andy declared 6'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Player Andy declared 6
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current declarer Bot 2 is a bot - triggering declaration
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Andy'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Andy' index: 0
🔍 DECL_PHASE_DEBUG: Starting loop from index 1 to 4
🔍 DECL_PHASE_DEBUG: Checking player 1 (Bot 2), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 2 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 6}
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will declare in 1.1s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 DECL_PHASE_DEBUG: Bot Bot 2 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 2 (queue size: 1)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 2 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 6}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 1.3s...
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 3 (queue size: 2)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 6}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 0.8s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 3)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 3 actions
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 declared 1
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 15 pts', 'Bot 2 - -4 pts', 'Bot 3 - -3 pts', 'Bot 4 - -2 pts'], 'current_declarer_index': 2, 'declarations': {'Andy': 6, 'Bot 2': 1}, 'declaration_total': 7, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Player Bot 2 declared 1'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 15 pts', 'Bot 2 - -4 pts', 'Bot 3 - -3 pts', 'Bot 4 - -2 pts'], 'current_declarer_index': 2, 'declarations': {'Andy': 6, 'Bot 2': 1}, 'declaration_total': 7, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Player Bot 2 declared 1'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Player Bot 2 declared 1
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current declarer Bot 3 is a bot - triggering declaration
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 2'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 2' index: 1
🔍 DECL_PHASE_DEBUG: Starting loop from index 2 to 4
🔍 DECL_PHASE_DEBUG: Checking player 2 (Bot 3), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 3 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 6, 'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will declare in 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 DECL_PHASE_DEBUG: Bot Bot 3 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 3 (queue size: 1)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 3 declared 1
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 6, 'Bot 2': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 1.1s...
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 2)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 1
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 declared 1
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 15 pts', 'Bot 2 - -4 pts', 'Bot 3 - -3 pts', 'Bot 4 - -2 pts'], 'current_declarer_index': 3, 'declarations': {'Andy': 6, 'Bot 2': 1, 'Bot 3': 1}, 'declaration_total': 8, 'current_declarer': 'Bot 4'}, 'current_declarer': 'Bot 4', 'reason': 'Player Bot 3 declared 1'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Andy - 15 pts', 'Bot 2 - -4 pts', 'Bot 3 - -3 pts', 'Bot 4 - -2 pts'], 'current_declarer_index': 3, 'declarations': {'Andy': 6, 'Bot 2': 1, 'Bot 3': 1}, 'declaration_total': 8, 'current_declarer': 'Bot 4'}, 'current_declarer': 'Bot 4', 'reason': 'Player Bot 3 declared 1'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: declaration, reason: Player Bot 3 declared 1
🚀 ENTERPRISE_BOT_DEBUG: Declaration phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current declarer Bot 4 is a bot - triggering declaration
🔍 DECL_PHASE_DEBUG: _handle_declaration_phase called with last_declarer: 'Bot 3'
🔍 BOT_DEBUG: Got declaration order from state machine: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Declaration order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔍 DECL_PHASE_DEBUG: Last declarer 'Bot 3' index: 2
🔍 DECL_PHASE_DEBUG: Starting loop from index 3 to 4
🔍 DECL_PHASE_DEBUG: Checking player 3 (Bot 4), is_bot: True
🔍 DECL_PHASE_DEBUG: Player Bot 4 declared value: 0 (from phase data)
🔍 DECL_PHASE_DEBUG: All phase declarations: {'Andy': 6, 'Bot 2': 1, 'Bot 3': 1}
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will declare in 1.2s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 DECL_PHASE_DEBUG: Bot Bot 4 will now declare!
🔍 ACTION_QUEUE_DEBUG: Queued action: declare from Bot 4 (queue size: 3)
🔧 BOT_DECLARE_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Bot Bot 4 declared 0
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 declared 1
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔄 STATE_MACHINE_DEBUG: Attempting transition from GamePhase.DECLARATION to GamePhase.TURN
✅ STATE_MACHINE_DEBUG: Transition validated, proceeding...
🚪 STATE_MACHINE_DEBUG: Exiting current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10ddcccd0>
🎯 STATE_MACHINE_DEBUG: Phase updated: GamePhase.DECLARATION -> GamePhase.TURN
🎯 STATE_MACHINE_DEBUG: Entering new state: <engine.state_machine.states.turn_state.TurnState object at 0x10ddccd90>
🎯 NEW_TURN_DEBUG: Round 3, Turn 1 starting with starter Andy
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Andy for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Andy'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Andy
👤 Human player Andy starts, waiting for their play
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 1 started with starter Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Andy', 'reason': 'New turn 1 started with starter Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Andy', 'reason': 'New turn 1 started with starter Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 1 started with starter Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase turn for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Andy'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Andy
👤 Human player Andy starts, waiting for their play
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: declare from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 3 actions
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 3
Action declare not allowed in turn
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
Action declare not allowed in turn
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: declare from Bot 4
Action declare not allowed in turn
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Process loop iteration 3250
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751155023190}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751155024223}
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [3, 4, 6, 7], 'player_name': 'Andy', 'play_value': 4}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [3, 4, 6, 7]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 8
🎯 WS_PLAY_DEBUG: Added piece at index 3: SOLDIER_BLACK(1)
🎯 WS_PLAY_DEBUG: Added piece at index 4: SOLDIER_BLACK(1)
🎯 WS_PLAY_DEBUG: Added piece at index 6: SOLDIER_BLACK(1)
🎯 WS_PLAY_DEBUG: Added piece at index 7: SOLDIER_BLACK(1)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [3, 4, 6, 7]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Andy playing 4 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 4
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 4
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 3, Turn 1 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 4 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 4, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155026.22788}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 4 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 4, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155026.22788}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 4 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 4 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 4
🤖 BOT has no valid play. Discards lowest pieces: HORSE, CHARIOT, CHARIOT, CHARIOT
    🔍 Final play: ['HORSE', 'CHARIOT', 'CHARIOT', 'CHARIOT']
    🧠 Hand left: ['GENERAL', 'ADVISOR', 'HORSE', 'CHARIOT', 'CHARIOT', 'CHARIOT', 'CHARIOT', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 4 pieces: ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 4
🤖 BOT has no valid play. Discards lowest pieces: HORSE, CHARIOT, CHARIOT, CHARIOT
    🔍 Final play: ['HORSE', 'CHARIOT', 'CHARIOT', 'CHARIOT']
    🧠 Hand left: ['GENERAL', 'ADVISOR', 'HORSE', 'CHARIOT', 'CHARIOT', 'CHARIOT', 'CHARIOT', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 4 pieces: ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_BLACK(1)], 'piece_count': 4, 'required_count': 4, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 4 pieces: ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 3, Turn 1 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 4 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 4, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155026.22788}, 'Bot 2': {'pieces': ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155027.221416}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 4 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 4, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155026.22788}, 'Bot 2': {'pieces': ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155027.221416}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 4 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 4 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.5s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 4
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, CANNON, CANNON, CANNON
    🔍 Final play: ['SOLDIER', 'CANNON', 'CANNON', 'CANNON']
    🧠 Hand left: ['HORSE', 'CANNON', 'CANNON', 'CANNON', 'GENERAL', 'SOLDIER', 'ELEPHANT', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 4 pieces: ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 4
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, CANNON, CANNON, CANNON
    🔍 Final play: ['SOLDIER', 'CANNON', 'CANNON', 'CANNON']
    🧠 Hand left: ['HORSE', 'CANNON', 'CANNON', 'CANNON', 'GENERAL', 'SOLDIER', 'ELEPHANT', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 4 pieces: ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [HORSE_BLACK(5), CHARIOT_BLACK(7), CHARIOT_BLACK(7), CHARIOT_RED(8)], 'piece_count': 4, 'required_count': 4, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [HORSE_BLACK(5), CHARIOT_BLACK(7), CHARIOT_BLACK(7), CHARIOT_RED(8)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 57, 7, 775991), sequence_id=120, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 4 pieces: ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'CANNON_RED(4)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 3, Turn 1 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 4 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 4, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155026.22788}, 'Bot 2': {'pieces': ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155027.221416}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'CANNON_RED(4)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155028.393238}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 4 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 4, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155026.22788}, 'Bot 2': {'pieces': ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155027.221416}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'CANNON_RED(4)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155028.393238}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 4 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 4 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 4
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'SOLDIER', 'CANNON']
    🧠 Hand left: ['ELEPHANT', 'HORSE', 'ADVISOR', 'HORSE', 'SOLDIER', 'SOLDIER', 'CANNON', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 4 pieces: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 4
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'SOLDIER', 'CANNON']
    🧠 Hand left: ['ELEPHANT', 'HORSE', 'ADVISOR', 'HORSE', 'SOLDIER', 'SOLDIER', 'CANNON', 'SOLDIER']
🎯 BOT_PLAY_DEBUG: Final selection - 4 pieces: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CANNON_RED(4)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_BLACK(1), CANNON_BLACK(3), CANNON_BLACK(3), CANNON_RED(4)], 'piece_count': 4, 'required_count': 4, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_BLACK(1), CANNON_BLACK(3), CANNON_BLACK(3), CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 57, 9, 282833), sequence_id=122, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 4 pieces: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CANNON_RED(4)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 3, Turn 1 - Bot 4 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 3, Turn 1 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 3, Turn 1 Winner determined: Andy
🎯 CAPTURED_PILES_DEBUG: Andy captured_piles += 4 = 4
🎯 TURN_COMPLETE_DEBUG: Awarded 4 piles to Andy
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Andy
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 4, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155026.22788}, 'Bot 2': {'pieces': ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155027.221416}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'CANNON_RED(4)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155028.393238}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CANNON_RED(4)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155029.961207}}, 'turn_complete': True, 'current_turn_number': 1, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 4, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155026.22788}, 'Bot 2': {'pieces': ['HORSE_BLACK(5)', 'CHARIOT_BLACK(7)', 'CHARIOT_BLACK(7)', 'CHARIOT_RED(8)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155027.221416}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'CANNON_BLACK(3)', 'CANNON_RED(4)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155028.393238}, 'Bot 4': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'SOLDIER_RED(2)', 'CANNON_RED(4)'], 'piece_count': 4, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155029.961207}}, 'turn_complete': True, 'current_turn_number': 1, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 4, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 4
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Andy
🎯 NEW_TURN_DEBUG: Round 3, Turn 2 starting with starter Andy
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Andy for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Andy'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Andy
👤 Human player Andy starts, waiting for their play
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 2 started with starter Andy
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'New turn 2 started with starter Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'New turn 2 started with starter Andy'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 2 started with starter Andy
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 4 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 4 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Andy', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 4 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 4 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_RED(2), SOLDIER_RED(2), SOLDIER_RED(2), CANNON_RED(4)], 'piece_count': 4, 'required_count': None, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [SOLDIER_RED(2), SOLDIER_RED(2), SOLDIER_RED(2), CANNON_RED(4)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 57, 10, 953943), sequence_id=124, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 STATE_MACHINE_DEBUG: Process loop iteration 3300
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [3, 1], 'player_name': 'Andy', 'play_value': 4}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [3, 1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 4
🎯 WS_PLAY_DEBUG: Added piece at index 3: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Added piece at index 1: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [3, 1]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Andy playing 2 pieces: ['SOLDIER_RED(2)', 'SOLDIER_RED(2)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 2
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 3, Turn 2 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 2, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155043.330396}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 2', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 2, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155043.330396}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: CHARIOT, ELEPHANT
    🔍 Final play: ['CHARIOT', 'ELEPHANT']
    🧠 Hand left: ['GENERAL', 'ADVISOR', 'CHARIOT', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.5s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: CHARIOT, ELEPHANT
    🔍 Final play: ['CHARIOT', 'ELEPHANT']
    🧠 Hand left: ['GENERAL', 'ADVISOR', 'CHARIOT', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [SOLDIER_RED(2), SOLDIER_RED(2)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 2 pieces: ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 3, Turn 2 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 2, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155043.330396}, 'Bot 2': {'pieces': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155044.165956}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 3', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 2, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155043.330396}, 'Bot 2': {'pieces': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155044.165956}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: HORSE, ELEPHANT
    🔍 Final play: ['HORSE', 'ELEPHANT']
    🧠 Hand left: ['HORSE', 'GENERAL', 'ELEPHANT', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: HORSE, ELEPHANT
    🔍 Final play: ['HORSE', 'ELEPHANT']
    🧠 Hand left: ['HORSE', 'GENERAL', 'ELEPHANT', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [CHARIOT_RED(8), ELEPHANT_BLACK(9)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [CHARIOT_RED(8), ELEPHANT_BLACK(9)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 57, 24, 702783), sequence_id=127, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 2 pieces: ['HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 3, Turn 2 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 2, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155043.330396}, 'Bot 2': {'pieces': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155044.165956}, 'Bot 3': {'pieces': ['HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155045.75216}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 2, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155043.330396}, 'Bot 2': {'pieces': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155044.165956}, 'Bot 3': {'pieces': ['HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155045.75216}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Andy', 'piles_won': 4, 'next_turn_starter': 'Andy'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.6s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (12 pts): HORSE, HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['HORSE_RED(6)', 'HORSE_RED(6)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 4
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT chooses to play PAIR (12 pts): HORSE, HORSE
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['HORSE_RED(6)', 'HORSE_RED(6)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [HORSE_BLACK(5), ELEPHANT_BLACK(9)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [HORSE_BLACK(5), ELEPHANT_BLACK(9)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 57, 26, 695876), sequence_id=129, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 2 pieces: ['HORSE_RED(6)', 'HORSE_RED(6)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 3, Turn 2 - Bot 4 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 3, Turn 2 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 3, Turn 2 Winner determined: Bot 4
🎯 CAPTURED_PILES_DEBUG: Bot 4 captured_piles += 2 = 2
🎯 TURN_COMPLETE_DEBUG: Awarded 2 piles to Bot 4
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 2, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155043.330396}, 'Bot 2': {'pieces': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155044.165956}, 'Bot 3': {'pieces': ['HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155045.75216}, 'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155047.36826}}, 'turn_complete': True, 'current_turn_number': 2, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Andy', 'current_player': 'Bot 4', 'turn_order': ['Andy', 'Bot 2', 'Bot 3', 'Bot 4'], 'required_piece_count': 2, 'turn_plays': {'Andy': {'pieces': ['SOLDIER_RED(2)', 'SOLDIER_RED(2)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155043.330396}, 'Bot 2': {'pieces': ['CHARIOT_RED(8)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155044.165956}, 'Bot 3': {'pieces': ['HORSE_BLACK(5)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155045.75216}, 'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155047.36826}}, 'turn_complete': True, 'current_turn_number': 2, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Turn completed - winner: Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 4, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 2
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 2
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751155053192}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 7E13B1 with data: {'timestamp': 1751155054224}
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 4
🎯 NEW_TURN_DEBUG: Round 3, Turn 3 starting with starter Bot 4
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 4 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 4
🤖 Bot Bot 4 will play first
🤖 Bot Bot 4 thinking for 1.0s...
🤖 Bot Bot 4 choosing first play...
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🤖 Bot Bot 4 will play 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 3
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 3 started with starter Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 3 started with starter Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 3 started with starter Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 3 started with starter Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 4 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 4 played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [HORSE_RED(6), HORSE_RED(6)], 'piece_count': 2, 'required_count': None, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 2 pieces: ['HORSE_RED(6)', 'HORSE_RED(6)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 2
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 2
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 3, Turn 3 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155048.19224}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155048.19224}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [HORSE_RED(6), HORSE_RED(6)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
Not Bot 4's turn - expected Andy
Invalid action: GameAction(player_name='Bot 4', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_RED(12)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 57, 36, 289074), sequence_id=132, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Process loop iteration 3350
🔍 STATE_MACHINE_DEBUG: Process loop iteration 3400
DEBUG_WS_RECEIVE: Received event 'play' from client in room 7E13B1 with data: {'piece_indices': [0, 1], 'player_name': 'Andy', 'play_value': 23}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0, 1]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 2
🎯 WS_PLAY_DEBUG: Added piece at index 0: ADVISOR_RED(12)
🎯 WS_PLAY_DEBUG: Added piece at index 1: ADVISOR_BLACK(11)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Andy (queue size: 1)
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
✅ Play queued: Andy -> [0, 1]
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Andy
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Andy playing 2 pieces: ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 2
🎯 TURN_STATE_DEBUG: Round 3, Turn 3 - Andy played, next: Bot 2
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155048.19224}, 'Andy': {'pieces': ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155063.885125}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 2', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155048.19224}, 'Andy': {'pieces': ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155063.885125}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Andy played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 2 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 2 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.9s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: ADVISOR, GENERAL
    🔍 Final play: ['ADVISOR', 'GENERAL']
    🧠 Hand left: ['GENERAL', 'ADVISOR']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Andy'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Andy, last_index: 1
🎯 PLAY_PHASE_DEBUG: Checking next player 2: Bot 2
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: ADVISOR, GENERAL
    🔍 Final play: ['ADVISOR', 'GENERAL']
    🧠 Hand left: ['GENERAL', 'ADVISOR']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 2 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [ADVISOR_RED(12), ADVISOR_BLACK(11)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 2', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 2
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 2 pieces: ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 3, Turn 3 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 2
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155048.19224}, 'Andy': {'pieces': ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155063.885125}, 'Bot 2': {'pieces': ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155064.903375}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155048.19224}, 'Andy': {'pieces': ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155063.885125}, 'Bot 2': {'pieces': ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155064.903375}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 2 played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: ELEPHANT, GENERAL
    🔍 Final play: ['ELEPHANT', 'GENERAL']
    🧠 Hand left: ['GENERAL', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['ELEPHANT_RED(10)', 'GENERAL_BLACK(13)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 1)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 2'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 2, last_index: 2
🎯 PLAY_PHASE_DEBUG: Checking next player 3: Bot 3
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 1.0s...
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🤖 BOT has no valid play. Discards lowest pieces: ELEPHANT, GENERAL
    🔍 Final play: ['ELEPHANT', 'GENERAL']
    🧠 Hand left: ['GENERAL', 'ELEPHANT']
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['ELEPHANT_RED(10)', 'GENERAL_BLACK(13)']
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 3 (queue size: 2)
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ADVISOR_BLACK(11), GENERAL_RED(14)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 3', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 2
Not Bot 2's turn - expected Bot 3
Invalid action: GameAction(player_name='Bot 2', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ADVISOR_BLACK(11), GENERAL_RED(14)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 57, 45, 624613), sequence_id=135, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 3
🔍 STATE_MACHINE_DEBUG: Processing 2 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 2 pieces: ['ELEPHANT_RED(10)', 'GENERAL_BLACK(13)']
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 3, Turn 3 - Bot 3 played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 3, Turn 3 _complete_turn() called
🎯 TURN_COMPLETE_DEBUG: Round 3, Turn 3 Winner determined: Bot 4
🎯 CAPTURED_PILES_DEBUG: Bot 4 captured_piles += 2 = 4
🎯 TURN_COMPLETE_DEBUG: Awarded 2 piles to Bot 4
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155048.19224}, 'Andy': {'pieces': ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155063.885125}, 'Bot 2': {'pieces': ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155064.903375}, 'Bot 3': {'pieces': ['ELEPHANT_RED(10)', 'GENERAL_BLACK(13)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155066.715207}}, 'turn_complete': True, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 3', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 2, 'turn_plays': {'Bot 4': {'pieces': ['HORSE_RED(6)', 'HORSE_RED(6)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155048.19224}, 'Andy': {'pieces': ['ADVISOR_RED(12)', 'ADVISOR_BLACK(11)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155063.885125}, 'Bot 2': {'pieces': ['ADVISOR_BLACK(11)', 'GENERAL_RED(14)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155064.903375}, 'Bot 3': {'pieces': ['ELEPHANT_RED(10)', 'GENERAL_BLACK(13)'], 'piece_count': 2, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155066.715207}}, 'turn_complete': True, 'current_turn_number': 3, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 3', 'reason': 'Turn completed - winner: Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Turn completed - winner: Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 3 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 3 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 3
🎯 PLAY_PHASE_DEBUG: No more players after Bot 3, turn should be complete
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 0
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 2
DEBUG_WS: Message for event 'turn_complete' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 7E13B1.
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 4
🎯 NEW_TURN_DEBUG: Round 3, Turn 4 starting with starter Bot 4
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 4 for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 7E13B1 with data: {'starter': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'turn_started' with data: {'starter': 'Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling turn start
🎮 Bot Manager: Handling turn start for Bot 4
🤖 Bot Bot 4 will play first
🤖 Bot Bot 4 thinking for 0.5s...
🤖 Bot Bot 4 choosing first play...
🤖 BOT chooses to play SINGLE (12 pts): ADVISOR
🤖 Bot Bot 4 will play 1 pieces: ['ADVISOR_RED(12)']
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔍 ACTION_QUEUE_DEBUG: Queued action: play_pieces from Bot 4 (queue size: 1)
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'queued': True}
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 first play action queued - state machine will broadcast with correct next_player
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 4
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 4 started with starter Bot 4
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 4 started with starter Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'New turn 4 started with starter Bot 4'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: New turn 4 started with starter Bot 4
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 START_NEXT_DEBUG: _start_new_turn() completed
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: None
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Bot 4', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 2 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 3 played 2 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Bot 4 is a bot
🤖 ENTERPRISE_BOT_DEBUG: Current player Bot 4 is a bot - triggering play
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 3'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: No required piece count set yet, skipping bot plays
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [ELEPHANT_RED(10), GENERAL_BLACK(13)], 'piece_count': 2, 'required_count': None, 'next_player': 'Bot 4', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 3
Not Bot 3's turn - expected Bot 4
Invalid action: GameAction(player_name='Bot 3', action_type=<ActionType.PLAY_PIECES: 'play_pieces'>, payload={'pieces': [ELEPHANT_RED(10), GENERAL_BLACK(13)]}, timestamp=datetime.datetime(2025, 6, 28, 16, 57, 47, 677712), sequence_id=137, is_bot=True)
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.
🔍 ACTION_QUEUE_DEBUG: Dequeued action: play_pieces from Bot 4
🔍 STATE_MACHINE_DEBUG: Processing 1 actions
🔍 STATE_MACHINE_DEBUG: Processing action: play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['ADVISOR_RED(12)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 3, Turn 4 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
DEBUG_WS: Message for event 'phase_change' added to queue for room 7E13B1.
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 7E13B1 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155075.296021}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'phase_change' with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 4', 'current_player': 'Andy', 'turn_order': ['Bot 4', 'Andy', 'Bot 2', 'Bot 3'], 'required_piece_count': 1, 'turn_plays': {'Bot 4': {'pieces': ['ADVISOR_RED(12)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751155075.296021}}, 'turn_complete': False, 'current_turn_number': 4, 'winner': 'Bot 4', 'piles_won': 2, 'next_turn_starter': 'Bot 4'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
🚀 BOT_HANDLER_DEBUG: Handling enterprise phase change
🚀 ENTERPRISE_BOT_DEBUG: Processing phase change - phase: turn, reason: Player Bot 4 played 1 pieces
🚀 ENTERPRISE_BOT_DEBUG: Turn phase - checking if Andy is a bot
👤 ENTERPRISE_BOT_DEBUG: Current player Andy is human - waiting
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
DEBUG_WS: Message for event 'play' added to queue for room 7E13B1.
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 7E13B1
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 7E13B1 with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 7E13B1, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 7E13B1 handling event 'player_played' with data: {'player_name': 'Bot 4'}
🎯 BOT_HANDLER_DEBUG: Handling play phase
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 4', 'Andy', 'Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 4, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Andy
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [ADVISOR_RED(12)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ STATE_MACHINE_DEBUG: Action processed successfully
DEBUG_WS_QUEUE: Room 7E13B1 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 7E13B1.
DEBUG_WS_QUEUE: Room 7E13B1 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room 7E13B1.
DEBUG_WS: Successfully sent 'play' to a client in room 7E13B1.