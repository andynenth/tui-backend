(venv) Narongwits-MacBook-Pro:liap-tui nrw$ ./start.sh
▶️ Starting backend on http://0.0.0.0:5050 ...
INFO:     Will watch for changes in these directories: ['/Users/nrw/python/tui-project/liap-tui']
INFO:     Uvicorn running on http://0.0.0.0:5050 (Press CTRL+C to quit)
INFO:     Started reloader process [86288] using WatchFiles
socket_manager id in backend.api.routes.routes: 4483445232
socket_manager id in backend.api.routes.ws: 4483445232
INFO:     Started server process [86291]
INFO:     Waiting for application startup.
🚀 STARTUP: Initializing monitoring and observability system...
📺 LOGGING: Console logging only (set LOG_TO_FILES=true for file logging)
📦 STARTUP: Monitoring services imported successfully
🔍 STARTUP: Health monitoring system disabled
🔧 STARTUP: Recovery management system disabled
{"timestamp": "2025-07-03T01:50:48.039212Z", "level": "INFO", "logger": "game", "message": "Game event: system_startup", "module": "logging_service", "function": "_log_with_context", "line": 206, "event_type": "system_startup", "room_id": null, "player_id": null, "components": ["health_monitor", "recovery_manager", "event_store"], "status": "success"}
📝 STARTUP: System startup logged
✅ STARTUP: Monitoring and observability system fully activated!
🌐 SYSTEM: Health endpoints available at /health, /health/detailed, /health/metrics
INFO:     Application startup complete.
🌐 Starting esbuild in watch mode...

> frontend@1.0.0 dev
> node esbuild.config.cjs

👀 Watching for changes to ./main.js, output to ../backend/static/

[109.73ms] [@tailwindcss/postcss] src/styles/globals.css
[  0.18ms]   ↳ Quick bail check
[ 27.45ms]   ↳ Setup compiler
[  0.74ms]     ↳ PostCSS AST -> Tailwind CSS AST
[ 26.67ms]     ↳ Create compiler
[  0.14ms]   ↳ Register full rebuild paths
[  2.17ms]   ↳ Setup scanner
[  9.54ms]   ↳ Scan for candidates
[  7.47ms]   ↳ Register dependency messages
[ 52.90ms]   ↳ Build utilities
[  6.01ms]   ↳ Transform Tailwind CSS AST into PostCSS AST
[  2.25ms]   ↳ Update PostCSS AST

INFO:     ('127.0.0.1', 64021) - "WebSocket /ws/lobby" [accepted]
DEBUG_WS: Created new enhanced broadcast queue and task for room lobby.
DEBUG_WS: Registered new connection for room lobby. Total connections: 1
INFO:     connection open
🔄 RELIABLE_MSG: Message retry worker started
DEBUG_WS: Starting enhanced broadcast queue processor for room lobby.
DEBUG_WS_QUEUE_START: Room lobby processor task starting, queue exists: True
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room lobby with data: {'room_id': 'lobby'}
INFO:     ('127.0.0.1', 64023) - "WebSocket /ws/lobby" [accepted]
DEBUG_WS: Registered new connection for room lobby. Total connections: 2
INFO:     connection open
DEBUG_LOBBY_WS: Client disconnected from lobby
INFO:     connection closed
DEBUG_WS: Unregistered connection for room lobby. Remaining connections: 1
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room lobby with data: {'room_id': 'lobby'}
DEBUG_LOBBY_WS: Sent initial room list to new lobby client
DEBUG_LOBBY_WS: Client disconnected from lobby
INFO:     connection closed
DEBUG_WS: Unregistered connection for room lobby. Remaining connections: 0
DEBUG_WS: Cleaned up empty room lobby
INFO:     ('127.0.0.1', 64029) - "WebSocket /ws/lobby" [accepted]
DEBUG_WS: Registered new connection for room lobby. Total connections: 1
INFO:     connection open
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room lobby with data: {'room_id': 'lobby'}
DEBUG_LOBBY_WS: Sent initial room list to new lobby client
DEBUG_WS_RECEIVE: Received event 'create_room' from client in room lobby with data: {'player_name': 'Andy'}
DEBUG_LOBBY_WS: Created room 6E0ABC for player Andy
🔔 LOBBY_BROADCAST: Created/restarted lobby broadcast task
DEBUG_WS: Entering broadcast method for room lobby, event room_created
🔔 LOBBY_BROADCAST: Attempting to broadcast 'room_created' to lobby
🔔 LOBBY_BROADCAST: Data keys: ['room_id', 'host_name', 'timestamp']
🔔 LOBBY_BROADCAST: Found 1 lobby connections
🔔 LOBBY_BROADCAST: Queue size: 0
DEBUG_WS: Attempting to queue event 'room_created' for room lobby with data: {'room_id': 'lobby', 'host_name': 'Andy', 'timestamp': 1751507455.093274}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'room_created'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'room_created' - 108 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'room_created'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'room_created'
DEBUG_WS: Message for event 'room_created' added to queue for room lobby.
🔔 LOBBY_BROADCAST: Message added to lobby queue. New queue size: 1
DEBUG_WS: Starting enhanced broadcast queue processor for room lobby.
DEBUG_WS_QUEUE_START: Room lobby processor task starting, queue exists: True
DEBUG_WS: Entering broadcast method for room lobby, event room_list_update
🔔 LOBBY_BROADCAST: Attempting to broadcast 'room_list_update' to lobby
🔔 LOBBY_BROADCAST: Data keys: ['rooms', 'timestamp', 'reason']
🔔 LOBBY_BROADCAST: Found 1 lobby connections
🔔 LOBBY_BROADCAST: Queue size: 1
DEBUG_WS: Attempting to queue event 'room_list_update' for room lobby with data: {'rooms': [{'room_id': '6E0ABC', 'host_name': 'Andy', 'started': False, 'slots': {'P1': {'name': 'Andy', 'is_bot': False, 'is_host': True}, 'P2': {'name': 'Bot 2', 'is_bot': True, 'is_host': False}, 'P3': {'name': 'Bot 3', 'is_bot': True, 'is_host': False}, 'P4': {'name': 'Bot 4', 'is_bot': True, 'is_host': False}}, 'players': [{'name': 'Andy', 'is_bot': False, 'is_host': True}, {'name': 'Bot 2', 'is_bot': True, 'is_host': False}, {'name': 'Bot 3', 'is_bot': True, 'is_host': False}, {'name': 'Bot 4', 'is_bot': True, 'is_host': False}], 'occupied_slots': 4, 'total_slots': 4}], 'timestamp': 1751507455.093796, 'reason': 'new_room_created', 'room_id': 'lobby'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'room_list_update'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'room_list_update' - 703 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'room_list_update'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'room_list_update'
DEBUG_WS: Message for event 'room_list_update' added to queue for room lobby.
🔔 LOBBY_BROADCAST: Message added to lobby queue. New queue size: 2
✅ Notified lobby about new room: 6E0ABC
DEBUG_WS_QUEUE: Room lobby got message: room_created
DEBUG_WS: Broadcasting event 'room_created' (op_id: unknown) to 1 clients in room lobby.
INFO:     ('127.0.0.1', 64031) - "WebSocket /ws/lobby" [accepted]
DEBUG_WS: Registered new connection for room lobby. Total connections: 2
INFO:     connection open
DEBUG_WS: Error sending to client in room lobby: 
DEBUG_WS_DISCONNECT: WebSocket client disconnected from room 6E0ABC.
INFO:     connection closed
DEBUG_WS: Attempted to unregister from non-existent room 6E0ABC
DEBUG_WS_QUEUE: Room lobby got message: room_list_update
DEBUG_WS: Broadcasting event 'room_list_update' (op_id: unknown) to 1 clients in room lobby.
DEBUG_WS: Successfully sent 'room_list_update' to a client in room lobby.
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room lobby with data: {'room_id': 'lobby'}
DEBUG_LOBBY_WS: Sent initial room list to new lobby client
INFO:     ('127.0.0.1', 64033) - "WebSocket /ws/6E0ABC" [accepted]
DEBUG_WS: Created new enhanced broadcast queue and task for room 6E0ABC.
DEBUG_WS: Registered new connection for room 6E0ABC. Total connections: 1
INFO:     connection open
DEBUG_WS: Starting enhanced broadcast queue processor for room 6E0ABC.
DEBUG_WS_QUEUE_START: Room 6E0ABC processor task starting, queue exists: True
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room 6E0ABC with data: {'room_id': '6E0ABC'}
DEBUG_WS_RECEIVE: Sent initial room state to client in room 6E0ABC after client_ready.
DEBUG_WS_RECEIVE: Received event 'get_room_state' from client in room 6E0ABC with data: {}
DEBUG_WS_RECEIVE: Sent room state to client in room 6E0ABC
DEBUG_WS_RECEIVE: Received event 'start_game' from client in room 6E0ABC with data: {}
🔒 [Room 6E0ABC] Starting game: op_id=6E0ABC_1
🔧 TRANSITION_DEBUG: _immediate_transition_to called: None -> GamePhase.PREPARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 ASYNC_DEBUG: Transition depth: 0
🔧 CONCURRENCY_FIX: Acquired transition lock for None -> GamePhase.PREPARATION
🔍 TRANSITION_SOURCE: None -> GamePhase.PREPARATION called from /Users/nrw/python/tui-project/liap-tui/backend/engine/state_machine/game_state_machine.py:75 in start
🔍 TRANSITION_REASON: Initial state machine start
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for preparation
🔧 BASE_STATE_DEBUG: on_enter() called for preparation phase
{"timestamp": "2025-07-03T01:50:56.684419Z", "level": "INFO", "logger": "game.state.preparation", "message": "Entering preparation phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for preparation
{"timestamp": "2025-07-03T01:50:56.684549Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfb4 Preparation phase starting - dealing cards", "module": "preparation_state", "function": "_setup_phase", "line": 80}
🎴 PREP_STATE_DEBUG: Setup phase starting for room 6E0ABC
🔄 PREP_RESET_DEBUG: Reset Andy - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 2 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 3 - declared: 0, captured_piles: 0
🔄 PREP_RESET_DEBUG: Reset Bot 4 - declared: 0, captured_piles: 0
🎴 PREP_STATE_DEBUG: Using guaranteed no redeal dealing
🛡️ DEBUG: Dealing guaranteed no-redeal hands with RED_GENERAL assigned to player 1
🛡️ DEBUG: Available pieces - Strong: 7, Weak: 24
  → Bot 2 gets RED_GENERAL: GENERAL_RED(14)
  → Andy gets strong piece: ADVISOR_BLACK(11)
  → Bot 3 gets strong piece: GENERAL_BLACK(13)
  → Bot 4 gets strong piece: ELEPHANT_RED(10)
🛡️ DEBUG: Guaranteed no-redeal hands dealt:
🔧 DEBUG: Final hands verification:
  Andy: ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
  Bot 2: ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)']
    → Strong pieces (>9): 4
    → Has RED_GENERAL: True
  Bot 3: ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)']
    → Strong pieces (>9): 2
    → Has RED_GENERAL: False
  Bot 4: ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)']
    → Strong pieces (>9): 1
    → Has RED_GENERAL: False
✅ SUCCESS: No weak hands - redeal prevented!
{"timestamp": "2025-07-03T01:50:56.685125Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udd0d Weak hand check - Found 0 weak players: set()", "module": "preparation_state", "function": "_deal_cards", "line": 141}
{"timestamp": "2025-07-03T01:50:56.685194Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udd0d STARTER_DEBUG: Current round number: 1", "module": "preparation_state", "function": "_determine_starter", "line": 396}
🔍 STARTER_DEBUG: Looking for GENERAL_RED holder in round 1
🔍 STARTER_DEBUG: Checking player Andy
🔍 STARTER_DEBUG: Player Andy hand: ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)']
🔍 STARTER_DEBUG: Checking piece 'HORSE_RED(6)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'HORSE_BLACK(5)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'SOLDIER_RED(2)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'CHARIOT_BLACK(7)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'CANNON_RED(4)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'ADVISOR_BLACK(11)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'HORSE_RED(6)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'SOLDIER_RED(2)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking player Bot 2
🔍 STARTER_DEBUG: Player Bot 2 hand: ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)']
🔍 STARTER_DEBUG: Checking piece 'CANNON_RED(4)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'SOLDIER_RED(2)' for GENERAL_RED
🔍 STARTER_DEBUG: Checking piece 'GENERAL_RED(14)' for GENERAL_RED
✅ STARTER_DEBUG: Found GENERAL_RED in Bot 2's hand!
{"timestamp": "2025-07-03T01:50:56.685324Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf Starter: Bot 2 (has GENERAL_RED)", "module": "preparation_state", "function": "_determine_starter", "line": 411}
✅ PREP_STATE_DEBUG: No weak hands - determined new starter: Bot 2
{"timestamp": "2025-07-03T01:50:56.685378Z", "level": "INFO", "logger": "game.state.preparation", "message": "\u2705 No weak hands - determined new starter: Bot 2", "module": "preparation_state", "function": "_deal_cards", "line": 212}
🎯 PREP_STATE_DEBUG: No weak hands detected - auto-transitioning to Declaration phase
{"timestamp": "2025-07-03T01:50:56.685419Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf No weak hands detected - transitioning to Declaration phase", "module": "preparation_state", "function": "_deal_cards", "line": 217}
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: True
🔧 ASYNC_DEBUG: Transition depth: 1
🔧 REENTRANT_FIX: Already in transition (depth=1), proceeding without lock
🔍 TRANSITION_SOURCE: GamePhase.PREPARATION -> GamePhase.DECLARATION called from /Users/nrw/python/tui-project/liap-tui/backend/engine/state_machine/states/preparation_state.py:218 in _deal_cards
🔍 TRANSITION_REASON: No weak hands detected - preparation complete
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-03T01:50:56.688855Z", "level": "INFO", "logger": "game.state.preparation", "message": "Exiting preparation phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-03T01:50:56.689857Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83c\udfaf Round starter already set: Bot 2", "module": "preparation_state", "function": "_cleanup_phase", "line": 94}
🎯 PREP_STATE_DEBUG: Cleanup phase - current_player: Bot 2
🎯 PREP_STATE_DEBUG: Cleanup phase - round_starter: Bot 2
{"timestamp": "2025-07-03T01:50:56.689986Z", "level": "INFO", "logger": "game.state.preparation", "message": "\ud83d\udccb Preparation complete - Starter: Bot 2, Multiplier: 1x", "module": "preparation_state", "function": "_cleanup_phase", "line": 105}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for declaration
🔧 BASE_STATE_DEBUG: on_enter() called for declaration phase
{"timestamp": "2025-07-03T01:50:56.690130Z", "level": "INFO", "logger": "game.state.declaration", "message": "Entering declaration phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for declaration
📢 DECL_STATE_DEBUG: Using round_starter: Bot 2
{"timestamp": "2025-07-03T01:50:56.690265Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup - basic data", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
🔧 BROADCAST_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'allowed_actions': ['player_disconnect', 'player_reconnect', 'timeout', 'declare'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Declaration phase setup - basic data', 'sequence': 1, 'timestamp': 1751507456.690515, 'operation_id': 'declaration_phase_change_1', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1266 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:50:56.690853Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Declaration phase setup - basic data", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup - basic data
{"timestamp": "2025-07-03T01:50:56.691010Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Declaration phase setup complete - current declarer: Bot 2", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
🔧 BROADCAST_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'allowed_actions': ['player_disconnect', 'player_reconnect', 'timeout', 'declare'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Declaration phase setup complete - current declarer: Bot 2', 'sequence': 2, 'timestamp': 1751507456.6912, 'operation_id': 'declaration_phase_change_2', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1315 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:50:56.691456Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Declaration phase setup complete - current declarer: Bot 2", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Declaration phase setup complete - current declarer: Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'current_declarer': 'Bot 2', 'reason': 'Declaration phase setup complete - current declarer: Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
🤖 BOT_SINGLE_DECLARE: Handling declaration for Bot 2
🤖 BOT_SINGLE_DECLARE: Bot Bot 2 will declare in 1.5s...
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Broadcasting event 'phase_change' (op_id: declaration_phase_change_1) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 6E0ABC.
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Broadcasting event 'phase_change' (op_id: declaration_phase_change_2) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 6E0ABC.
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🤖 BOT_SINGLE_DECLARE: Bot Bot 2 declaring at position 0
🔧 BOT_DECLARE_DEBUG: Step 1 - Validating action synchronously
🔧 VALIDATE_ACTION_DEBUG: validate_action called for Bot 2 declare
✅ VALIDATE_ACTION_DEBUG: Action validation passed for Bot 2
✅ BOT_DECLARE_DEBUG: Action validation passed for Bot 2
🔧 BOT_DECLARE_DEBUG: Step 2 - Executing action via fire-and-forget
✅ BOT_DECLARE_DEBUG: Fire-and-forget execution task created for Bot 2
✅ Bot Bot 2 declared 5
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
🤖 DECLARATION_DEBUG: Triggering bot manager for declaration phase
🔧 DECLARATION_DEBUG: Bot manager active games: ['6E0ABC']
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for declaration
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for declaration
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10b4acb50>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'preparation', 'new_phase': 'declaration', 'timestamp': '2025-07-02T18:50:58.162148', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 1, 'player_count': 4, 'current_player': 'Bot 2'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to declaration with reason: No weak hands detected - preparation complete
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for declaration
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'declaration', 'allowed_actions': ['player_disconnect', 'player_reconnect', 'timeout', 'declare'], 'phase_data': {'declaration_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
🔧 BROADCAST_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=True)
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'allowed_actions': ['player_disconnect', 'player_reconnect', 'timeout', 'declare'], 'phase_data': {'declaration_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'current_declarer_index': 0, 'declarations': {}, 'declaration_total': 0, 'current_declarer': 'Bot 2'}, 'immediate': True, 'reason': 'No weak hands detected - preparation complete', 'display': {'type': 'declaration', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'timestamp': 1751507458.162611, 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1322 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
🔧 EXECUTE_ACTION_DEBUG: execute_action called for Bot 2 declare
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 2
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10b4acb50>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-03T01:50:58.163227Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Player Bot 2 declared 5", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
🔧 BROADCAST_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'allowed_actions': ['player_disconnect', 'player_reconnect', 'timeout', 'declare'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 5}, 'declaration_total': 5, 'current_declarer': 'Bot 3'}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Player Bot 2 declared 5', 'sequence': 3, 'timestamp': 1751507458.1634119, 'operation_id': 'declaration_phase_change_3', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1293 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for declaration
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase declaration for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'round_started' for room 6E0ABC with data: {'phase': 'declaration', 'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'round_started' with data keys: ['phase', 'starter']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'round_started'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎪 BOT_HANDLER_DEBUG: Analyzing round start
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action round_start (lock-free)
🔍 BOT_ROUND_DEBUG: Game state current_order: None
🔍 BOT_ROUND_DEBUG: Game round_starter: Bot 2
🔍 BOT_ROUND_DEBUG: Game current_player: Bot 2
🔧 BOT_ROUND_DEBUG: Declarations now handled by enterprise phase change - skipping old path
✅ BOT_MANAGER_LOCK_FIX: Action round_start completed successfully
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.PREPARATION -> GamePhase.DECLARATION
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for preparation
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for preparation
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.DECLARATION
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10b4acb50>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: None -> GamePhase.PREPARATION
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': None, 'new_phase': 'preparation', 'timestamp': '2025-07-02T18:50:58.164033', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 1, 'player_count': 4, 'current_player': 'Bot 2'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to preparation with reason: Initial state machine start
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for preparation
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'preparation', 'allowed_actions': ['player_disconnect', 'player_reconnect', 'timeout', 'declare'], 'phase_data': {'declaration_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 5}, 'declaration_total': 5, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Initial state machine start'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
🔧 BROADCAST_DEDUP: Allowing critical phase_change through (phase=preparation, immediate=True)
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'preparation', 'allowed_actions': ['player_disconnect', 'player_reconnect', 'timeout', 'declare'], 'phase_data': {'declaration_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 5}, 'declaration_total': 5, 'current_declarer': 'Bot 3'}, 'immediate': True, 'reason': 'Initial state machine start', 'display': {'type': 'preparation', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'timestamp': 1751507458.1645162, 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1315 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:50:58.164901Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Bot 2 declared 5", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 declared 5
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 1, 'declarations': {'Bot 2': 5}, 'declaration_total': 5, 'current_declarer': 'Bot 3'}, 'current_declarer': 'Bot 3', 'reason': 'Player Bot 2 declared 5'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
🤖 BOT_SINGLE_DECLARE: Handling declaration for Bot 3
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 will declare in 1.1s...
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for preparation
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase preparation for room 6E0ABC
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: None -> GamePhase.PREPARATION
✅ [Room 6E0ABC] Game and StateMachine started successfully: op_id=6E0ABC_1
✅ [Room 6E0ABC] Bot manager registered for 3 bots
✅ Game started in room 6E0ABC
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=True)
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 6E0ABC.
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Broadcasting event 'phase_change' (op_id: declaration_phase_change_3) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 6E0ABC.
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Allowing critical phase_change through (phase=preparation, immediate=True)
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 6E0ABC.
DEBUG_WS_DISCONNECT: WebSocket client disconnected from room 6E0ABC.
INFO:     connection closed
DEBUG_WS: Unregistered connection for room 6E0ABC. Remaining connections: 0
DEBUG_WS: Room 6E0ABC has active game - keeping broadcast queue alive
INFO:     ('127.0.0.1', 64050) - "WebSocket /ws/6E0ABC" [accepted]
DEBUG_WS: Registered new connection for room 6E0ABC. Total connections: 1
INFO:     connection open
DEBUG_WS_RECEIVE: Received event 'client_ready' from client in room 6E0ABC with data: {'room_id': '6E0ABC'}
DEBUG_WS_RECEIVE: Sent current game phase declaration to client in room 6E0ABC
DEBUG_WS_RECEIVE: Sent initial room state to client in room 6E0ABC after client_ready.
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🤖 BOT_SINGLE_DECLARE: Bot Bot 3 declaring at position 1
🔧 BOT_DECLARE_DEBUG: Step 1 - Validating action synchronously
🔧 VALIDATE_ACTION_DEBUG: validate_action called for Bot 3 declare
✅ VALIDATE_ACTION_DEBUG: Action validation passed for Bot 3
✅ BOT_DECLARE_DEBUG: Action validation passed for Bot 3
🔧 BOT_DECLARE_DEBUG: Step 2 - Executing action via fire-and-forget
✅ BOT_DECLARE_DEBUG: Fire-and-forget execution task created for Bot 3
✅ Bot Bot 3 declared 2
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
🤖 DECLARATION_DEBUG: Triggering bot manager after Bot 2 declared
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
{"timestamp": "2025-07-03T01:50:59.225477Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Bot 2 declared 5", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 BOT_DECLARE_DEBUG: Execution result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 1.0627110004425049, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 2', 'value': 5, 'total': 5}}
🔧 EXECUTE_ACTION_DEBUG: execute_action called for Bot 3 declare
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 3
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10b4acb50>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-03T01:50:59.226231Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Player Bot 3 declared 2", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
🔧 BROADCAST_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'allowed_actions': ['player_disconnect', 'player_reconnect', 'timeout', 'declare'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 2, 'declarations': {'Bot 2': 5, 'Bot 3': 2}, 'declaration_total': 7, 'current_declarer': 'Bot 4'}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Player Bot 3 declared 2', 'sequence': 4, 'timestamp': 1751507459.2265532, 'operation_id': 'declaration_phase_change_4', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1305 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:50:59.226872Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Bot 3 declared 2", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 declared 2
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 2, 'declarations': {'Bot 2': 5, 'Bot 3': 2}, 'declaration_total': 7, 'current_declarer': 'Bot 4'}, 'current_declarer': 'Bot 4', 'reason': 'Player Bot 3 declared 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_declaration (lock-free)
🤖 BOT_SINGLE_DECLARE: Handling declaration for Bot 4
🤖 BOT_SINGLE_DECLARE: Bot Bot 4 will declare in 0.6s...
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Broadcasting event 'phase_change' (op_id: declaration_phase_change_4) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 6E0ABC.
🔍 BOT_DEBUG: Got declaration order from state machine: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🤖 BOT_SINGLE_DECLARE: Bot Bot 4 declaring at position 2
🔧 BOT_DECLARE_DEBUG: Step 1 - Validating action synchronously
🔧 VALIDATE_ACTION_DEBUG: validate_action called for Bot 4 declare
✅ VALIDATE_ACTION_DEBUG: Action validation passed for Bot 4
✅ BOT_DECLARE_DEBUG: Action validation passed for Bot 4
🔧 BOT_DECLARE_DEBUG: Step 2 - Executing action via fire-and-forget
✅ BOT_DECLARE_DEBUG: Fire-and-forget execution task created for Bot 4
✅ Bot Bot 4 declared 1
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_declaration completed successfully
🤖 DECLARATION_DEBUG: Triggering bot manager after Bot 3 declared
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
{"timestamp": "2025-07-03T01:50:59.863526Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Bot 3 declared 2", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 BOT_DECLARE_DEBUG: Execution result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.6377720832824707, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 3', 'value': 2, 'total': 7}}
🔧 EXECUTE_ACTION_DEBUG: execute_action called for Bot 4 declare
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for declare from Bot 4
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10b4acb50>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
{"timestamp": "2025-07-03T01:50:59.863923Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfae Phase Data Update: Player Bot 4 declared 1", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
🔧 BROADCAST_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'allowed_actions': ['player_disconnect', 'player_reconnect', 'timeout', 'declare'], 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 3, 'declarations': {'Bot 2': 5, 'Bot 3': 2, 'Bot 4': 1}, 'declaration_total': 8, 'current_declarer': 'Andy'}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Player Bot 4 declared 1', 'sequence': 5, 'timestamp': 1751507459.864074, 'operation_id': 'declaration_phase_change_5', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1315 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:50:59.864285Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Bot 4 declared 1", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 declared 1
🤖 ENTERPRISE_DATA_DEBUG: Declaration phase - current declarer: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'declaration', 'phase_data': {'declaration_order': ['Bot 2 - 0 pts', 'Bot 3 - 0 pts', 'Bot 4 - 0 pts', 'Andy - 0 pts'], 'current_declarer_index': 3, 'declarations': {'Bot 2': 5, 'Bot 3': 2, 'Bot 4': 1}, 'declaration_total': 8, 'current_declarer': 'Andy'}, 'current_declarer': 'Andy', 'reason': 'Player Bot 4 declared 1'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_declarer', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 0 bot actions (lock-free)
🤖 DECLARATION_DEBUG: Triggering bot manager after Bot 4 declared
⚠️ DECLARATION_DEBUG: No room_id found to trigger bot manager
{"timestamp": "2025-07-03T01:50:59.864502Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Bot 4 declared 1", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 BOT_DECLARE_DEBUG: Execution result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.0008420944213867188, 'reason': 'Declaration processed successfully', 'data': {'status': 'declaration_recorded', 'player': 'Bot 4', 'value': 1, 'total': 8}}
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Allowing critical phase_change through (phase=declaration, immediate=False)
DEBUG_WS: Broadcasting event 'phase_change' (op_id: declaration_phase_change_5) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 6E0ABC.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751507485119}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 6E0ABC with data: {'timestamp': 1751507488200}
DEBUG_WS_RECEIVE: Received event 'declare' from client in room 6E0ABC with data: {'value': 2, 'player_name': 'Andy'}
🔧 HANDLE_ACTION_DEBUG: handle_action called for Andy declare
🔧 HANDLE_ACTION_DEBUG: State machine running check: True
🔧 HANDLE_ACTION_DEBUG: Converting action to event
🔧 HANDLE_ACTION_DEBUG: Creating GameEvent from action
🔧 HANDLE_ACTION_DEBUG: GameEvent created successfully
🔧 HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for declare from Andy
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for declare
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.declaration_state.DeclarationState object at 0x10b4acb50>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🎯 DECLARATION_DEBUG: Final declaration by Andy - atomic transition to Turn phase
{"timestamp": "2025-07-03T01:51:49.006016Z", "level": "INFO", "logger": "game.state.declaration", "message": "\ud83c\udfaf Final declaration by Andy - atomic transition to Turn phase", "module": "declaration_state", "function": "_handle_declaration", "line": 148}
🔧 TRANSITION_DEBUG: _immediate_transition_to called: GamePhase.DECLARATION -> GamePhase.TURN
🔧 ASYNC_DEBUG: Thread: MainThread
🔧 ASYNC_DEBUG: Is running: True
🔧 ASYNC_DEBUG: Transition lock acquired: False
🔧 ASYNC_DEBUG: Transition depth: 0
🔧 CONCURRENCY_FIX: Acquired transition lock for GamePhase.DECLARATION -> GamePhase.TURN
🔍 TRANSITION_SOURCE: GamePhase.DECLARATION -> GamePhase.TURN called from /Users/nrw/python/tui-project/liap-tui/backend/engine/state_machine/states/declaration_state.py:170 in _handle_declaration
🔍 TRANSITION_REASON: All player declarations complete - final: Andy declared 2
🔧 TRANSITION_DEBUG: Starting transition steps...
🔧 TRANSITION_DEBUG: Step 1 - Cleanup tasks
🔧 TRANSITION_DEBUG: Step 2 - Exit current state
{"timestamp": "2025-07-03T01:51:49.014119Z", "level": "INFO", "logger": "game.state.declaration", "message": "Exiting declaration phase", "module": "base_state", "function": "on_exit", "line": 52}
{"timestamp": "2025-07-03T01:51:49.014236Z", "level": "INFO", "logger": "game.state.declaration", "message": "Copied declarations to game: {'Bot 2': 5, 'Bot 3': 2, 'Bot 4': 1, 'Andy': 2}", "module": "declaration_state", "function": "_cleanup_phase", "line": 95}
🔧 TRANSITION_DEBUG: Step 3 - Atomic state update
🔧 TRANSITION_DEBUG: Step 4 - Enter new state
🔧 TRANSITION_DEBUG: Step 4a - About to call on_enter() for turn
🔧 BASE_STATE_DEBUG: on_enter() called for turn phase
{"timestamp": "2025-07-03T01:51:49.014421Z", "level": "INFO", "logger": "game.state.turn", "message": "Entering turn phase", "module": "base_state", "function": "on_enter", "line": 37}
🔧 BASE_STATE_DEBUG: Clearing phase_data
🔧 BASE_STATE_DEBUG: About to call _setup_phase() for turn
🔧 TURN_STATE_DEBUG: _setup_phase() called
🔧 TURN_STATE_DEBUG: Got game object: <engine.game.Game object at 0x10b5dffd0>
🔧 TURN_STATE_DEBUG: Initial turn starter from game: Bot 2
🔧 TURN_STATE_DEBUG: Final turn starter: Bot 2
{"timestamp": "2025-07-03T01:51:49.014544Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfaf Turn phase starting - Bot 2 starts first turn", "module": "turn_state", "function": "_setup_phase", "line": 106}
🔧 TURN_STATE_DEBUG: About to call _start_new_turn()
🎯 NEW_TURN_DEBUG: Round 1, Turn 1 starting with starter Bot 2
🔧 NEW_TURN_DEBUG: About to notify bot manager for Bot 2
🔧 NEW_TURN_DEBUG: Bot manager notification task created (fire-and-forget)
🔧 NEW_TURN_DEBUG: Bot manager notification completed (non-blocking)
🔧 NEW_TURN_DEBUG: Getting current_turn_number from game.turn_number
🔧 NEW_TURN_DEBUG: Got current_turn_number: 1
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 1
🔧 NEW_TURN_DEBUG: About to call update_phase_data
{"timestamp": "2025-07-03T01:51:49.014754Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: New turn 1 started with starter Bot 2", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'round': 1, 'reason': 'New turn 1 started with starter Bot 2', 'sequence': 1, 'timestamp': 1751507509.0149162, 'operation_id': 'turn_phase_change_1', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1304 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 6E0ABC with data: {'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'turn_started' with data keys: ['starter']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'turn_started'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing turn start
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action turn_start (lock-free)
🎮 Bot Manager: Handling turn start for Bot 2
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 0.9s...
{"timestamp": "2025-07-03T01:51:49.015426Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - New turn 1 started with starter Bot 2", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 1 started with starter Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 2', 'reason': 'New turn 1 started with starter Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
✅ REFINED_FIX: Allowing new trigger for current player Bot 2 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from phase_change (hash: 36a22356f55e)
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_turn_play (lock-free)
🔧 CIRCUIT_BREAKER_DEBUG: No last_player provided - stopping bot processing
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_turn_play completed successfully
🔧 NEW_TURN_DEBUG: update_phase_data completed successfully
{"timestamp": "2025-07-03T01:51:49.015899Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfaf New turn started - order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']", "module": "turn_state", "function": "_start_new_turn", "line": 277}
🔧 TURN_STATE_DEBUG: _start_new_turn() completed successfully
🔧 BASE_STATE_DEBUG: _setup_phase() completed successfully for turn
🔧 TRANSITION_DEBUG: Step 4b - on_enter() completed for turn
🔧 TRANSITION_DEBUG: Step 4c - Checking current state after on_enter()
🔧 TRANSITION_DEBUG: Current phase: GamePhase.TURN
🔧 TRANSITION_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10b4e57d0>
🔧 TRANSITION_DEBUG: Is running: True
🔧 TRANSITION_DEBUG: Step 5 - About to store event
🔧 STORE_EVENT_DEBUG: _store_phase_change_event called: GamePhase.DECLARATION -> GamePhase.TURN
🔧 STORE_EVENT_DEBUG: Prepared payload: {'old_phase': 'declaration', 'new_phase': 'turn', 'timestamp': '2025-07-02T18:51:49.016018', 'game_state': {}}
🔧 STORE_EVENT_DEBUG: Added game context: {'round_number': 1, 'player_count': 4, 'current_player': 'Bot 2'}
🔧 STORE_EVENT_DEBUG: About to call action_queue.store_state_event
🔧 STORE_EVENT_DEBUG: action_queue.store_state_event completed
🔧 STORE_EVENT_DEBUG: Event storage successful
🔧 TRANSITION_DEBUG: Step 5 - Store event completed
🔧 TRANSITION_DEBUG: Step 6 - About to broadcast
🚀 STATE_MACHINE_DEBUG: Broadcasting phase change to turn with reason: All player declarations complete - final: Andy declared 2
🔧 BROADCAST_DEBUG: _broadcast_phase_change_with_display_metadata called for turn
🔧 BROADCAST_DEBUG: Prepared base_data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'immediate': True, 'reason': 'All player declarations complete - final: Andy declared 2'}
🔧 BROADCAST_DEBUG: Added display config: {'type': 'turn_active', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}
🔧 BROADCAST_DEBUG: Added players data: ['Andy', 'Bot 2', 'Bot 3', 'Bot 4']
🔧 BROADCAST_DEBUG: About to call broadcast_event with phase_change
🔧 BROADCAST_EVENT_DEBUG: broadcast_event called with type: phase_change
🔧 BROADCAST_EVENT_DEBUG: Callback available, calling broadcast_callback
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
🔧 BROADCAST_DEDUP: Allowing critical phase_change through (phase=turn, immediate=True)
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 1}, 'immediate': True, 'reason': 'All player declarations complete - final: Andy declared 2', 'display': {'type': 'turn_active', 'show_for_seconds': None, 'auto_advance': False, 'can_skip': False}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)'], 'hand_size': 8}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'timestamp': 1751507509.016288, 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1380 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
🔧 BROADCAST_EVENT_DEBUG: broadcast_callback completed successfully
🔧 BROADCAST_DEBUG: broadcast_event completed successfully
✅ STATE_MACHINE_DEBUG: Phase change broadcast completed for turn
🔧 TRANSITION_DEBUG: Step 7 - About to notify bot manager
🤖 STATE_MACHINE_DEBUG: Notifying bot manager about phase turn for room 6E0ABC
🔧 DUPLICATE_FIX: Skipping duplicate turn_started event - turn state handles this
🔧 TRANSITION_DEBUG: Step 7 - Bot manager notification completed
✅ TRANSITION_DEBUG: All transition steps completed successfully: GamePhase.DECLARATION -> GamePhase.TURN
{"timestamp": "2025-07-03T01:51:49.016593Z", "level": "INFO", "logger": "game.state.declaration", "message": "Player Andy declared 2", "module": "declaration_state", "function": "_handle_declaration", "line": 193}
✅ PROCESS_EVENT_DEBUG: State process_event completed: False
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: False
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.011s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': False, 'immediate': True, 'transition': False, 'processing_time': 0.011155128479003906, 'reason': "Declaration processing error: 'declaration_order'", 'data': {}}
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Allowing critical phase_change through (phase=turn, immediate=True)
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'phase_change' to a client in room 6E0ABC.
🤖 Bot Bot 2 choosing first play...
🔧 BOT_SUBMIT_DEBUG: _bot_play_first() method called for Bot 2
🔧 BOT_SUBMIT_DEBUG: Bot hand: ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_RED(10)', 'ELEPHANT_BLACK(9)']
🔧 BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for first play by Bot 2
🔧 BOT_SUBMIT_DEBUG: Hand size: 8, Required count: None (first play)
🤖 BOT chooses to play EXTENDED_STRAIGHT (48 pts): GENERAL, ADVISOR, ADVISOR, ELEPHANT
🔧 BOT_SUBMIT_DEBUG: ai.choose_best_play returned 4 pieces for first play by Bot 2
🤖 Bot Bot 2 will play 4 pieces: ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)']
🔧 BOT_SUBMIT_DEBUG: This is from _bot_play_first() - bot is first player
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play_first for Bot Bot 2
🔧 BOT_SUBMIT_DEBUG: Selected pieces count: 4
🔧 BOT_SUBMIT_DEBUG: Selected pieces: ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)']
🔧 BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 2
🔧 BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 2
🔧 BOT_SUBMIT_DEBUG: Action details - player: Bot 2, type: ActionType.PLAY_PIECES, is_bot: True
🔧 BOT_SUBMIT_DEBUG: Action payload pieces count: 4
🔧 BOT_SUBMIT_DEBUG: Step 1 - Validating first play action synchronously
🔧 VALIDATE_ACTION_DEBUG: validate_action called for Bot 2 play_pieces
🔧 VALIDATION_DEBUG: Validating bot Bot 2 action
🔧 VALIDATION_DEBUG: Current player: Bot 2
🔧 VALIDATION_DEBUG: Turn plays: []
🔧 VALIDATION_DEBUG: Payload: {'pieces': [GENERAL_RED(14), ADVISOR_RED(12), ADVISOR_RED(12), ELEPHANT_RED(10)]}
🔧 VALIDATION_DEBUG: Required piece count: None
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 2 == Bot 2
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 2 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 4 pieces
🔧 VALIDATION_DEBUG: Piece count: 4, Required: None
✅ VALIDATION_DEBUG: Starter piece count validation PASSED - 4 in 1-6 range
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 2
✅ VALIDATE_ACTION_DEBUG: Action validation passed for Bot 2
✅ BOT_SUBMIT_DEBUG: First play action validation passed for Bot 2
🔧 BOT_SUBMIT_DEBUG: Step 2 - Executing first play action via fire-and-forget
✅ BOT_SUBMIT_DEBUG: Fire-and-forget first play execution task created for Bot Bot 2
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 first play action queued - state machine will broadcast with correct next_player
✅ BOT_MANAGER_LOCK_FIX: Action turn_start completed successfully
🔧 EXECUTE_ACTION_DEBUG: execute_action called for Bot 2 play_pieces
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 2
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10b4e57d0>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🔧 VALIDATION_DEBUG: Validating bot Bot 2 action
🔧 VALIDATION_DEBUG: Current player: Bot 2
🔧 VALIDATION_DEBUG: Turn plays: []
🔧 VALIDATION_DEBUG: Payload: {'pieces': [GENERAL_RED(14), ADVISOR_RED(12), ADVISOR_RED(12), ELEPHANT_RED(10)]}
🔧 VALIDATION_DEBUG: Required piece count: None
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 2 == Bot 2
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 2 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 4 pieces
🔧 VALIDATION_DEBUG: Piece count: 4, Required: None
✅ VALIDATION_DEBUG: Starter piece count validation PASSED - 4 in 1-6 range
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 4 pieces: ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 4
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 4
{"timestamp": "2025-07-03T01:51:49.949009Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 2 (starter) plays 4 pieces - setting required count", "module": "turn_state", "function": "_handle_play_pieces", "line": 375}
{"timestamp": "2025-07-03T01:51:49.949163Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 2 plays: [GENERAL_RED(14), ADVISOR_RED(12), ADVISOR_RED(12), ELEPHANT_RED(10)] (value: 48)", "module": "turn_state", "function": "_handle_play_pieces", "line": 394}
🎯 IMMEDIATE_REMOVAL_DEBUG: Removing 4 pieces from Bot 2's hand
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand before: 8 pieces
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed GENERAL_RED(14) from Bot 2
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed ADVISOR_RED(12) from Bot 2
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed ADVISOR_RED(12) from Bot 2
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed ELEPHANT_RED(10) from Bot 2
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand after: 4 pieces
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 4
{"timestamp": "2025-07-03T01:51:49.949304Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Bot 2 played 4 pieces", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 4, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'piece_count': 4, 'play_type': 'EXTENDED_STRAIGHT', 'play_value': 48, 'is_valid': True, 'timestamp': 1751507509.948819}}, 'turn_complete': False, 'current_turn_number': 1}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'hand_size': 4}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)'], 'hand_size': 8}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Player Bot 2 played 4 pieces', 'sequence': 2, 'timestamp': 1751507509.949533, 'operation_id': 'turn_phase_change_2', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1432 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:51:49.949895Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Bot 2 played 4 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 4 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 4, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'piece_count': 4, 'play_type': 'EXTENDED_STRAIGHT', 'play_value': 48, 'is_valid': True, 'timestamp': 1751507509.948819}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 4 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
✅ REFINED_FIX: Allowing new trigger for current player Bot 3 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from phase_change (hash: 0005b731045b)
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_turn_play (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Bot 3, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Bot 3
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2']
🎯 PLAY_PHASE_DEBUG: Current player Bot 3 at index: 1
🎯 PLAY_PHASE_DEBUG: Current player Bot 3 hasn't played yet - triggering them
✅ REFINED_FIX: Allowing new trigger for current player Bot 3 from player_played
✅ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from player_played (hash: 7b8d11af7592)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play() for Bot 3
🔧 BOT_SUBMIT_DEBUG: Bot object: Bot 3 - 0 pts
🔧 BOT_SUBMIT_DEBUG: Bot hand size: 8
🔧 BOT_SUBMIT_DEBUG: _bot_play() method called for Bot 3
🔧 BOT_SUBMIT_DEBUG: Bot hand: ['ADVISOR_BLACK(11)', 'SOLDIER_BLACK(1)', 'GENERAL_BLACK(13)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'SOLDIER_BLACK(1)', 'HORSE_BLACK(5)']
🔧 BOT_SUBMIT_DEBUG: Starting piece selection logic for Bot 3
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 4
🔧 BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for Bot 3
🔧 BOT_SUBMIT_DEBUG: Hand size: 8, Required count: 4
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, SOLDIER, SOLDIER
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'SOLDIER', 'SOLDIER']
    🧠 Hand left: ['ADVISOR', 'SOLDIER', 'GENERAL', 'SOLDIER', 'CANNON', 'SOLDIER', 'SOLDIER', 'HORSE']
🔧 BOT_SUBMIT_DEBUG: ai.choose_best_play returned 4 pieces for Bot 3
🎯 BOT_PLAY_DEBUG: Final selection - 4 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🤖 Bot Bot 3 will play 4 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🔧 BOT_SUBMIT_DEBUG: This is from _bot_play() - bot is following another player
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play for Bot Bot 3
🔧 BOT_SUBMIT_DEBUG: Selected pieces count: 4
🔧 BOT_SUBMIT_DEBUG: Selected pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
🔧 BOT_SUBMIT_DEBUG: Required piece count was: 4
🔧 BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 3
🔧 BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 3
🔧 BOT_SUBMIT_DEBUG: Action details - player: Bot 3, type: ActionType.PLAY_PIECES, is_bot: True
🔧 BOT_SUBMIT_DEBUG: Action payload pieces count: 4
🔧 BOT_SUBMIT_DEBUG: Step 1 - Validating play action synchronously
🔧 VALIDATE_ACTION_DEBUG: validate_action called for Bot 3 play_pieces
🔧 VALIDATION_DEBUG: Validating bot Bot 3 action
🔧 VALIDATION_DEBUG: Current player: Bot 3
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 2']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2)]}
🔧 VALIDATION_DEBUG: Required piece count: 4
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 3 == Bot 3
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 3 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 4 pieces
🔧 VALIDATION_DEBUG: Piece count: 4, Required: 4
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 4 == 4
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 3
✅ VALIDATE_ACTION_DEBUG: Action validation passed for Bot 3
✅ BOT_SUBMIT_DEBUG: Play action validation passed for Bot 3
🔧 BOT_SUBMIT_DEBUG: Step 2 - Executing play action via fire-and-forget
✅ BOT_SUBMIT_DEBUG: Fire-and-forget play execution task created for Bot Bot 3
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🔧 BOT_SUBMIT_DEBUG: _bot_play() completed successfully for Bot 3
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_turn_play completed successfully
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
{"timestamp": "2025-07-03T01:51:50.674075Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room 6E0ABC - Player Bot 2 played 4 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 311}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🔧 PLAY_NOTIFY_DEBUG: Bot manager play notification task created (fire-and-forget)
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [GENERAL_RED(14), ADVISOR_RED(12), ADVISOR_RED(12), ELEPHANT_RED(10)], 'piece_count': 4, 'required_count': 4, 'next_player': 'Bot 3', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
✅ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 2
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.7258145809173584, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [GENERAL_RED(14), ADVISOR_RED(12), ADVISOR_RED(12), ELEPHANT_RED(10)], 'piece_count': 4, 'required_count': 4, 'next_player': 'Bot 3', 'turn_complete': False}}
🔧 EXECUTE_ACTION_DEBUG: execute_action called for Bot 3 play_pieces
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 3
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10b4e57d0>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🔧 VALIDATION_DEBUG: Validating bot Bot 3 action
🔧 VALIDATION_DEBUG: Current player: Bot 3
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 2']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2)]}
🔧 VALIDATION_DEBUG: Required piece count: 4
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 3 == Bot 3
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 3 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 4 pieces
🔧 VALIDATION_DEBUG: Piece count: 4, Required: 4
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 4 == 4
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 4 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)']
{"timestamp": "2025-07-03T01:51:50.675040Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 3 plays: [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2)] (value: 5)", "module": "turn_state", "function": "_handle_play_pieces", "line": 394}
🎯 IMMEDIATE_REMOVAL_DEBUG: Removing 4 pieces from Bot 3's hand
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand before: 8 pieces
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed SOLDIER_BLACK(1) from Bot 3
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed SOLDIER_BLACK(1) from Bot 3
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed SOLDIER_BLACK(1) from Bot 3
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed SOLDIER_RED(2) from Bot 3
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand after: 4 pieces
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 4
{"timestamp": "2025-07-03T01:51:50.675225Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Bot 3 played 4 pieces", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 4, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'piece_count': 4, 'play_type': 'EXTENDED_STRAIGHT', 'play_value': 48, 'is_valid': True, 'timestamp': 1751507509.948819}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 5, 'is_valid': False, 'timestamp': 1751507510.674685}}, 'turn_complete': False, 'current_turn_number': 1}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'hand_size': 4}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'hand_size': 4}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'hand_size': 8}}, 'round': 1, 'reason': 'Player Bot 3 played 4 pieces', 'sequence': 4, 'timestamp': 1751507510.6755142, 'operation_id': 'turn_phase_change_4', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1566 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
DEBUG_WS: Entering broadcast method for room 6E0ABC, event play
DEBUG_WS: Attempting to queue event 'play' for room 6E0ABC with data: {'player': 'Bot 2', 'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'valid': True, 'play_type': 'EXTENDED_STRAIGHT', 'next_player': 'Bot 3', 'required_count': 4, 'turn_complete': False, 'phase': 'turn', 'sequence': 3, 'timestamp': 1751507510.6758988, 'reason': 'Player Bot 2 played 4 pieces', 'operation_id': 'turn_play_3', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 412 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room 6E0ABC.
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 6E0ABC with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'player_played' with data keys: ['player_name']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'player_played'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎯 BOT_HANDLER_DEBUG: Analyzing play phase
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action play_phase (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Bot 4, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Bot 4
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 at index: 2
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 hasn't played yet - triggering them
✅ REFINED_FIX: Allowing new trigger for current player Bot 4 from player_played
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from player_played (hash: a255bbd883a2)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.6s...
{"timestamp": "2025-07-03T01:51:50.676657Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Bot 3 played 4 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 4 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 4, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'piece_count': 4, 'play_type': 'EXTENDED_STRAIGHT', 'play_value': 48, 'is_valid': True, 'timestamp': 1751507509.948819}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 5, 'is_valid': False, 'timestamp': 1751507510.674685}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 4 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
✅ REFINED_FIX: Allowing new trigger for current player Bot 4 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from phase_change (hash: 31f0be51cbe1)
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_turn_play (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Bot 4, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Bot 4
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 at index: 2
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 hasn't played yet - triggering them
🚫 REFINED_FIX: Blocking rapid same-source trigger for current player Bot 4 from player_played (age: 0.0s)
🚫 RACE_CONDITION_FIX: Skipping duplicate bot play for Bot 4 in _handle_play_phase
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_turn_play completed successfully
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
{"timestamp": "2025-07-03T01:51:50.677346Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room 6E0ABC - Player Bot 3 played 4 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 311}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🔧 PLAY_NOTIFY_DEBUG: Bot manager play notification task created (fire-and-forget)
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2)], 'piece_count': 4, 'required_count': 4, 'next_player': 'Bot 4', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
✅ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 3
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.003069162368774414, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2)], 'piece_count': 4, 'required_count': 4, 'next_player': 'Bot 4', 'turn_complete': False}}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event play
DEBUG_WS: Attempting to queue event 'play' for room 6E0ABC with data: {'player': 'Bot 3', 'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'valid': True, 'play_type': 'INVALID', 'next_player': 'Bot 4', 'required_count': 4, 'turn_complete': False, 'phase': 'turn', 'sequence': 5, 'timestamp': 1751507510.677757, 'reason': 'Player Bot 3 played 4 pieces', 'operation_id': 'turn_play_5', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 402 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room 6E0ABC.
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 6E0ABC with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'player_played' with data keys: ['player_name']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'player_played'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎯 BOT_HANDLER_DEBUG: Analyzing play phase
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action play_phase (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Bot 4, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Bot 4
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 at index: 2
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 hasn't played yet - triggering them
🚫 REFINED_FIX: Blocking rapid same-source trigger for current player Bot 4 from player_played (age: 0.0s)
🚫 RACE_CONDITION_FIX: Skipping duplicate bot play for Bot 4 in _handle_play_phase
✅ BOT_MANAGER_LOCK_FIX: Action play_phase completed successfully
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
DEBUG_WS_QUEUE: Room 6E0ABC got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: turn_play_3) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'play' to a client in room 6E0ABC.
DEBUG_WS_QUEUE: Room 6E0ABC got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: turn_play_5) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'play' to a client in room 6E0ABC.
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play() for Bot 4
🔧 BOT_SUBMIT_DEBUG: Bot object: Bot 4 - 0 pts
🔧 BOT_SUBMIT_DEBUG: Bot hand size: 8
🔧 BOT_SUBMIT_DEBUG: _bot_play() method called for Bot 4
🔧 BOT_SUBMIT_DEBUG: Bot hand: ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)']
🔧 BOT_SUBMIT_DEBUG: Starting piece selection logic for Bot 4
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 4
🔧 BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for Bot 4
🔧 BOT_SUBMIT_DEBUG: Hand size: 8, Required count: 4
🤖 BOT has no valid play. Discards lowest pieces: SOLDIER, SOLDIER, SOLDIER, CANNON
    🔍 Final play: ['SOLDIER', 'SOLDIER', 'SOLDIER', 'CANNON']
    🧠 Hand left: ['CHARIOT', 'ELEPHANT', 'CHARIOT', 'SOLDIER', 'SOLDIER', 'CANNON', 'SOLDIER', 'CHARIOT']
🔧 BOT_SUBMIT_DEBUG: ai.choose_best_play returned 4 pieces for Bot 4
🎯 BOT_PLAY_DEBUG: Final selection - 4 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
🤖 Bot Bot 4 will play 4 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
🔧 BOT_SUBMIT_DEBUG: This is from _bot_play() - bot is following another player
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play for Bot Bot 4
🔧 BOT_SUBMIT_DEBUG: Selected pieces count: 4
🔧 BOT_SUBMIT_DEBUG: Selected pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
🔧 BOT_SUBMIT_DEBUG: Required piece count was: 4
🔧 BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 4
🔧 BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 4
🔧 BOT_SUBMIT_DEBUG: Action details - player: Bot 4, type: ActionType.PLAY_PIECES, is_bot: True
🔧 BOT_SUBMIT_DEBUG: Action payload pieces count: 4
🔧 BOT_SUBMIT_DEBUG: Step 1 - Validating play action synchronously
🔧 VALIDATE_ACTION_DEBUG: validate_action called for Bot 4 play_pieces
🔧 VALIDATION_DEBUG: Validating bot Bot 4 action
🔧 VALIDATION_DEBUG: Current player: Bot 4
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 2', 'Bot 3']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2), CANNON_BLACK(3)]}
🔧 VALIDATION_DEBUG: Required piece count: 4
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 4 == Bot 4
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 4 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 4 pieces
🔧 VALIDATION_DEBUG: Piece count: 4, Required: 4
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 4 == 4
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 4
✅ VALIDATE_ACTION_DEBUG: Action validation passed for Bot 4
✅ BOT_SUBMIT_DEBUG: Play action validation passed for Bot 4
🔧 BOT_SUBMIT_DEBUG: Step 2 - Executing play action via fire-and-forget
✅ BOT_SUBMIT_DEBUG: Fire-and-forget play execution task created for Bot Bot 4
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🔧 BOT_SUBMIT_DEBUG: _bot_play() completed successfully for Bot 4
✅ BOT_MANAGER_LOCK_FIX: Action play_phase completed successfully
🔧 EXECUTE_ACTION_DEBUG: execute_action called for Bot 4 play_pieces
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 4
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10b4e57d0>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🔧 VALIDATION_DEBUG: Validating bot Bot 4 action
🔧 VALIDATION_DEBUG: Current player: Bot 4
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 2', 'Bot 3']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2), CANNON_BLACK(3)]}
🔧 VALIDATION_DEBUG: Required piece count: 4
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 4 == Bot 4
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 4 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 4 pieces
🔧 VALIDATION_DEBUG: Piece count: 4, Required: 4
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 4 == 4
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 4 pieces: ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
{"timestamp": "2025-07-03T01:51:51.248801Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 4 plays: [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2), CANNON_BLACK(3)] (value: 7)", "module": "turn_state", "function": "_handle_play_pieces", "line": 394}
🎯 IMMEDIATE_REMOVAL_DEBUG: Removing 4 pieces from Bot 4's hand
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand before: 8 pieces
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed SOLDIER_BLACK(1) from Bot 4
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed SOLDIER_BLACK(1) from Bot 4
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed SOLDIER_RED(2) from Bot 4
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed CANNON_BLACK(3) from Bot 4
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand after: 4 pieces
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 4
{"timestamp": "2025-07-03T01:51:51.248915Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Bot 4 played 4 pieces", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 4, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'piece_count': 4, 'play_type': 'EXTENDED_STRAIGHT', 'play_value': 48, 'is_valid': True, 'timestamp': 1751507509.948819}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 5, 'is_valid': False, 'timestamp': 1751507510.674685}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 7, 'is_valid': False, 'timestamp': 1751507511.248648}}, 'turn_complete': False, 'current_turn_number': 1}, 'players': {'Andy': {'hand': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)', 'CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 8}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'hand_size': 4}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'hand_size': 4}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)'], 'hand_size': 4}}, 'round': 1, 'reason': 'Player Bot 4 played 4 pieces', 'sequence': 6, 'timestamp': 1751507511.249108, 'operation_id': 'turn_phase_change_6', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1697 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:51:51.249298Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Bot 4 played 4 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 4 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 4, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'piece_count': 4, 'play_type': 'EXTENDED_STRAIGHT', 'play_value': 48, 'is_valid': True, 'timestamp': 1751507509.948819}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 5, 'is_valid': False, 'timestamp': 1751507510.674685}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 7, 'is_valid': False, 'timestamp': 1751507511.248648}}, 'turn_complete': False, 'current_turn_number': 1}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 4 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 0 bot actions (lock-free)
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
{"timestamp": "2025-07-03T01:51:51.249553Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room 6E0ABC - Player Bot 4 played 4 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 311}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🔧 PLAY_NOTIFY_DEBUG: Bot manager play notification task created (fire-and-forget)
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2), CANNON_BLACK(3)], 'piece_count': 4, 'required_count': 4, 'next_player': 'Andy', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
✅ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 4
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.0011610984802246094, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [SOLDIER_BLACK(1), SOLDIER_BLACK(1), SOLDIER_RED(2), CANNON_BLACK(3)], 'piece_count': 4, 'required_count': 4, 'next_player': 'Andy', 'turn_complete': False}}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event play
DEBUG_WS: Attempting to queue event 'play' for room 6E0ABC with data: {'player': 'Bot 4', 'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'valid': True, 'play_type': 'INVALID', 'next_player': 'Andy', 'required_count': 4, 'turn_complete': False, 'phase': 'turn', 'sequence': 7, 'timestamp': 1751507511.249758, 'reason': 'Player Bot 4 played 4 pieces', 'operation_id': 'turn_play_7', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 400 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room 6E0ABC.
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 6E0ABC with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'player_played' with data keys: ['player_name']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'player_played'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎯 BOT_HANDLER_DEBUG: Analyzing play phase
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action play_phase (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 4, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Andy, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Andy
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Current player Andy at index: 3
🎯 PLAY_PHASE_DEBUG: Current player Andy hasn't played yet - triggering them
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
✅ BOT_MANAGER_LOCK_FIX: Action play_phase completed successfully
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
DEBUG_WS_QUEUE: Room 6E0ABC got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: turn_play_7) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'play' to a client in room 6E0ABC.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751507515119}
DEBUG_WS_RECEIVE: Received event 'ping' from client in room 6E0ABC with data: {'timestamp': 1751507518200}
DEBUG_WS_RECEIVE: Received event 'play' from client in room 6E0ABC with data: {'piece_indices': [0, 1, 2, 3], 'player_name': 'Andy', 'play_value': 20}
🎯 WS_PLAY_DEBUG: Received play event - player: Andy, indices: [0, 1, 2, 3]
🎯 WS_PLAY_DEBUG: Found player Andy with hand size 8
🎯 WS_PLAY_DEBUG: Added piece at index 0: HORSE_RED(6)
🎯 WS_PLAY_DEBUG: Added piece at index 1: HORSE_BLACK(5)
🎯 WS_PLAY_DEBUG: Added piece at index 2: SOLDIER_RED(2)
🎯 WS_PLAY_DEBUG: Added piece at index 3: CHARIOT_BLACK(7)
🎯 WS_PLAY_DEBUG: Final pieces to play: ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)']
🎯 WS_PLAY_DEBUG: Queuing action for state machine...
🔧 HANDLE_ACTION_DEBUG: handle_action called for Andy play_pieces
🔧 HANDLE_ACTION_DEBUG: State machine running check: True
🔧 HANDLE_ACTION_DEBUG: Converting action to event
🔧 HANDLE_ACTION_DEBUG: Creating GameEvent from action
🔧 HANDLE_ACTION_DEBUG: GameEvent created successfully
🔧 HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Andy
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10b4e57d0>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🔧 VALIDATION_DEBUG: Validating bot Andy action
🔧 VALIDATION_DEBUG: Current player: Andy
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 2', 'Bot 3', 'Bot 4']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [HORSE_RED(6), HORSE_BLACK(5), SOLDIER_RED(2), CHARIOT_BLACK(7)]}
🔧 VALIDATION_DEBUG: Required piece count: 4
✅ VALIDATION_DEBUG: Turn validation PASSED - Andy == Andy
✅ VALIDATION_DEBUG: Already played validation PASSED - Andy not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 4 pieces
🔧 VALIDATION_DEBUG: Piece count: 4, Required: 4
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 4 == 4
✅ VALIDATION_DEBUG: All validation checks PASSED for Andy
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Andy
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Andy
🎯 TURN_STATE_DEBUG: Current state - player_index: 3, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Andy playing 4 pieces: ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)']
{"timestamp": "2025-07-03T01:51:59.257786Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Andy plays: [HORSE_RED(6), HORSE_BLACK(5), SOLDIER_RED(2), CHARIOT_BLACK(7)] (value: 20)", "module": "turn_state", "function": "_handle_play_pieces", "line": 394}
🎯 IMMEDIATE_REMOVAL_DEBUG: Removing 4 pieces from Andy's hand
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand before: 8 pieces
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed HORSE_RED(6) from Andy
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed HORSE_BLACK(5) from Andy
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed SOLDIER_RED(2) from Andy
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed CHARIOT_BLACK(7) from Andy
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand after: 4 pieces
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 4
🎯 TURN_STATE_DEBUG: Next player: None
🎯 TURN_STATE_DEBUG: Round 1, Turn 1 - Andy played, next: None
🎯 TURN_STATE_DEBUG: Turn complete! Calling _complete_turn()
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 1 _complete_turn() called
{"timestamp": "2025-07-03T01:51:59.258698Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfaf Round 1, Turn 1 winner: Bot 2 with EXTENDED_STRAIGHT value 48", "module": "turn_state", "function": "_determine_turn_winner", "line": 529}
🎯 TURN_COMPLETE_DEBUG: Round 1, Turn 1 Winner determined: Bot 2
🎯 CAPTURED_PILES_DEBUG: Bot 2 captured_piles += 4 = 4
{"timestamp": "2025-07-03T01:51:59.258831Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udcb0 Bot 2 now has 4 piles total", "module": "turn_state", "function": "_award_piles", "line": 633}
{"timestamp": "2025-07-03T01:51:59.258913Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfc6 Bot 2 wins turn and gets 4 piles", "module": "turn_state", "function": "_complete_turn", "line": 494}
🎯 TURN_COMPLETE_DEBUG: Awarded 4 piles to Bot 2
🎯 TURN_COMPLETE_DEBUG: Next turn starter set to: Bot 2
{"timestamp": "2025-07-03T01:51:59.259032Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Turn completed - winner: Bot 2", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 4, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'piece_count': 4, 'play_type': 'EXTENDED_STRAIGHT', 'play_value': 48, 'is_valid': True, 'timestamp': 1751507509.948819}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 5, 'is_valid': False, 'timestamp': 1751507510.674685}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 7, 'is_valid': False, 'timestamp': 1751507511.248648}, 'Andy': {'pieces': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 20, 'is_valid': False, 'timestamp': 1751507519.257234}}, 'turn_complete': True, 'current_turn_number': 1, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'players': {'Andy': {'hand': ['CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 4}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'hand_size': 4}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'hand_size': 4}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)'], 'hand_size': 4}}, 'round': 1, 'reason': 'Turn completed - winner: Bot 2', 'sequence': 8, 'timestamp': 1751507519.2595022, 'operation_id': 'turn_phase_change_8', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1898 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:51:59.260070Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Turn completed - winner: Bot 2", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Turn completed - winner: Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 4, 'turn_plays': {'Bot 2': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'piece_count': 4, 'play_type': 'EXTENDED_STRAIGHT', 'play_value': 48, 'is_valid': True, 'timestamp': 1751507509.948819}, 'Bot 3': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 5, 'is_valid': False, 'timestamp': 1751507510.674685}, 'Bot 4': {'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 7, 'is_valid': False, 'timestamp': 1751507511.248648}, 'Andy': {'pieces': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'piece_count': 4, 'play_type': 'INVALID', 'play_value': 20, 'is_valid': False, 'timestamp': 1751507519.257234}}, 'turn_complete': True, 'current_turn_number': 1, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Turn completed - winner: Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
✅ REFINED_FIX: Allowing new trigger for current player Bot 2 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from phase_change (hash: 1f7b0a793f68)
🚫 SEQUENCE_FIX: Bot 2 already acted in turn 1 - skipping
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 0 bot actions (lock-free)
🎯 TURN_COMPLETE_DEBUG: Phase data updated with turn completion
🏁 TURN_COMPLETION_DEBUG: Starting turn completion processing
🔧 SOLUTION_5_DEBUG: Current phase at start: GamePhase.TURN
🏁 TURN_COMPLETION_DEBUG: Skipping card removal - already done immediately when played
🏁 TURN_COMPLETION_DEBUG: Andy played 4 pieces, current hand: 4
🏁 TURN_COMPLETION_DEBUG: Bot 2 played 4 pieces, current hand: 4
🏁 TURN_COMPLETION_DEBUG: Bot 3 played 4 pieces, current hand: 4
🏁 TURN_COMPLETION_DEBUG: Bot 4 played 4 pieces, current hand: 4
🏁 TURN_COMPLETION_DEBUG: After removing pieces, checking if all hands are empty
🏁 TURN_COMPLETION_DEBUG: all_hands_empty = False
🔧 HAND_CHECK_DEBUG: Andy has 4 pieces remaining
🔧 HAND_CHECK_DEBUG: Bot 2 has 4 pieces remaining
🔧 HAND_CHECK_DEBUG: Bot 3 has 4 pieces remaining
🔧 HAND_CHECK_DEBUG: Bot 4 has 4 pieces remaining
🔧 CONSISTENCY_CHECK: Hand sizes: {'Andy': 4, 'Bot 2': 4, 'Bot 3': 4, 'Bot 4': 4}
🔧 CONSISTENCY_CHECK: Min: 4, Max: 4
✅ CONSISTENCY_CHECK: Hand size distribution is acceptable
🏁 TURN_COMPLETION_DEBUG: Andy hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 2 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 3 hand size: 4
🏁 TURN_COMPLETION_DEBUG: Bot 4 hand size: 4
{"timestamp": "2025-07-03T01:51:59.261847Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: turn_complete to room 6E0ABC - Turn 1 completed - winner: Bot 2", "module": "base_state", "function": "broadcast_custom_event", "line": 311}
{"timestamp": "2025-07-03T01:51:59.262000Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\ude80 Enterprise broadcast turn completion - winner: Bot 2, turn piles awarded: {'Bot 2': 4, 'Andy': 0, 'Bot 3': 0, 'Bot 4': 0}", "module": "turn_state", "function": "_broadcast_turn_completion_enterprise", "line": 967}
🔧 SOLUTION_5_DEBUG: Still in TURN phase, safe to update phase data
{"timestamp": "2025-07-03T01:51:59.262188Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udd04 Updated turn order - new starter first: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']", "module": "turn_state", "function": "_update_turn_order_for_new_starter", "line": 174}
{"timestamp": "2025-07-03T01:51:59.263063Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfaf Next turn starter: Bot 2", "module": "turn_state", "function": "_process_turn_completion", "line": 712}
🏁 TURN_COMPLETION_DEBUG: Hands not empty - will start next turn immediately
{"timestamp": "2025-07-03T01:51:59.263608Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfaf Turn complete - starting next turn immediately (frontend controls display)", "module": "turn_state", "function": "_process_turn_completion", "line": 716}
🎯 START_NEXT_DEBUG: start_next_turn_if_needed() called
🎯 START_NEXT_DEBUG: turn_complete: True
🎯 START_NEXT_DEBUG: all_hands_empty: False
🎯 START_NEXT_DEBUG: Starting new turn with starter: Bot 2
🎯 NEW_TURN_DEBUG: Round 1, Turn 2 starting with starter Bot 2
🔧 NEW_TURN_DEBUG: About to notify bot manager for Bot 2
🔧 NEW_TURN_DEBUG: Bot manager notification task created (fire-and-forget)
🔧 NEW_TURN_DEBUG: Bot manager notification completed (non-blocking)
🔧 NEW_TURN_DEBUG: Getting current_turn_number from game.turn_number
🔧 NEW_TURN_DEBUG: Got current_turn_number: 2
🔢 TURN_NUMBER_DEBUG: Backend game.turn_number = 2
🔧 NEW_TURN_DEBUG: About to call update_phase_data
{"timestamp": "2025-07-03T01:51:59.264100Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: New turn 2 started with starter Bot 2", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'players': {'Andy': {'hand': ['CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 4}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'hand_size': 4}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'hand_size': 4}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)'], 'hand_size': 4}}, 'round': 1, 'reason': 'New turn 2 started with starter Bot 2', 'sequence': 10, 'timestamp': 1751507519.264415, 'operation_id': 'turn_phase_change_10', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1066 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
DEBUG_WS: Entering broadcast method for room 6E0ABC, event turn_complete
DEBUG_WS: Attempting to queue event 'turn_complete' for room 6E0ABC with data: {'winner': 'Bot 2', 'winning_play': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'value': 48, 'type': 'EXTENDED_STRAIGHT', 'pilesWon': 4}, 'turn_resolution': {'all_plays': [{'player': 'Bot 2', 'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'is_valid': True, 'play_type': 'EXTENDED_STRAIGHT', 'play_value': 48}, {'player': 'Bot 3', 'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)'], 'is_valid': False, 'play_type': 'INVALID', 'play_value': 5}, {'player': 'Bot 4', 'pieces': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'is_valid': False, 'play_type': 'INVALID', 'play_value': 7}, {'player': 'Andy', 'pieces': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'is_valid': False, 'play_type': 'INVALID', 'play_value': 20}], 'winner': 'Bot 2', 'winner_play': {'pieces': ['GENERAL_RED(14)', 'ADVISOR_RED(12)', 'ADVISOR_RED(12)', 'ELEPHANT_RED(10)'], 'value': 48, 'type': 'EXTENDED_STRAIGHT', 'pilesWon': 4}}, 'player_piles': {'Bot 2': 4, 'Andy': 0, 'Bot 3': 0, 'Bot 4': 0}, 'players': [{'name': 'Andy'}, {'name': 'Bot 2'}, {'name': 'Bot 3'}, {'name': 'Bot 4'}], 'turn_number': 1, 'next_starter': 'Bot 2', 'all_hands_empty': False, 'will_continue': True, 'phase': 'turn', 'sequence': 9, 'timestamp': 1751507519.264909, 'reason': 'Turn 1 completed - winner: Bot 2', 'operation_id': 'turn_turn_complete_9', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'turn_complete'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'turn_complete' - 1539 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'turn_complete'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'turn_complete'
DEBUG_WS: Message for event 'turn_complete' added to queue for room 6E0ABC.
🤖 NEW_TURN_DEBUG: Notifying bot manager about new turn starter Bot 2 for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'turn_started' for room 6E0ABC with data: {'starter': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'turn_started' with data keys: ['starter']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'turn_started'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing turn start
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action turn_start (lock-free)
🎮 Bot Manager: Handling turn start for Bot 2
🤖 Bot Bot 2 will play first
🤖 Bot Bot 2 thinking for 1.0s...
{"timestamp": "2025-07-03T01:51:59.284171Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - New turn 2 started with starter Bot 2", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: New turn 2 started with starter Bot 2
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'New turn 2 started with starter Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
✅ REFINED_FIX: Allowing new trigger for current player Bot 2 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from phase_change (hash: 788aef22a7ad)
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_turn_play (lock-free)
🔧 CIRCUIT_BREAKER_DEBUG: No last_player provided - stopping bot processing
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_turn_play completed successfully
🔧 NEW_TURN_DEBUG: update_phase_data completed successfully
{"timestamp": "2025-07-03T01:51:59.287121Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfaf New turn started - order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']", "module": "turn_state", "function": "_start_new_turn", "line": 277}
🎯 START_NEXT_DEBUG: _start_new_turn() completed
{"timestamp": "2025-07-03T01:51:59.287252Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\ude80 Enterprise: New turn auto-started with automatic broadcasting", "module": "turn_state", "function": "_process_turn_completion", "line": 722}
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 2, required_piece_count: None
{"timestamp": "2025-07-03T01:51:59.287342Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Andy played 4 pieces", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'players': {'Andy': {'hand': ['CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 4}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'hand_size': 4}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'hand_size': 4}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)'], 'hand_size': 4}}, 'round': 1, 'reason': 'Player Andy played 4 pieces', 'sequence': 11, 'timestamp': 1751507519.2875788, 'operation_id': 'turn_phase_change_11', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1057 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:51:59.287986Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Andy played 4 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 4 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 2
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 2', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 2', 'reason': 'Player Andy played 4 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🚫 REFINED_FIX: Blocking rapid same-source trigger for current player Bot 2 from phase_change (age: 0.0s)
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 0 bot actions (lock-free)
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 2
{"timestamp": "2025-07-03T01:51:59.288635Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room 6E0ABC - Player Andy played 4 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 311}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 2
🔧 PLAY_NOTIFY_DEBUG: Bot manager play notification task created (fire-and-forget)
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [HORSE_RED(6), HORSE_BLACK(5), SOLDIER_RED(2), CHARIOT_BLACK(7)], 'piece_count': 4, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.032s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.03225588798522949, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Andy', 'pieces': [HORSE_RED(6), HORSE_BLACK(5), SOLDIER_RED(2), CHARIOT_BLACK(7)], 'piece_count': 4, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}}
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.03225588798522949, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Andy', 'pieces': [HORSE_RED(6), HORSE_BLACK(5), SOLDIER_RED(2), CHARIOT_BLACK(7)], 'piece_count': 4, 'required_count': None, 'next_player': 'Bot 2', 'turn_complete': False}}
✅ Play queued: Andy -> [0, 1, 2, 3]
DEBUG_WS: Entering broadcast method for room 6E0ABC, event play
DEBUG_WS: Attempting to queue event 'play' for room 6E0ABC with data: {'player': 'Andy', 'pieces': ['HORSE_RED(6)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'CHARIOT_BLACK(7)'], 'valid': True, 'play_type': 'INVALID', 'next_player': 'Bot 2', 'required_count': None, 'turn_complete': False, 'phase': 'turn', 'sequence': 12, 'timestamp': 1751507519.2906702, 'reason': 'Player Andy played 4 pieces', 'operation_id': 'turn_play_12', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 400 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room 6E0ABC.
🤖 TURN_STATE_DEBUG: Notifying bot manager about Andy's play for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 6E0ABC with data: {'player_name': 'Andy'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'player_played' with data keys: ['player_name']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'player_played'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎯 BOT_HANDLER_DEBUG: Analyzing play phase
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action play_phase (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: None, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Bot 2, starter: Bot 2
✅ PLAY_PHASE_DEBUG: No required count set but Bot 2 is starter - allowing play
🎯 PLAY_PHASE_DEBUG: State machine current player: Bot 2
🎯 PLAY_PHASE_DEBUG: Players who have played: []
🎯 PLAY_PHASE_DEBUG: Current player Bot 2 at index: 0
🎯 PLAY_PHASE_DEBUG: Current player Bot 2 hasn't played yet - triggering them
✅ REFINED_FIX: Allowing new trigger for current player Bot 2 from player_played
✅ RACE_CONDITION_FIX: New action recorded for Bot 2 - play_pieces from player_played (hash: d513491959ca)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 2
🤖 PLAY_PHASE_DEBUG: Bot Bot 2 thinking for 0.8s...
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
DEBUG_WS_QUEUE: Room 6E0ABC got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: turn_turn_complete_9) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room 6E0ABC.
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
DEBUG_WS_QUEUE: Room 6E0ABC got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: turn_play_12) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'play' to a client in room 6E0ABC.
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play() for Bot 2
🔧 BOT_SUBMIT_DEBUG: Bot object: Bot 2 - 0 pts
🔧 BOT_SUBMIT_DEBUG: Bot hand size: 4
🔧 BOT_SUBMIT_DEBUG: _bot_play() method called for Bot 2
🔧 BOT_SUBMIT_DEBUG: Bot hand: ['CANNON_RED(4)', 'SOLDIER_RED(2)', 'ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)']
🔧 BOT_SUBMIT_DEBUG: Starting piece selection logic for Bot 2
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: None
🔧 BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for Bot 2
🔧 BOT_SUBMIT_DEBUG: Hand size: 4, Required count: None
🤖 BOT chooses to play PAIR (18 pts): ELEPHANT, ELEPHANT
🔧 BOT_SUBMIT_DEBUG: ai.choose_best_play returned 2 pieces for Bot 2
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)']
🤖 Bot Bot 2 will play 2 pieces: ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)']
🔧 BOT_SUBMIT_DEBUG: This is from _bot_play() - bot is following another player
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play for Bot Bot 2
🔧 BOT_SUBMIT_DEBUG: Selected pieces count: 2
🔧 BOT_SUBMIT_DEBUG: Selected pieces: ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)']
🔧 BOT_SUBMIT_DEBUG: Required piece count was: None
🔧 BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 2
🔧 BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 2
🔧 BOT_SUBMIT_DEBUG: Action details - player: Bot 2, type: ActionType.PLAY_PIECES, is_bot: True
🔧 BOT_SUBMIT_DEBUG: Action payload pieces count: 2
🔧 BOT_SUBMIT_DEBUG: Step 1 - Validating play action synchronously
🔧 VALIDATE_ACTION_DEBUG: validate_action called for Bot 2 play_pieces
🔧 VALIDATION_DEBUG: Validating bot Bot 2 action
🔧 VALIDATION_DEBUG: Current player: Bot 2
🔧 VALIDATION_DEBUG: Turn plays: []
🔧 VALIDATION_DEBUG: Payload: {'pieces': [ELEPHANT_BLACK(9), ELEPHANT_BLACK(9)]}
🔧 VALIDATION_DEBUG: Required piece count: None
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 2 == Bot 2
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 2 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 2 pieces
🔧 VALIDATION_DEBUG: Piece count: 2, Required: None
✅ VALIDATION_DEBUG: Starter piece count validation PASSED - 2 in 1-6 range
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 2
✅ VALIDATE_ACTION_DEBUG: Action validation passed for Bot 2
✅ BOT_SUBMIT_DEBUG: Play action validation passed for Bot 2
🔧 BOT_SUBMIT_DEBUG: Step 2 - Executing play action via fire-and-forget
✅ BOT_SUBMIT_DEBUG: Fire-and-forget play execution task created for Bot Bot 2
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 2 action queued - state machine will broadcast with correct next_player
🔧 BOT_SUBMIT_DEBUG: _bot_play() completed successfully for Bot 2
✅ BOT_MANAGER_LOCK_FIX: Action play_phase completed successfully
🔧 EXECUTE_ACTION_DEBUG: execute_action called for Bot 2 play_pieces
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 2
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10b4e57d0>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🔧 VALIDATION_DEBUG: Validating bot Bot 2 action
🔧 VALIDATION_DEBUG: Current player: Bot 2
🔧 VALIDATION_DEBUG: Turn plays: []
🔧 VALIDATION_DEBUG: Payload: {'pieces': [ELEPHANT_BLACK(9), ELEPHANT_BLACK(9)]}
🔧 VALIDATION_DEBUG: Required piece count: None
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 2 == Bot 2
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 2 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 2 pieces
🔧 VALIDATION_DEBUG: Piece count: 2, Required: None
✅ VALIDATION_DEBUG: Starter piece count validation PASSED - 2 in 1-6 range
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 2
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 2
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 2
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 2 playing 2 pieces: ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 2
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 2
{"timestamp": "2025-07-03T01:52:00.081400Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 2 (starter) plays 2 pieces - setting required count", "module": "turn_state", "function": "_handle_play_pieces", "line": 375}
{"timestamp": "2025-07-03T01:52:00.081503Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 2 plays: [ELEPHANT_BLACK(9), ELEPHANT_BLACK(9)] (value: 18)", "module": "turn_state", "function": "_handle_play_pieces", "line": 394}
🎯 IMMEDIATE_REMOVAL_DEBUG: Removing 2 pieces from Bot 2's hand
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand before: 4 pieces
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed ELEPHANT_BLACK(9) from Bot 2
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed ELEPHANT_BLACK(9) from Bot 2
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand after: 2 pieces
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 3
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Bot 2 played, next: Bot 3
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: 2
{"timestamp": "2025-07-03T01:52:00.081600Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Bot 2 played 2 pieces", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 2, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'PAIR', 'play_value': 18, 'is_valid': True, 'timestamp': 1751507520.081209}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'players': {'Andy': {'hand': ['CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 4}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 2}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'hand_size': 4}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)'], 'hand_size': 4}}, 'round': 1, 'reason': 'Player Bot 2 played 2 pieces', 'sequence': 13, 'timestamp': 1751507520.081727, 'operation_id': 'turn_phase_change_13', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1182 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:52:00.082009Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Bot 2 played 2 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 2 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 3', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 2, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'PAIR', 'play_value': 18, 'is_valid': True, 'timestamp': 1751507520.081209}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 3', 'reason': 'Player Bot 2 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
✅ REFINED_FIX: Allowing new trigger for current player Bot 3 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from phase_change (hash: 57edd09ce90f)
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_turn_play (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Bot 3, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Bot 3
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2']
🎯 PLAY_PHASE_DEBUG: Current player Bot 3 at index: 1
🎯 PLAY_PHASE_DEBUG: Current player Bot 3 hasn't played yet - triggering them
✅ REFINED_FIX: Allowing new trigger for current player Bot 3 from player_played
✅ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from player_played (hash: 2071963ee774)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 3
🤖 PLAY_PHASE_DEBUG: Bot Bot 3 thinking for 0.7s...
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
⚠️ BOT_PLAY_FIRST_SAFETY: Bot Bot 2 called to play first but current player is Bot 3 - aborting
✅ BOT_MANAGER_LOCK_FIX: Action turn_start completed successfully
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play() for Bot 3
🔧 BOT_SUBMIT_DEBUG: Bot object: Bot 3 - 0 pts
🔧 BOT_SUBMIT_DEBUG: Bot hand size: 4
🔧 BOT_SUBMIT_DEBUG: _bot_play() method called for Bot 3
🔧 BOT_SUBMIT_DEBUG: Bot hand: ['ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)', 'CANNON_BLACK(3)', 'HORSE_BLACK(5)']
🔧 BOT_SUBMIT_DEBUG: Starting piece selection logic for Bot 3
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🔧 BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for Bot 3
🔧 BOT_SUBMIT_DEBUG: Hand size: 4, Required count: 2
🤖 BOT has no valid play. Discards lowest pieces: CANNON, HORSE
    🔍 Final play: ['CANNON', 'HORSE']
    🧠 Hand left: ['ADVISOR', 'GENERAL', 'CANNON', 'HORSE']
🔧 BOT_SUBMIT_DEBUG: ai.choose_best_play returned 2 pieces for Bot 3
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CANNON_BLACK(3)', 'HORSE_BLACK(5)']
🤖 Bot Bot 3 will play 2 pieces: ['CANNON_BLACK(3)', 'HORSE_BLACK(5)']
🔧 BOT_SUBMIT_DEBUG: This is from _bot_play() - bot is following another player
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play for Bot Bot 3
🔧 BOT_SUBMIT_DEBUG: Selected pieces count: 2
🔧 BOT_SUBMIT_DEBUG: Selected pieces: ['CANNON_BLACK(3)', 'HORSE_BLACK(5)']
🔧 BOT_SUBMIT_DEBUG: Required piece count was: 2
🔧 BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 3
🔧 BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 3
🔧 BOT_SUBMIT_DEBUG: Action details - player: Bot 3, type: ActionType.PLAY_PIECES, is_bot: True
🔧 BOT_SUBMIT_DEBUG: Action payload pieces count: 2
🔧 BOT_SUBMIT_DEBUG: Step 1 - Validating play action synchronously
🔧 VALIDATE_ACTION_DEBUG: validate_action called for Bot 3 play_pieces
🔧 VALIDATION_DEBUG: Validating bot Bot 3 action
🔧 VALIDATION_DEBUG: Current player: Bot 3
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 2']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [CANNON_BLACK(3), HORSE_BLACK(5)]}
🔧 VALIDATION_DEBUG: Required piece count: 2
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 3 == Bot 3
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 3 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 2 pieces
🔧 VALIDATION_DEBUG: Piece count: 2, Required: 2
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 2 == 2
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 3
✅ VALIDATE_ACTION_DEBUG: Action validation passed for Bot 3
✅ BOT_SUBMIT_DEBUG: Play action validation passed for Bot 3
🔧 BOT_SUBMIT_DEBUG: Step 2 - Executing play action via fire-and-forget
✅ BOT_SUBMIT_DEBUG: Fire-and-forget play execution task created for Bot Bot 3
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 action queued - state machine will broadcast with correct next_player
🔧 BOT_SUBMIT_DEBUG: _bot_play() completed successfully for Bot 3
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_turn_play completed successfully
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
{"timestamp": "2025-07-03T01:52:00.799094Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room 6E0ABC - Player Bot 2 played 2 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 311}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🔧 PLAY_NOTIFY_DEBUG: Bot manager play notification task created (fire-and-forget)
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ELEPHANT_BLACK(9), ELEPHANT_BLACK(9)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 3', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
✅ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 2
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.7190670967102051, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 2', 'pieces': [ELEPHANT_BLACK(9), ELEPHANT_BLACK(9)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 3', 'turn_complete': False}}
🔧 EXECUTE_ACTION_DEBUG: execute_action called for Bot 3 play_pieces
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 3
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10b4e57d0>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🔧 VALIDATION_DEBUG: Validating bot Bot 3 action
🔧 VALIDATION_DEBUG: Current player: Bot 3
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 2']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [CANNON_BLACK(3), HORSE_BLACK(5)]}
🔧 VALIDATION_DEBUG: Required piece count: 2
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 3 == Bot 3
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 3 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 2 pieces
🔧 VALIDATION_DEBUG: Piece count: 2, Required: 2
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 2 == 2
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 2 pieces: ['CANNON_BLACK(3)', 'HORSE_BLACK(5)']
{"timestamp": "2025-07-03T01:52:00.801015Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 3 plays: [CANNON_BLACK(3), HORSE_BLACK(5)] (value: 8)", "module": "turn_state", "function": "_handle_play_pieces", "line": 394}
🎯 IMMEDIATE_REMOVAL_DEBUG: Removing 2 pieces from Bot 3's hand
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand before: 4 pieces
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed CANNON_BLACK(3) from Bot 3
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed HORSE_BLACK(5) from Bot 3
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand after: 2 pieces
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 2
{"timestamp": "2025-07-03T01:52:00.801366Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Bot 3 played 2 pieces", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 2, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'PAIR', 'play_value': 18, 'is_valid': True, 'timestamp': 1751507520.081209}, 'Bot 3': {'pieces': ['CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'INVALID', 'play_value': 8, 'is_valid': False, 'timestamp': 1751507520.800611}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'players': {'Andy': {'hand': ['CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 4}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 2}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)'], 'hand_size': 2}, 'Bot 4': {'hand': ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)'], 'hand_size': 4}}, 'round': 1, 'reason': 'Player Bot 3 played 2 pieces', 'sequence': 15, 'timestamp': 1751507520.801929, 'operation_id': 'turn_phase_change_15', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1315 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
DEBUG_WS: Entering broadcast method for room 6E0ABC, event play
DEBUG_WS: Attempting to queue event 'play' for room 6E0ABC with data: {'player': 'Bot 2', 'pieces': ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'valid': True, 'play_type': 'PAIR', 'next_player': 'Bot 3', 'required_count': 2, 'turn_complete': False, 'phase': 'turn', 'sequence': 14, 'timestamp': 1751507520.80236, 'reason': 'Player Bot 2 played 2 pieces', 'operation_id': 'turn_play_14', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 364 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room 6E0ABC.
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 2's play for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 6E0ABC with data: {'player_name': 'Bot 2'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'player_played' with data keys: ['player_name']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'player_played'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎯 BOT_HANDLER_DEBUG: Analyzing play phase
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action play_phase (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Bot 4, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Bot 4
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 at index: 2
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 hasn't played yet - triggering them
✅ REFINED_FIX: Allowing new trigger for current player Bot 4 from player_played
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from player_played (hash: 3747b2eb24e7)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.9s...
{"timestamp": "2025-07-03T01:52:00.803053Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Bot 3 played 2 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Bot 4', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 2, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'PAIR', 'play_value': 18, 'is_valid': True, 'timestamp': 1751507520.081209}, 'Bot 3': {'pieces': ['CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'INVALID', 'play_value': 8, 'is_valid': False, 'timestamp': 1751507520.800611}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
✅ REFINED_FIX: Allowing new trigger for current player Bot 4 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from phase_change (hash: cd140f54b134)
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_turn_play (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Bot 4, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Bot 4
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 at index: 2
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 hasn't played yet - triggering them
🚫 REFINED_FIX: Blocking rapid same-source trigger for current player Bot 4 from player_played (age: 0.0s)
🚫 RACE_CONDITION_FIX: Skipping duplicate bot play for Bot 4 in _handle_play_phase
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_turn_play completed successfully
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
{"timestamp": "2025-07-03T01:52:00.803986Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room 6E0ABC - Player Bot 3 played 2 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 311}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🔧 PLAY_NOTIFY_DEBUG: Bot manager play notification task created (fire-and-forget)
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [CANNON_BLACK(3), HORSE_BLACK(5)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 4', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
✅ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 3
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.003793954849243164, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [CANNON_BLACK(3), HORSE_BLACK(5)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Bot 4', 'turn_complete': False}}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event play
DEBUG_WS: Attempting to queue event 'play' for room 6E0ABC with data: {'player': 'Bot 3', 'pieces': ['CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'valid': True, 'play_type': 'INVALID', 'next_player': 'Bot 4', 'required_count': 2, 'turn_complete': False, 'phase': 'turn', 'sequence': 16, 'timestamp': 1751507520.804369, 'reason': 'Player Bot 3 played 2 pieces', 'operation_id': 'turn_play_16', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 363 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room 6E0ABC.
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 3's play for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 6E0ABC with data: {'player_name': 'Bot 3'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'player_played' with data keys: ['player_name']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'player_played'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎯 BOT_HANDLER_DEBUG: Analyzing play phase
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action play_phase (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Bot 4, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Bot 4
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2', 'Bot 3']
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 at index: 2
🎯 PLAY_PHASE_DEBUG: Current player Bot 4 hasn't played yet - triggering them
🚫 REFINED_FIX: Blocking rapid same-source trigger for current player Bot 4 from player_played (age: 0.0s)
🚫 RACE_CONDITION_FIX: Skipping duplicate bot play for Bot 4 in _handle_play_phase
✅ BOT_MANAGER_LOCK_FIX: Action play_phase completed successfully
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
DEBUG_WS_QUEUE: Room 6E0ABC got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: turn_play_14) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'play' to a client in room 6E0ABC.
DEBUG_WS_QUEUE: Room 6E0ABC got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: turn_play_16) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'play' to a client in room 6E0ABC.
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play() for Bot 4
🔧 BOT_SUBMIT_DEBUG: Bot object: Bot 4 - 0 pts
🔧 BOT_SUBMIT_DEBUG: Bot hand size: 4
🔧 BOT_SUBMIT_DEBUG: _bot_play() method called for Bot 4
🔧 BOT_SUBMIT_DEBUG: Bot hand: ['CHARIOT_RED(8)', 'ELEPHANT_RED(10)', 'CHARIOT_RED(8)', 'CHARIOT_BLACK(7)']
🔧 BOT_SUBMIT_DEBUG: Starting piece selection logic for Bot 4
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 2
🔧 BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for Bot 4
🔧 BOT_SUBMIT_DEBUG: Hand size: 4, Required count: 2
🤖 BOT chooses to play PAIR (16 pts): CHARIOT, CHARIOT
🔧 BOT_SUBMIT_DEBUG: ai.choose_best_play returned 2 pieces for Bot 4
🎯 BOT_PLAY_DEBUG: Final selection - 2 pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
🤖 Bot Bot 4 will play 2 pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
🔧 BOT_SUBMIT_DEBUG: This is from _bot_play() - bot is following another player
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play for Bot Bot 4
🔧 BOT_SUBMIT_DEBUG: Selected pieces count: 2
🔧 BOT_SUBMIT_DEBUG: Selected pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
🔧 BOT_SUBMIT_DEBUG: Required piece count was: 2
🔧 BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 4
🔧 BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 4
🔧 BOT_SUBMIT_DEBUG: Action details - player: Bot 4, type: ActionType.PLAY_PIECES, is_bot: True
🔧 BOT_SUBMIT_DEBUG: Action payload pieces count: 2
🔧 BOT_SUBMIT_DEBUG: Step 1 - Validating play action synchronously
🔧 VALIDATE_ACTION_DEBUG: validate_action called for Bot 4 play_pieces
🔧 VALIDATION_DEBUG: Validating bot Bot 4 action
🔧 VALIDATION_DEBUG: Current player: Bot 4
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 2', 'Bot 3']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [CHARIOT_RED(8), CHARIOT_RED(8)]}
🔧 VALIDATION_DEBUG: Required piece count: 2
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 4 == Bot 4
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 4 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 2 pieces
🔧 VALIDATION_DEBUG: Piece count: 2, Required: 2
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 2 == 2
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 4
✅ VALIDATE_ACTION_DEBUG: Action validation passed for Bot 4
✅ BOT_SUBMIT_DEBUG: Play action validation passed for Bot 4
🔧 BOT_SUBMIT_DEBUG: Step 2 - Executing play action via fire-and-forget
✅ BOT_SUBMIT_DEBUG: Fire-and-forget play execution task created for Bot Bot 4
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🔧 BOT_SUBMIT_DEBUG: _bot_play() completed successfully for Bot 4
✅ BOT_MANAGER_LOCK_FIX: Action play_phase completed successfully
🔧 EXECUTE_ACTION_DEBUG: execute_action called for Bot 4 play_pieces
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 4
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x10b4e57d0>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🔧 VALIDATION_DEBUG: Validating bot Bot 4 action
🔧 VALIDATION_DEBUG: Current player: Bot 4
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 2', 'Bot 3']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [CHARIOT_RED(8), CHARIOT_RED(8)]}
🔧 VALIDATION_DEBUG: Required piece count: 2
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 4 == Bot 4
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 4 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 2 pieces
🔧 VALIDATION_DEBUG: Piece count: 2, Required: 2
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 2 == 2
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 2 pieces: ['CHARIOT_RED(8)', 'CHARIOT_RED(8)']
{"timestamp": "2025-07-03T01:52:01.725443Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 4 plays: [CHARIOT_RED(8), CHARIOT_RED(8)] (value: 16)", "module": "turn_state", "function": "_handle_play_pieces", "line": 394}
🎯 IMMEDIATE_REMOVAL_DEBUG: Removing 2 pieces from Bot 4's hand
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand before: 4 pieces
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed CHARIOT_RED(8) from Bot 4
🎯 IMMEDIATE_REMOVAL_DEBUG: Removed CHARIOT_RED(8) from Bot 4
🎯 IMMEDIATE_REMOVAL_DEBUG: Hand after: 2 pieces
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 3
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 2 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 2
{"timestamp": "2025-07-03T01:52:01.725735Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Bot 4 played 2 pieces", "module": "base_state", "function": "update_phase_data", "line": 172}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 2, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'PAIR', 'play_value': 18, 'is_valid': True, 'timestamp': 1751507520.081209}, 'Bot 3': {'pieces': ['CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'INVALID', 'play_value': 8, 'is_valid': False, 'timestamp': 1751507520.800611}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)', 'CHARIOT_RED(8)'], 'piece_count': 2, 'play_type': 'PAIR', 'play_value': 16, 'is_valid': True, 'timestamp': 1751507521.724964}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'players': {'Andy': {'hand': ['CANNON_RED(4)', 'ADVISOR_BLACK(11)', 'HORSE_RED(6)', 'SOLDIER_RED(2)'], 'hand_size': 4}, 'Bot 2': {'hand': ['CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 2}, 'Bot 3': {'hand': ['ADVISOR_BLACK(11)', 'GENERAL_BLACK(13)'], 'hand_size': 2}, 'Bot 4': {'hand': ['ELEPHANT_RED(10)', 'CHARIOT_BLACK(7)'], 'hand_size': 2}}, 'round': 1, 'reason': 'Player Bot 4 played 2 pieces', 'sequence': 17, 'timestamp': 1751507521.726209, 'operation_id': 'turn_phase_change_17', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1444 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room 6E0ABC.
{"timestamp": "2025-07-03T01:52:01.726917Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room 6E0ABC - Player Bot 4 played 2 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 235}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 2 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room 6E0ABC with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 2', 'current_player': 'Andy', 'turn_order': ['Bot 2', 'Bot 3', 'Bot 4', 'Andy'], 'required_piece_count': 2, 'turn_plays': {'Bot 2': {'pieces': ['ELEPHANT_BLACK(9)', 'ELEPHANT_BLACK(9)'], 'piece_count': 2, 'play_type': 'PAIR', 'play_value': 18, 'is_valid': True, 'timestamp': 1751507520.081209}, 'Bot 3': {'pieces': ['CANNON_BLACK(3)', 'HORSE_BLACK(5)'], 'piece_count': 2, 'play_type': 'INVALID', 'play_value': 8, 'is_valid': False, 'timestamp': 1751507520.800611}, 'Bot 4': {'pieces': ['CHARIOT_RED(8)', 'CHARIOT_RED(8)'], 'piece_count': 2, 'play_type': 'PAIR', 'play_value': 16, 'is_valid': True, 'timestamp': 1751507521.724964}}, 'turn_complete': False, 'current_turn_number': 2, 'winner': 'Bot 2', 'piles_won': 4, 'next_turn_starter': 'Bot 2'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 2 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 0 bot actions (lock-free)
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
{"timestamp": "2025-07-03T01:52:01.727659Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room 6E0ABC - Player Bot 4 played 2 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 311}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🔧 PLAY_NOTIFY_DEBUG: Bot manager play notification task created (fire-and-forget)
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [CHARIOT_RED(8), CHARIOT_RED(8)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Andy', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
✅ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 4
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.003259897232055664, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [CHARIOT_RED(8), CHARIOT_RED(8)], 'piece_count': 2, 'required_count': 2, 'next_player': 'Andy', 'turn_complete': False}}
DEBUG_WS: Entering broadcast method for room 6E0ABC, event play
DEBUG_WS: Attempting to queue event 'play' for room 6E0ABC with data: {'player': 'Bot 4', 'pieces': ['CHARIOT_RED(8)', 'CHARIOT_RED(8)'], 'valid': True, 'play_type': 'PAIR', 'next_player': 'Andy', 'required_count': 2, 'turn_complete': False, 'phase': 'turn', 'sequence': 18, 'timestamp': 1751507521.728224, 'reason': 'Player Bot 4 played 2 pieces', 'operation_id': 'turn_play_18', 'room_id': '6E0ABC'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 358 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room 6E0ABC.
🤖 TURN_STATE_DEBUG: Notifying bot manager about Bot 4's play for room 6E0ABC
🔔 BOT_MANAGER_DEBUG: Received event 'player_played' for room 6E0ABC with data: {'player_name': 'Bot 4'}
✅ BOT_MANAGER_DEBUG: Found handler for room 6E0ABC, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room 6E0ABC handling event 'player_played' with data keys: ['player_name']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': False
🔍 BOT_HANDLER_DEBUG: Event value repr: 'player_played'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🎯 BOT_HANDLER_DEBUG: Analyzing play phase
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action play_phase (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 2, turn_order: ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
🎯 PLAY_PHASE_DEBUG: Current player: Andy, starter: Bot 2
🎯 PLAY_PHASE_DEBUG: State machine current player: Andy
🎯 PLAY_PHASE_DEBUG: Players who have played: ['Bot 2', 'Bot 3', 'Bot 4']
🎯 PLAY_PHASE_DEBUG: Current player Andy at index: 3
🎯 PLAY_PHASE_DEBUG: Current player Andy hasn't played yet - triggering them
🎯 PLAY_PHASE_DEBUG: Next player Andy is human, waiting for their play
✅ BOT_MANAGER_LOCK_FIX: Action play_phase completed successfully
DEBUG_WS_QUEUE: Room 6E0ABC got message: phase_change
🔧 QUEUE_DEDUP: Skipping already processed phase_change message
DEBUG_WS_QUEUE: Room 6E0ABC got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: turn_play_18) to 1 clients in room 6E0ABC.
DEBUG_WS: Successfully sent 'play' to a client in room 6E0ABC.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751507545120}