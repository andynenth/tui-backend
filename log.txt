RecoveryService.ts:66 🔄 RecoveryService: Initialized
ServiceIntegration.ts:79 🔗 ServiceIntegration: Initialized
ServiceIntegration.ts:98 
ServiceIntegration.ts:99 🎯 =============================================
ServiceIntegration.ts:100 🚀 PHASE 1-4 ENTERPRISE ARCHITECTURE STARTING
ServiceIntegration.ts:101 🎯 =============================================
ServiceIntegration.ts:102 🔧 Initializing integrated service layer...
ServiceIntegration.ts:567 ✅ NetworkService integrated
ServiceIntegration.ts:575 ✅ GameService integrated
ServiceIntegration.ts:583 ✅ RecoveryService integrated
ServiceIntegration.ts:594 🩺 Health monitoring started (30000ms interval)
ServiceIntegration.ts:124 
ServiceIntegration.ts:125 ✅ =============================================
ServiceIntegration.ts:126 🎉 PHASE 1-4 ARCHITECTURE FULLY OPERATIONAL!
ServiceIntegration.ts:127 ✅ =============================================
ServiceIntegration.ts:128 🔗 NetworkService: Advanced WebSocket with auto-reconnection
ServiceIntegration.ts:129 🎮 GameService: React hooks with TypeScript state management
ServiceIntegration.ts:130 🛠️ RecoveryService: Automatic error recovery and health monitoring
ServiceIntegration.ts:131 🏢 Enterprise Features: Event sourcing, logging, metrics
ServiceIntegration.ts:132 ✅ Service integration layer initialized successfully
ServiceIntegration.ts:133 
App.jsx:121 🎮 Phase 1-4 Enterprise Architecture - Global services initialized
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room lobby
NetworkService.ts:214 📤 Queued message for lobby: get_rooms (1 queued)
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
LobbyPage.jsx:50 Received room_list_update: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1751244961930}
GameService.ts:1258 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room lobby
NetworkService.ts:214 📤 Queued message for lobby: get_rooms (1 queued)
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
LobbyPage.jsx:50 Received room_list_update: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1751244963503}
LobbyPage.jsx:60 Received room_created: {roomId: 'lobby', data: {…}, message: {…}, timestamp: 1751244963587}
LobbyPage.jsx:61 🟢 Navigation: room_id = 2D165E navigating to: /room/2D165E
LobbyPage.jsx:65 ✅ Navigating to new room: 2D165E
GameService.ts:1258 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room lobby
NetworkService.ts:214 📤 Queued message for lobby: get_rooms (1 queued)
RoomPage.jsx:181 🎯 SLOT_1: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_2: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_3: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_4: player= undefined isEmpty= true
NetworkService.ts:337 🔗 Connection opened to room lobby
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room lobby
NetworkService.ts:337 🔗 Connection opened to room 2D165E
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room 2D165E
RoomPage.jsx:181 🎯 SLOT_1: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_2: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_3: player= undefined isEmpty= true
RoomPage.jsx:181 🎯 SLOT_4: player= undefined isEmpty= true
RoomPage.jsx:49 🏠 ROOM_UPDATE: Full data received: {players: Array(4), host_name: 'Andy', room_id: '2D165E', started: false}
RoomPage.jsx:50 🏠 ROOM_UPDATE: Players array: (4) [{…}, {…}, {…}, {…}]
RoomPage.jsx:51 🏠 ROOM_UPDATE: Players array type: object
RoomPage.jsx:52 🏠 ROOM_UPDATE: Players array length: 4
RoomPage.jsx:53 🏠 ROOM_UPDATE: Players array entries: (4) [Array(2), Array(2), Array(2), Array(2)]
RoomPage.jsx:181 🎯 SLOT_1: player= {name: 'Andy', is_bot: false, is_host: true} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_2: player= {name: 'Bot 2', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_3: player= {name: 'Bot 3', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_4: player= {name: 'Bot 4', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:87 🎮 START_GAME: Button clicked
RoomPage.jsx:88 🎮 START_GAME: Room ID: 2D165E
RoomPage.jsx:181 🎯 SLOT_1: player= {name: 'Andy', is_bot: false, is_host: true} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_2: player= {name: 'Bot 2', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_3: player= {name: 'Bot 3', is_bot: true, is_host: false} isEmpty= false
RoomPage.jsx:181 🎯 SLOT_4: player= {name: 'Bot 4', is_bot: true, is_host: false} isEmpty= false
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:411 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:411 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:411 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751244965.3608818, …}
GameService.ts:411 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
RoomPage.jsx:60 Game started, navigating to game page
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'preparation', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751244968.1374831, …}
GameService.ts:411 🌐 FRONTEND_EVENT_DEBUG: Ignoring event for different room (ours: null)
ServiceIntegration.ts:157 🔗 Connecting to room 2D165E as Andy...
RecoveryService.ts:106 🔄 RecoveryService: Initialized tracking for room 2D165E
GameService.ts:1258 🎮 State Change: NETWORK_DISCONNECTED
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:171 🌐 NetworkService: Disconnected from room 2D165E
GameContext.jsx:36 🚀 GAME_CONTEXT: Phase 1-4 Enterprise Architecture initializing
NetworkService.ts:337 🔗 Connection opened to room 2D165E
GameService.ts:1258 🎮 State Change: NETWORK_CONNECTED
GameService.ts:1259 Previous: {isConnected: false, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {isConnected: {…}, lastEventSequence: {…}}
NetworkService.ts:129 🌐 NetworkService: Connected to room 2D165E
GameService.ts:1258 🎮 State Change: JOIN_ROOM
GameService.ts:1259 Previous: {isConnected: true, roomId: null, playerName: null, phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1261 Diff: {roomId: {…}, playerName: {…}, lastEventSequence: {…}}
GameService.ts:94 🎮 GameService: Joined room 2D165E as Andy
ServiceIntegration.ts:169 ✅ Successfully connected to room 2D165E
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 2, declarations: {…}, declaration_total: 3, current_declarer: 'Bot 4'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'waiting', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'declaration', currentRound: 0, …}
GameService.ts:1261 Diff: {phase: {…}, players: {…}, myHand: {…}, declarations: {…}, declarationOrder: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'declaration'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'waiting' to 'declaration'
DeclarationUI.jsx:43 🎯 DECLARATION_UI_DEBUG: Props received: {myHandLength: 8, declarations: {…}, playersLength: 4, currentTotal: 3, isMyTurn: false, …}
DeclarationUI.jsx:52 🎯 DECLARATION_UI_DEBUG: Full players array: (4) [{…}, {…}, {…}, {…}]
DeclarationUI.jsx:53 🎯 DECLARATION_UI_DEBUG: Full declarations object: {Bot 2: 2, Bot 3: 1}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 3, declarations: {…}, declaration_total: 5, current_declarer: 'Andy'}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, is_bot: false, is_host: true, declared: 0, …}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: true, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'declaration', currentRound: 0, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1261 Diff: {currentRound: {…}, players: {…}, declarations: {…}, declarationOrder: {…}, currentDeclarer: {…}, …}
GameService.ts:1228 🎮 Action sent: declare {value: 2, player_name: 'Andy'}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'declaration', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: declaration
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {declaration_order: Array(4), current_declarer_index: 4, declarations: {…}, declaration_total: 7, current_declarer: null}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, is_bot: false, is_host: true, declared: 0, …}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: true, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1261 Diff: {declarations: {…}, validOptions: {…}, lastEventSequence: {…}, currentTotal: {…}, declarationProgress: {…}, …}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, is_bot: false, is_host: true, declared: 0, …}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: true, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'declaration', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {phase: {…}, currentTurnStarter: {…}, turnOrder: {…}, currentPlayer: {…}, currentTurnNumber: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'declaration' to 'turn'
GameContainer.jsx:87 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, timestamp: 1751244986.952044, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 2', turn_order: Array(4), required_piece_count: null, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: false, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to null from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 2, Required: null, Plays: 0
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 0 plays to currentTurnPlays: []
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 2, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: []
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {players: {…}, lastEventSequence: {…}, canPlayAnyCount: {…}}
GameContainer.jsx:87 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 3', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, is_bot: false, is_host: true, declared: 2, …}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: true, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 3, Required: 1, Plays: 1
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 1 plays to currentTurnPlays: [{…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {players: {…}, currentPlayer: {…}, currentTurnPlays: {…}, requiredPieceCount: {…}, lastEventSequence: {…}}
GameContainer.jsx:87 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 2D165E {player: 'Bot 2', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 3', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 1 - Bot 2 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 3
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['GENERAL_RED(14)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 2', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['GENERAL_RED(14)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 3 to Bot 3
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 3, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: [{…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:87 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Bot 4', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, is_bot: false, is_host: true, declared: 2, …}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: true, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Bot 4, Required: 1, Plays: 2
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 2 plays to currentTurnPlays: (2) [{…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, lastEventSequence: {…}}
GameContainer.jsx:87 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 2D165E {player: 'Bot 3', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Bot 4', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 1 - Bot 3 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Bot 4
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['GENERAL_BLACK(13)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 3', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['GENERAL_BLACK(13)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Bot 4 to Bot 4
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Bot 4, playerName: Andy, isMyTurn: false
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (2) [{…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:87 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'turn', allowed_actions: Array(4), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {current_turn_starter: 'Bot 2', current_player: 'Andy', turn_order: Array(4), required_piece_count: 1, turn_plays: {…}, …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(8), hand_size: 8, is_bot: false, is_host: true, declared: 2, …}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: true, zero_declares_in_a_row: 0}
GameService.ts:620 🎯 REQUIRED_COUNT_FIX: Set requiredPieceCount to 1 from backend phase_data
GameService.ts:631 🔢 FRONTEND_ROUND_TURN_DEBUG: Round 1, Turn 1
GameService.ts:632 🎯 FRONTEND_TURN_STATE: Starter: Bot 2, Current: Andy, Required: 1, Plays: 3
GameService.ts:649 🎲 TURN_PLAYS_DEBUG: Converted 3 plays to currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:654 🔢 FRONTEND_TURN_DEBUG: phaseData.current_turn_number = 1
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {currentPlayer: {…}, currentTurnPlays: {…}, isMyTurn: {…}, allowedActions: {…}, validOptions: {…}, …}
GameContainer.jsx:87 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received play event for room 2D165E {player: 'Bot 4', pieces: Array(1), valid: true, play_type: 'SINGLE', next_player: 'Andy', …}
GameService.ts:457 🌐 PROCESS_EVENT_DEBUG: Handling play event
GameService.ts:858 🎲 PLAY_DEBUG: Round 1, Turn 1 - Bot 4 played 1 pieces
GameService.ts:859 🎲 PLAY_DEBUG: Required count: 1, Turn complete: false, Next: Andy
GameService.ts:860 🎲 PLAY_DEBUG: Pieces data: ['ADVISOR_BLACK(11)']
GameService.ts:883 🎲 PLAY_DEBUG: Transformed play data: {player: 'Bot 4', cards: Array(1), isValid: undefined, playType: 'SINGLE', totalValue: 0}
GameService.ts:884 🎲 PLAY_DEBUG: Cards array: ['ADVISOR_BLACK(11)']
GameService.ts:892 🎯 PLAY_EVENT_DEBUG: NOT setting requiredPieceCount from play event (backend phase_change is authoritative)
GameService.ts:905 🎯 PLAY_DEBUG: Updated currentPlayer from Andy to Andy
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event play processed, updating derived state
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:1048 🎯 TURN_DEBUG: currentPlayer: Andy, playerName: Andy, isMyTurn: true
GameService.ts:1049 🎯 TURN_DEBUG: turnOrder: (4) ['Bot 2', 'Bot 3', 'Bot 4', 'Andy']
GameService.ts:1050 🎯 TURN_DEBUG: currentTurnPlays: (3) [{…}, {…}, {…}]
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing play event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PLAY
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1261 Diff: {lastEventSequence: {…}}
GameContainer.jsx:87 🔢 GAMECONTAINER_DEBUG: gameState.currentTurnNumber = 1
TurnUI.jsx:67 🎯 TURN_UI: Card clicked at index 4, isMyTurn: true
TurnUI.jsx:74 🎯 TURN_UI: Selecting card 4, new selection: [4]
GameService.ts:1228 🎮 Action sent: play {piece_indices: Array(1), player_name: 'Andy', play_value: 10}
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received turn_complete event for room 2D165E {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
GameService.ts:467 🌐 PROCESS_EVENT_DEBUG: Handling turn_complete event with data: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
GameService.ts:468 🏆 TURN_COMPLETE_RAW_DEBUG: Event data received: {
  "winner": "Bot 2",
  "winning_play": {
    "pieces": [
      "GENERAL_RED(14)"
    ],
    "value": 0,
    "type": "unknown",
    "pilesWon": 1
  },
  "turn_resolution": {
    "all_plays": [
      {
        "player": "Bot 2",
        "pieces": [
          "GENERAL_RED(14)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 3",
        "pieces": [
          "GENERAL_BLACK(13)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Bot 4",
        "pieces": [
          "ADVISOR_BLACK(11)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      },
      {
        "player": "Andy",
        "pieces": [
          "ELEPHANT_RED(10)"
        ],
        "is_valid": true,
        "play_type": "unknown",
        "play_value": 0
      }
    ],
    "winner": "Bot 2",
    "winner_play": {
      "pieces": [
        "GENERAL_RED(14)"
      ],
      "value": 0,
      "type": "unknown",
      "pilesWon": 1
    }
  },
  "player_piles": {
    "Bot 2": 1,
    "Andy": 0,
    "Bot 3": 0,
    "Bot 4": 0
  },
  "players": [
    {
      "name": "Andy"
    },
    {
      "name": "Bot 2"
    },
    {
      "name": "Bot 3"
    },
    {
      "name": "Bot 4"
    }
  ],
  "turn_number": 1,
  "next_starter": "Bot 2",
  "all_hands_empty": false,
  "will_continue": true,
  "phase": "turn",
  "sequence": 8,
  "timestamp": 1751244994.655437,
  "reason": "Turn 1 completed - winner: Bot 2",
  "room_id": "2D165E"
}
GameService.ts:953 🏆 TURN_COMPLETE_DEBUG: Round 1, Turn 1 completed!
GameService.ts:954 🏆 TURN_WINNER_DEBUG: Winner: Bot 2, Next starter: Bot 2
GameService.ts:955 🏆 TURN_COMPLETE_DATA: {winner: 'Bot 2', winning_play: {…}, turn_resolution: {…}, player_piles: {…}, players: Array(4), …}
GameService.ts:969 🏆 TURN_COMPLETE_DEBUG: Transitioning to turn_results phase with state: {phase: 'turn_results', turnWinner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, turnNumber: 1, …}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event turn_complete processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing turn_complete event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:TURN_COMPLETE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1261 Diff: {phase: {…}, turnWinner: {…}, winningPlay: {…}, playerPiles: {…}, nextStarter: {…}, …}
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
useGameState.ts:32 🎮 GAME_STATE_DEBUG: Phase changed from 'turn' to 'turn_results'
useGameState.ts:36 🏆 GAME_STATE_DEBUG: Entering turn_results phase with data:
useGameState.ts:37   🏅 turnWinner: Bot 2
useGameState.ts:38   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
useGameState.ts:39   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
useGameState.ts:40   🔢 turnNumber: 1
useGameState.ts:41   🎪 nextStarter: Bot 2
GameContainer.jsx:109 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:110   🎮 gameState.phase: turn_results
GameContainer.jsx:111   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:112   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:113   📊 gameState.playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:114   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:115   🔢 gameState.turnNumber: 1
GameContainer.jsx:116   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:128 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:227 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:228 🎬 GAMECONTAINER_DISPLAY_DEBUG: *** ROUTING TO TURN_RESULTS PHASE ***
GameContainer.jsx:229 🎬 GAMECONTAINER_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:56:34.664Z
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:40 🎬 FRONTEND_DISPLAY_DEBUG: *** TURN RESULTS SCREEN IS NOW VISIBLE ***
TurnResultsUI.jsx:41 🎬 FRONTEND_DISPLAY_DEBUG: User should see turn results for 7 seconds
TurnResultsUI.jsx:42 🎬 FRONTEND_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:56:34.665Z
TurnResultsUI.jsx:50 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:51   ✅ hasWinner: true
TurnResultsUI.jsx:52   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:53   💎 winningValue: 0
TurnResultsUI.jsx:54   🎲 winningType: unknown
TurnResultsUI.jsx:55   🏆 pilesWon: 1
GameService.ts:407 🌐 FRONTEND_EVENT_DEBUG: Received phase_change event for room 2D165E {phase: 'turn_results', allowed_actions: Array(5), phase_data: {…}, players: {…}, round: 1, …}
GameService.ts:506 🔄 PHASE_CHANGE_DEBUG: Phase: turn_results
GameService.ts:507 🔄 PHASE_CHANGE_DEBUG: Data players: {Andy: {…}, Bot 2: {…}, Bot 3: {…}, Bot 4: {…}}
GameService.ts:508 🔄 PHASE_CHANGE_DEBUG: Data phase_data: {winner: 'Bot 2', pieces_won: Array(1), turn_plays: {…}, hands_empty: false, next_phase: 'turn', …}
GameService.ts:509 🔄 PHASE_CHANGE_DEBUG: First player raw: Andy {hand: Array(7), hand_size: 7, is_bot: false, is_host: true, declared: 2, …}
GameService.ts:543 🔄 PHASE_CHANGE_DEBUG: Converted players array: (4) [{…}, {…}, {…}, {…}]
GameService.ts:544 🔄 PHASE_CHANGE_DEBUG: Sample player object: {name: 'Andy', is_bot: false, is_host: true, zero_declares_in_a_row: 0}
GameService.ts:489 🌐 PROCESS_EVENT_DEBUG: Event phase_change processed, updating derived state
GameService.ts:493 🌐 PROCESS_EVENT_DEBUG: Finished processing phase_change event
GameService.ts:1258 🎮 State Change: NETWORK_EVENT:PHASE_CHANGE
GameService.ts:1259 Previous: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1260 New: {isConnected: true, roomId: '2D165E', playerName: 'Andy', phase: 'turn_results', currentRound: 1, …}
GameService.ts:1261 Diff: {myHand: {…}, lastEventSequence: {…}}
GameContainer.jsx:109 🏆 GAMECONTAINER_DEBUG: Building turnResultsProps with gameState:
GameContainer.jsx:110   🎮 gameState.phase: turn_results
GameContainer.jsx:111   🏅 gameState.turnWinner: Bot 2
GameContainer.jsx:112   🎯 gameState.winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
GameContainer.jsx:113   📊 gameState.playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
GameContainer.jsx:114   👥 gameState.players: (4) [{…}, {…}, {…}, {…}]
GameContainer.jsx:115   🔢 gameState.turnNumber: 1
GameContainer.jsx:116   🎪 gameState.nextStarter: Bot 2
GameContainer.jsx:128 🏆 GAMECONTAINER_DEBUG: Final turnResultsProps: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:227 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:228 🎬 GAMECONTAINER_DISPLAY_DEBUG: *** ROUTING TO TURN_RESULTS PHASE ***
GameContainer.jsx:229 🎬 GAMECONTAINER_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:56:34.678Z
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:40 🎬 FRONTEND_DISPLAY_DEBUG: *** TURN RESULTS SCREEN IS NOW VISIBLE ***
TurnResultsUI.jsx:41 🎬 FRONTEND_DISPLAY_DEBUG: User should see turn results for 7 seconds
TurnResultsUI.jsx:42 🎬 FRONTEND_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:56:34.678Z
TurnResultsUI.jsx:50 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:51   ✅ hasWinner: true
TurnResultsUI.jsx:52   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:53   💎 winningValue: 0
TurnResultsUI.jsx:54   🎲 winningType: unknown
TurnResultsUI.jsx:55   🏆 pilesWon: 1
GameContainer.jsx:227 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:228 🎬 GAMECONTAINER_DISPLAY_DEBUG: *** ROUTING TO TURN_RESULTS PHASE ***
GameContainer.jsx:229 🎬 GAMECONTAINER_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:56:38.180Z
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:40 🎬 FRONTEND_DISPLAY_DEBUG: *** TURN RESULTS SCREEN IS NOW VISIBLE ***
TurnResultsUI.jsx:41 🎬 FRONTEND_DISPLAY_DEBUG: User should see turn results for 7 seconds
TurnResultsUI.jsx:42 🎬 FRONTEND_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:56:38.182Z
TurnResultsUI.jsx:50 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:51   ✅ hasWinner: true
TurnResultsUI.jsx:52   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:53   💎 winningValue: 0
TurnResultsUI.jsx:54   🎲 winningType: unknown
TurnResultsUI.jsx:55   🏆 pilesWon: 1
GameContainer.jsx:227 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:228 🎬 GAMECONTAINER_DISPLAY_DEBUG: *** ROUTING TO TURN_RESULTS PHASE ***
GameContainer.jsx:229 🎬 GAMECONTAINER_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:57:03.667Z
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:40 🎬 FRONTEND_DISPLAY_DEBUG: *** TURN RESULTS SCREEN IS NOW VISIBLE ***
TurnResultsUI.jsx:41 🎬 FRONTEND_DISPLAY_DEBUG: User should see turn results for 7 seconds
TurnResultsUI.jsx:42 🎬 FRONTEND_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:57:03.667Z
TurnResultsUI.jsx:50 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:51   ✅ hasWinner: true
TurnResultsUI.jsx:52   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:53   💎 winningValue: 0
TurnResultsUI.jsx:54   🎲 winningType: unknown
TurnResultsUI.jsx:55   🏆 pilesWon: 1
GameContainer.jsx:227 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:228 🎬 GAMECONTAINER_DISPLAY_DEBUG: *** ROUTING TO TURN_RESULTS PHASE ***
GameContainer.jsx:229 🎬 GAMECONTAINER_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:57:08.180Z
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:40 🎬 FRONTEND_DISPLAY_DEBUG: *** TURN RESULTS SCREEN IS NOW VISIBLE ***
TurnResultsUI.jsx:41 🎬 FRONTEND_DISPLAY_DEBUG: User should see turn results for 7 seconds
TurnResultsUI.jsx:42 🎬 FRONTEND_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:57:08.182Z
TurnResultsUI.jsx:50 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:51   ✅ hasWinner: true
TurnResultsUI.jsx:52   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:53   💎 winningValue: 0
TurnResultsUI.jsx:54   🎲 winningType: unknown
TurnResultsUI.jsx:55   🏆 pilesWon: 1
GameContainer.jsx:227 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:228 🎬 GAMECONTAINER_DISPLAY_DEBUG: *** ROUTING TO TURN_RESULTS PHASE ***
GameContainer.jsx:229 🎬 GAMECONTAINER_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:57:33.669Z
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:40 🎬 FRONTEND_DISPLAY_DEBUG: *** TURN RESULTS SCREEN IS NOW VISIBLE ***
TurnResultsUI.jsx:41 🎬 FRONTEND_DISPLAY_DEBUG: User should see turn results for 7 seconds
TurnResultsUI.jsx:42 🎬 FRONTEND_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:57:33.669Z
TurnResultsUI.jsx:50 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:51   ✅ hasWinner: true
TurnResultsUI.jsx:52   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:53   💎 winningValue: 0
TurnResultsUI.jsx:54   🎲 winningType: unknown
TurnResultsUI.jsx:55   🏆 pilesWon: 1
GameContainer.jsx:227 🏆 GAMECONTAINER_DEBUG: Rendering TurnResultsUI with props: {winner: 'Bot 2', winningPlay: {…}, playerPiles: {…}, players: Array(4), turnNumber: 1, …}
GameContainer.jsx:228 🎬 GAMECONTAINER_DISPLAY_DEBUG: *** ROUTING TO TURN_RESULTS PHASE ***
GameContainer.jsx:229 🎬 GAMECONTAINER_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:57:38.180Z
TurnResultsUI.jsx:31 🏆 TURN_RESULTS_UI_DEBUG: TurnResultsUI component rendered with props:
TurnResultsUI.jsx:32   🏅 winner: Bot 2
TurnResultsUI.jsx:33   🎯 winningPlay: {pieces: Array(1), value: 0, type: 'unknown', pilesWon: 1}
TurnResultsUI.jsx:34   📊 playerPiles: {Bot 2: 1, Andy: 0, Bot 3: 0, Bot 4: 0}
TurnResultsUI.jsx:35   👥 players: (4) [{…}, {…}, {…}, {…}]
TurnResultsUI.jsx:36   🔢 turnNumber: 1
TurnResultsUI.jsx:37   🎪 nextStarter: Bot 2
TurnResultsUI.jsx:40 🎬 FRONTEND_DISPLAY_DEBUG: *** TURN RESULTS SCREEN IS NOW VISIBLE ***
TurnResultsUI.jsx:41 🎬 FRONTEND_DISPLAY_DEBUG: User should see turn results for 7 seconds
TurnResultsUI.jsx:42 🎬 FRONTEND_DISPLAY_DEBUG: Current timestamp: 2025-06-30T00:57:38.181Z
TurnResultsUI.jsx:50 🏆 TURN_RESULTS_UI_DEBUG: Computed values:
TurnResultsUI.jsx:51   ✅ hasWinner: true
TurnResultsUI.jsx:52   🃏 winningPieces: ['GENERAL_RED(14)']
TurnResultsUI.jsx:53   💎 winningValue: 0
TurnResultsUI.jsx:54   🎲 winningType: unknown
TurnResultsUI.jsx:55   🏆 pilesWon: 1
