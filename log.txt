DEBUG_WS_QUEUE: Room F2C5D7 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room F2C5D7.
DEBUG_WS: Successfully sent 'phase_change' to a client in room F2C5D7.
DEBUG_WS_QUEUE: Room F2C5D7 got message: turn_complete
DEBUG_WS: Broadcasting event 'turn_complete' (op_id: unknown) to 1 clients in room F2C5D7.
DEBUG_WS: Successfully sent 'turn_complete' to a client in room F2C5D7.
🤖 Bot Bot 3 choosing first play...
🔧 BOT_SUBMIT_DEBUG: _bot_play_first() method called for Bot 3
🔧 BOT_SUBMIT_DEBUG: Bot hand: ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)']
🔧 BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for first play by Bot 3
🔧 BOT_SUBMIT_DEBUG: Hand size: 6, Required count: None (first play)
🤖 BOT chooses to play SINGLE (11 pts): ADVISOR
🔧 BOT_SUBMIT_DEBUG: ai.choose_best_play returned 1 pieces for first play by Bot 3
🤖 Bot Bot 3 will play 1 pieces: ['ADVISOR_BLACK(11)']
🔧 BOT_SUBMIT_DEBUG: This is from _bot_play_first() - bot is first player
🎯 BOT_MANAGER_DEBUG: state_machine exists: True
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play_first for Bot Bot 3
🔧 BOT_SUBMIT_DEBUG: Selected pieces count: 1
🔧 BOT_SUBMIT_DEBUG: Selected pieces: ['ADVISOR_BLACK(11)']
🔧 BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 3
🔧 BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 3
🔧 BOT_SUBMIT_DEBUG: Action details - player: Bot 3, type: ActionType.PLAY_PIECES, is_bot: True
🔧 BOT_SUBMIT_DEBUG: Action payload pieces count: 1
🔧 BOT_SUBMIT_DEBUG: Creating fire-and-forget task for state machine action
✅ BOT_SUBMIT_DEBUG: Fire-and-forget first play action task created for Bot Bot 3
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 3 first play action queued - state machine will broadcast with correct next_player
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_turn_start completed successfully
🔧 NEW_TURN_DEBUG: update_phase_data completed successfully
{"timestamp": "2025-07-02T01:04:54.316755Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfaf New turn started - order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']", "module": "turn_state", "function": "_start_new_turn", "line": 264}
🎯 START_NEXT_DEBUG: _start_new_turn() completed
{"timestamp": "2025-07-02T01:04:54.316969Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\ude80 Enterprise: New turn auto-started with automatic broadcasting", "module": "turn_state", "function": "_process_turn_completion", "line": 645}
🎯 TURN_COMPLETE_DEBUG: _process_turn_completion() finished
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 3, required_piece_count: None
{"timestamp": "2025-07-02T01:04:54.317140Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Andy played 1 pieces", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room F2C5D7, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room F2C5D7 with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'players': {'Andy': {'hand': ['SOLDIER_RED(2)', 'CHARIOT_RED(8)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 6}, 'Bot 2': {'hand': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_RED(4)', 'SOLDIER_BLACK(1)', 'HORSE_RED(6)'], 'hand_size': 6}, 'Bot 3': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'hand_size': 6}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)'], 'hand_size': 6}}, 'round': 1, 'reason': 'Player Andy played 1 pieces', 'sequence': 22, 'timestamp': 1751418294.3174112, 'room_id': 'F2C5D7'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1160 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room F2C5D7.
🔧 HANDLE_ACTION_DEBUG: handle_action called for Bot 3 play_pieces
🔧 HANDLE_ACTION_DEBUG: State machine running check: True
🔧 HANDLE_ACTION_DEBUG: Converting action to event
🔧 HANDLE_ACTION_DEBUG: Creating GameEvent from action
🔧 HANDLE_ACTION_DEBUG: GameEvent created successfully
🔧 HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 3
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
{"timestamp": "2025-07-02T01:04:54.318847Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room F2C5D7 - Player Andy played 1 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Andy played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 3
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room F2C5D7 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 3', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': None, 'turn_plays': {}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 3', 'reason': 'Player Andy played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room F2C5D7, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room F2C5D7 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🚀 STARTER_DEBUG: Bot Bot 3 - is_starter: True, required_count: None
✅ REFINED_FIX: Allowing delayed same-source trigger for current player Bot 3 from phase_change (age: 0.7s)
✅ RACE_CONDITION_FIX: New action recorded for Bot 3 - play_pieces from phase_change (hash: 97ffd8e1b89f)
🚫 SEQUENCE_FIX: Bot 3 already acted in turn 3 - skipping
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 0 bot actions (lock-free)
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 3
{"timestamp": "2025-07-02T01:04:54.319578Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room F2C5D7 - Player Andy played 1 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 302}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 3
🔧 PLAY_NOTIFY_DEBUG: Manual bot manager notification removed - using automatic enterprise system
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Andy', 'pieces': [CHARIOT_BLACK(7)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 3', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.700s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.6998090744018555, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Andy', 'pieces': [CHARIOT_BLACK(7)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 3', 'turn_complete': False}}
🎯 WS_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.6998090744018555, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Andy', 'pieces': [CHARIOT_BLACK(7)], 'piece_count': 1, 'required_count': None, 'next_player': 'Bot 3', 'turn_complete': False}}
✅ Play queued: Andy -> [6]
DEBUG_WS: Entering broadcast method for room F2C5D7, event play
DEBUG_WS: Attempting to queue event 'play' for room F2C5D7 with data: {'player': 'Andy', 'pieces': ['CHARIOT_BLACK(7)'], 'valid': True, 'play_type': 'SINGLE', 'next_player': 'Bot 3', 'required_count': None, 'turn_complete': False, 'phase': 'turn', 'sequence': 23, 'timestamp': 1751418294.320298, 'reason': 'Player Andy played 1 pieces', 'room_id': 'F2C5D7'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 314 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room F2C5D7.
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x109195650>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🔧 VALIDATION_DEBUG: Validating bot Bot 3 action
🔧 VALIDATION_DEBUG: Current player: Bot 3
🔧 VALIDATION_DEBUG: Turn plays: []
🔧 VALIDATION_DEBUG: Payload: {'pieces': [ADVISOR_BLACK(11)]}
🔧 VALIDATION_DEBUG: Required piece count: None
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 3 == Bot 3
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 3 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 1 pieces
🔧 VALIDATION_DEBUG: Piece count: 1, Required: None
✅ VALIDATION_DEBUG: Starter piece count validation PASSED - 1 in 1-6 range
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 3
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 3
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 3
🎯 TURN_STATE_DEBUG: Current state - player_index: 0, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Bot 3 playing 1 pieces: ['ADVISOR_BLACK(11)']
🎯 TURN_STATE_DEBUG: Setting required piece count to 1
🎯 TURN_STATE_DEBUG: Before setting - required_piece_count was: None
🎯 TURN_STATE_DEBUG: After setting - required_piece_count is: 1
{"timestamp": "2025-07-02T01:04:54.320974Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 3 (starter) plays 1 pieces - setting required count", "module": "turn_state", "function": "_handle_play_pieces", "line": 353}
{"timestamp": "2025-07-02T01:04:54.321121Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 3 plays: [ADVISOR_BLACK(11)] (value: 0)", "module": "turn_state", "function": "_handle_play_pieces", "line": 367}
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 0
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: Next player: Bot 4
🎯 TURN_STATE_DEBUG: Round 1, Turn 3 - Bot 3 played, next: Bot 4
🎯 UPDATE_DEBUG: About to update phase data with current_player: Bot 4, required_piece_count: 1
{"timestamp": "2025-07-02T01:04:54.321308Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Bot 3 played 1 pieces", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room F2C5D7, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room F2C5D7 with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 4', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751418294.320679}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'players': {'Andy': {'hand': ['SOLDIER_RED(2)', 'CHARIOT_RED(8)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 6}, 'Bot 2': {'hand': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_RED(4)', 'SOLDIER_BLACK(1)', 'HORSE_RED(6)'], 'hand_size': 6}, 'Bot 3': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'hand_size': 6}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)'], 'hand_size': 6}}, 'round': 1, 'reason': 'Player Bot 3 played 1 pieces', 'sequence': 24, 'timestamp': 1751418294.3216221, 'room_id': 'F2C5D7'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1309 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room F2C5D7.
DEBUG_WS_QUEUE: Room F2C5D7 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room F2C5D7.
DEBUG_WS: Successfully sent 'phase_change' to a client in room F2C5D7.
{"timestamp": "2025-07-02T01:04:54.322822Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room F2C5D7 - Player Bot 3 played 1 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 3 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Bot 4
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room F2C5D7 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Bot 4', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751418294.320679}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Bot 4', 'reason': 'Player Bot 3 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room F2C5D7, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room F2C5D7 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🚀 STARTER_DEBUG: Bot Bot 4 - is_starter: False, required_count: 1
✅ REFINED_FIX: Allowing new trigger for current player Bot 4 from phase_change
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from phase_change (hash: 886426ae838a)
🚀 STARTER_DEBUG: Bot 4 is follower - using turn_play action
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 1 bot actions (lock-free)
🔧 BOT_MANAGER_LOCK_FIX: Executing action enterprise_turn_play (lock-free)
🎯 PLAY_PHASE_DEBUG: Got from state machine - required_count: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 PLAY_PHASE_DEBUG: Last player: Bot 3, last_index: 0
🎯 PLAY_PHASE_DEBUG: Checking next player 1: Bot 4
✅ REFINED_FIX: Allowing new trigger for current player Bot 4 from player_played
✅ RACE_CONDITION_FIX: New action recorded for Bot 4 - play_pieces from player_played (hash: 8d30f6383664)
🤖 PLAY_PHASE_DEBUG: Triggering bot play for Bot 4
🤖 PLAY_PHASE_DEBUG: Bot Bot 4 thinking for 0.8s...
DEBUG_WS_QUEUE: Room F2C5D7 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room F2C5D7.
DEBUG_WS: Successfully sent 'play' to a client in room F2C5D7.
DEBUG_WS_QUEUE: Room F2C5D7 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room F2C5D7.
DEBUG_WS: Successfully sent 'phase_change' to a client in room F2C5D7.
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play() for Bot 4
🔧 BOT_SUBMIT_DEBUG: Bot object: Bot 4 - 0 pts
🔧 BOT_SUBMIT_DEBUG: Bot hand size: 6
🔧 BOT_SUBMIT_DEBUG: _bot_play() method called for Bot 4
🔧 BOT_SUBMIT_DEBUG: Bot hand: ['SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)']
🔧 BOT_SUBMIT_DEBUG: Starting piece selection logic for Bot 4
🎯 BOT_PLAY_DEBUG: Got required_piece_count from state machine: 1
🔧 BOT_SUBMIT_DEBUG: About to call ai.choose_best_play for Bot 4
🔧 BOT_SUBMIT_DEBUG: Hand size: 6, Required count: 1
🤖 BOT chooses to play SINGLE (5 pts): HORSE
🔧 BOT_SUBMIT_DEBUG: ai.choose_best_play returned 1 pieces for Bot 4
🎯 BOT_PLAY_DEBUG: Final selection - 1 pieces: ['HORSE_BLACK(5)']
🤖 Bot Bot 4 will play 1 pieces: ['HORSE_BLACK(5)']
🔧 BOT_SUBMIT_DEBUG: This is from _bot_play() - bot is following another player
🔧 BOT_SUBMIT_DEBUG: About to call _bot_play for Bot Bot 4
🔧 BOT_SUBMIT_DEBUG: Selected pieces count: 1
🔧 BOT_SUBMIT_DEBUG: Selected pieces: ['HORSE_BLACK(5)']
🔧 BOT_SUBMIT_DEBUG: Required piece count was: 1
🔧 BOT_SUBMIT_DEBUG: State machine is available, creating GameAction for Bot Bot 4
🔧 BOT_SUBMIT_DEBUG: GameAction created successfully for Bot Bot 4
🔧 BOT_SUBMIT_DEBUG: Action details - player: Bot 4, type: ActionType.PLAY_PIECES, is_bot: True
🔧 BOT_SUBMIT_DEBUG: Action payload pieces count: 1
🔧 BOT_SUBMIT_DEBUG: Creating fire-and-forget task for state machine action
✅ BOT_SUBMIT_DEBUG: Fire-and-forget play action task created for Bot Bot 4
🎯 BOT_PLAY_DEBUG: Action queued successfully, state machine will handle updates and broadcasting
✅ Bot Bot 4 action queued - state machine will broadcast with correct next_player
🔧 BOT_SUBMIT_DEBUG: _bot_play() completed successfully for Bot 4
✅ BOT_MANAGER_LOCK_FIX: Action enterprise_turn_play completed successfully
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Bot 4
{"timestamp": "2025-07-02T01:04:55.105715Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room F2C5D7 - Player Bot 3 played 1 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 302}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Bot 4
🔧 PLAY_NOTIFY_DEBUG: Manual bot manager notification removed - using automatic enterprise system
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.787s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.7872321605682373, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}}
✅ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 3
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.7872321605682373, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 3', 'pieces': [ADVISOR_BLACK(11)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Bot 4', 'turn_complete': False}}
🔧 HANDLE_ACTION_DEBUG: handle_action called for Bot 4 play_pieces
🔧 HANDLE_ACTION_DEBUG: State machine running check: True
🔧 HANDLE_ACTION_DEBUG: Converting action to event
🔧 HANDLE_ACTION_DEBUG: Creating GameEvent from action
🔧 HANDLE_ACTION_DEBUG: GameEvent created successfully
🔧 HANDLE_ACTION_DEBUG: About to call event_processor.handle_event
🔧 EVENT_PROCESSOR_DEBUG: handle_event called for play_pieces from Bot 4
🔧 EVENT_PROCESSOR_DEBUG: Step 1 - Validating event for current state (no lock)
✅ EVENT_PROCESSOR_DEBUG: Event validation passed
🔧 EVENT_PROCESSOR_DEBUG: Step 2 - About to acquire processing_lock for critical section only
🔧 EVENT_PROCESSOR_DEBUG: Processing_lock acquired for critical section
🔧 EVENT_PROCESSOR_DEBUG: Processing event in current state
🔧 PROCESS_EVENT_DEBUG: _process_event_in_state called for play_pieces
🔧 PROCESS_EVENT_DEBUG: Current state: <engine.state_machine.states.turn_state.TurnState object at 0x109195650>
🔧 PROCESS_EVENT_DEBUG: Checking if state has process_event method
🔧 PROCESS_EVENT_DEBUG: Using state's process_event method
🔧 VALIDATION_DEBUG: Validating bot Bot 4 action
🔧 VALIDATION_DEBUG: Current player: Bot 4
🔧 VALIDATION_DEBUG: Turn plays: ['Bot 3']
🔧 VALIDATION_DEBUG: Payload: {'pieces': [HORSE_BLACK(5)]}
🔧 VALIDATION_DEBUG: Required piece count: 1
✅ VALIDATION_DEBUG: Turn validation PASSED - Bot 4 == Bot 4
✅ VALIDATION_DEBUG: Already played validation PASSED - Bot 4 not in turn_plays
✅ VALIDATION_DEBUG: Payload validation PASSED - 'pieces' found in payload
✅ VALIDATION_DEBUG: Pieces format validation PASSED - 1 pieces
🔧 VALIDATION_DEBUG: Piece count: 1, Required: 1
✅ VALIDATION_DEBUG: Required piece count validation PASSED - 1 == 1
✅ VALIDATION_DEBUG: All validation checks PASSED for Bot 4
🎯 TURN_STATE_DEBUG: Processing action play_pieces from Bot 4
🎯 TURN_STATE_DEBUG: _handle_play_pieces called for Bot 4
🎯 TURN_STATE_DEBUG: Current state - player_index: 1, turn_order: ['Bot 3', 'Bot 4', 'Andy', 'Bot 2']
🎯 TURN_STATE_DEBUG: Player Bot 4 playing 1 pieces: ['HORSE_BLACK(5)']
{"timestamp": "2025-07-02T01:04:55.106248Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfb2 Bot 4 plays: [HORSE_BLACK(5)] (value: 0)", "module": "turn_state", "function": "_handle_play_pieces", "line": 367}
🎯 TURN_STATE_DEBUG: Before advancing - current_player_index: 1
🎯 TURN_STATE_DEBUG: After advancing - current_player_index: 2
🎯 TURN_STATE_DEBUG: Next player: Andy
🎯 TURN_STATE_DEBUG: Round 1, Turn 3 - Bot 4 played, next: Andy
🎯 UPDATE_DEBUG: About to update phase data with current_player: Andy, required_piece_count: 1
{"timestamp": "2025-07-02T01:04:55.106342Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83c\udfae Phase Data Update: Player Bot 4 played 1 pieces", "module": "base_state", "function": "update_phase_data", "line": 165}
DEBUG_WS: Entering broadcast method for room F2C5D7, event phase_change
DEBUG_WS: Attempting to queue event 'phase_change' for room F2C5D7 with data: {'phase': 'turn', 'allowed_actions': ['play_pieces', 'player_disconnect', 'timeout', 'player_reconnect'], 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Andy', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751418294.320679}, 'Bot 4': {'pieces': ['HORSE_BLACK(5)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751418295.106129}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'players': {'Andy': {'hand': ['SOLDIER_RED(2)', 'CHARIOT_RED(8)', 'ADVISOR_RED(12)', 'CHARIOT_RED(8)', 'CANNON_RED(4)', 'SOLDIER_RED(2)'], 'hand_size': 6}, 'Bot 2': {'hand': ['SOLDIER_BLACK(1)', 'SOLDIER_BLACK(1)', 'SOLDIER_RED(2)', 'CANNON_RED(4)', 'SOLDIER_BLACK(1)', 'HORSE_RED(6)'], 'hand_size': 6}, 'Bot 3': {'hand': ['HORSE_RED(6)', 'ADVISOR_BLACK(11)', 'CHARIOT_BLACK(7)', 'ELEPHANT_BLACK(9)', 'SOLDIER_RED(2)', 'CANNON_BLACK(3)'], 'hand_size': 6}, 'Bot 4': {'hand': ['SOLDIER_BLACK(1)', 'HORSE_BLACK(5)', 'SOLDIER_RED(2)', 'HORSE_BLACK(5)', 'SOLDIER_BLACK(1)', 'CANNON_BLACK(3)'], 'hand_size': 6}}, 'round': 1, 'reason': 'Player Bot 4 played 1 pieces', 'sequence': 26, 'timestamp': 1751418295.106522, 'room_id': 'F2C5D7'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'phase_change'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'phase_change' - 1457 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'phase_change'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'phase_change'
DEBUG_WS: Message for event 'phase_change' added to queue for room F2C5D7.
DEBUG_WS: Entering broadcast method for room F2C5D7, event play
DEBUG_WS: Attempting to queue event 'play' for room F2C5D7 with data: {'player': 'Bot 3', 'pieces': ['ADVISOR_BLACK(11)'], 'valid': True, 'play_type': 'SINGLE', 'next_player': 'Bot 4', 'required_count': 1, 'turn_complete': False, 'phase': 'turn', 'sequence': 25, 'timestamp': 1751418295.106774, 'reason': 'Player Bot 3 played 1 pieces', 'room_id': 'F2C5D7'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 314 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room F2C5D7.
{"timestamp": "2025-07-02T01:04:55.106894Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Auto-broadcast: phase_change to room F2C5D7 - Player Bot 4 played 1 pieces", "module": "base_state", "function": "_auto_broadcast_phase_change", "line": 227}
🤖 ENTERPRISE_DATA_DEBUG: Notifying bot manager about data change - reason: Player Bot 4 played 1 pieces
🤖 ENTERPRISE_DATA_DEBUG: Turn phase - current player: Andy
🔔 BOT_MANAGER_DEBUG: Received event 'phase_change' for room F2C5D7 with data: {'phase': 'turn', 'phase_data': {'current_turn_starter': 'Bot 3', 'current_player': 'Andy', 'turn_order': ['Bot 3', 'Bot 4', 'Andy', 'Bot 2'], 'required_piece_count': 1, 'turn_plays': {'Bot 3': {'pieces': ['ADVISOR_BLACK(11)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751418294.320679}, 'Bot 4': {'pieces': ['HORSE_BLACK(5)'], 'piece_count': 1, 'play_type': 'unknown', 'play_value': 0, 'is_valid': True, 'timestamp': 1751418295.106129}}, 'turn_complete': False, 'current_turn_number': 3, 'winner': 'Bot 3', 'piles_won': 1, 'next_turn_starter': 'Bot 3'}, 'current_player': 'Andy', 'reason': 'Player Bot 4 played 1 pieces'}
✅ BOT_MANAGER_DEBUG: Found handler for room F2C5D7, delegating to handler...
🎮 BOT_HANDLER_DEBUG: Room F2C5D7 handling event 'phase_change' with data keys: ['phase', 'phase_data', 'current_player', 'reason']
🔍 BOT_HANDLER_DEBUG: Event type check - event == 'phase_change': True
🔍 BOT_HANDLER_DEBUG: Event value repr: 'phase_change'
🔧 BOT_MANAGER_LOCK_FIX: Step 1 - Determining bot actions (minimal lock scope)
🔧 BOT_MANAGER_LOCK_FIX: Lock acquired for decision logic only
🚀 BOT_HANDLER_DEBUG: Analyzing enterprise phase change
🔧 BOT_MANAGER_LOCK_FIX: Decision logic completed - releasing lock
🔧 BOT_MANAGER_LOCK_FIX: Step 2 - Executing 0 bot actions (lock-free)
🎯 UPDATE_DEBUG: Phase data updated - next_player should be: Andy
{"timestamp": "2025-07-02T01:04:55.107165Z", "level": "INFO", "logger": "game.state.turn", "message": "\ud83d\udce4 Custom broadcast: play to room F2C5D7 - Player Bot 4 played 1 pieces", "module": "base_state", "function": "broadcast_custom_event", "line": 302}
🎯 TURN_STATE_DEBUG: Enterprise broadcast play event - next_player: Andy
🔧 PLAY_NOTIFY_DEBUG: Manual bot manager notification removed - using automatic enterprise system
🎯 TURN_STATE_DEBUG: Play pieces result: {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [HORSE_BLACK(5)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}
✅ PROCESS_EVENT_DEBUG: State process_event completed: True
✅ EVENT_PROCESSOR_DEBUG: _process_event_in_state completed: True
🔧 EVENT_PROCESSOR_DEBUG: Checking transitions: False
🔧 EVENT_PROCESSOR_DEBUG: Critical section completed - releasing lock
🔧 EVENT_PROCESSOR_DEBUG: Step 3 - Lock-free operations (stats, history)
🔧 EVENT_PROCESSOR_DEBUG: Updating stats (lock-free)
🔧 EVENT_PROCESSOR_DEBUG: Storing event history (lock-free)
✅ EVENT_PROCESSOR_DEBUG: handle_event completed successfully
🔧 HANDLE_ACTION_DEBUG: event_processor.handle_event completed in 0.001s
🔧 HANDLE_ACTION_DEBUG: Processing result
✅ HANDLE_ACTION_DEBUG: handle_action returning result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.00127410888671875, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [HORSE_BLACK(5)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}}
✅ BOT_SUBMIT_DEBUG: Action submitted successfully for Bot Bot 4
🎯 BOT_PLAY_DEBUG: State machine result: {'success': True, 'immediate': True, 'transition': False, 'processing_time': 0.00127410888671875, 'reason': 'Turn action processed successfully', 'data': {'status': 'play_accepted', 'player': 'Bot 4', 'pieces': [HORSE_BLACK(5)], 'piece_count': 1, 'required_count': 1, 'next_player': 'Andy', 'turn_complete': False}}
DEBUG_WS: Entering broadcast method for room F2C5D7, event play
DEBUG_WS: Attempting to queue event 'play' for room F2C5D7 with data: {'player': 'Bot 4', 'pieces': ['HORSE_BLACK(5)'], 'valid': True, 'play_type': 'SINGLE', 'next_player': 'Andy', 'required_count': 1, 'turn_complete': False, 'phase': 'turn', 'sequence': 27, 'timestamp': 1751418295.1075132, 'reason': 'Player Bot 4 played 1 pieces', 'room_id': 'F2C5D7'}
🔧 SERIALIZATION_DEBUG: Testing JSON serialization for event 'play'
🔧 SERIALIZATION_DEBUG: JSON serialization test PASSED for event 'play' - 311 chars
🔧 SERIALIZATION_DEBUG: About to call queue.put() for event 'play'
✅ SERIALIZATION_DEBUG: queue.put() completed successfully for event 'play'
DEBUG_WS: Message for event 'play' added to queue for room F2C5D7.
DEBUG_WS_QUEUE: Room F2C5D7 got message: phase_change
DEBUG_WS: Broadcasting event 'phase_change' (op_id: unknown) to 1 clients in room F2C5D7.
DEBUG_WS: Successfully sent 'phase_change' to a client in room F2C5D7.
DEBUG_WS_QUEUE: Room F2C5D7 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room F2C5D7.
DEBUG_WS: Successfully sent 'play' to a client in room F2C5D7.
DEBUG_WS_QUEUE: Room F2C5D7 got message: play
DEBUG_WS: Broadcasting event 'play' (op_id: unknown) to 1 clients in room F2C5D7.
DEBUG_WS: Successfully sent 'play' to a client in room F2C5D7.
DEBUG_WS_RECEIVE: Received event 'ping' from client in room lobby with data: {'timestamp': 1751418303493}