{
  "summary": {
    "analysis_date": "2025-07-27T03:23:10.747834",
    "total_files": 539,
    "type_distribution": {
      "legacy": 202,
      "clean": 311,
      "hybrid": 8,
      "bridge": 1,
      "enterprise": 17
    },
    "files_by_type": {
      "legacy": [
        "verify_adapter_only_mode_simple.py",
        "capture_from_live_server.py",
        "verify_adapter_only_mode.py",
        "simple_compatibility_check.py",
        "fix_dto_inheritance.py",
        "test_ws_adapter_integration.py",
        "test_adapter_integration_live.py",
        "run_tests.py",
        "test_adapter_initialization.py",
        "start_golden_master_capture.py",
        "extract_legacy_handlers.py",
        "fix_domain_imports.py",
        "run_phase_tests.py",
        "test_complete_game_flow.py",
        "identify_architecture_type.py",
        "benchmark_async.py",
        "analyze_golden_master_mismatches.py",
        "adapter_metrics_collector.py",
        "test_room_state_sync.py",
        "async_migration_example.py",
        "trigger_adapter_init.py",
        "test_connection_stability.py",
        "architecture_status_dashboard.py",
        "shared_instances.py",
        "verify_adapter_files.py",
        "check_adapter_integration.py",
        "fix_dto_base_classes.py",
        "socket_manager.py",
        "test_websocket_room_creation.py",
        "test_room_manager_direct.py",
        "test_reconnection_scenarios.py",
        "monitor_shadow_mode.py",
        "test_room_operations.py",
        "config/logging_config.py",
        "config/__init__.py",
        "config/rate_limits.py",
        "tests/test_broadcast_queue.py",
        "tests/test_duplicate_names.py",
        "tests/test_async_room_manager.py",
        "tests/test_bot_state_machine_integration.py",
        "tests/test_red_general_assignment.py",
        "tests/test_rate_limiting.py",
        "tests/test_enterprise_architecture.py",
        "tests/test_turn_progression.py",
        "tests/test_scoring_delay_investigation.py",
        "tests/test_preparation_state.py",
        "tests/test_phase_transition_errors.py",
        "tests/test_reliable_messaging.py",
        "tests/test_scoring_object_format.py",
        "tests/test_route_replacement.py",
        "tests/test_bot_validation_fix.py",
        "tests/test_complete_phase_flow.py",
        "tests/test_scoring_state.py",
        "tests/test_race_condition_fix.py",
        "tests/test_state_machine.py",
        "tests/test_complete_turn_flow.py",
        "tests/test_bot_timing_simple.py",
        "tests/test_error_recovery.py",
        "tests/test_bot_turn_timing.py",
        "tests/__init__.py",
        "tests/test_websocket_validation.py",
        "tests/test_bot_timing_fix.py",
        "tests/test_reconnect_flow.py",
        "tests/test_end_to_end_scoring_fix.py",
        "tests/test_round_start_phase.py",
        "tests/test_bot_redeal_timing.py",
        "tests/load_test_rate_limits.py",
        "tests/test_async_performance.py",
        "tests/test_transition_fix.py",
        "tests/test_refined_deduplication.py",
        "tests/async_test_utils.py",
        "tests/test_weak_hand_scenarios.py",
        "tests/test_phase4_validation.py",
        "tests/test_api_simulation.py",
        "tests/test_bot_manager_call.py",
        "tests/test_round_start_scenarios.py",
        "tests/test_avatar_colors.py",
        "tests/test_game_simulation.py",
        "tests/test_phase_flow_simple.py",
        "tests/test_full_game_flow.py",
        "tests/test_immediate_transition_bug.py",
        "tests/test_deep_json_check.py",
        "tests/test_json_serialization.py",
        "tests/test_message_queue.py",
        "tests/test_simple_turn_progression.py",
        "tests/analyze_rate_limit_issues.py",
        "tests/test_round_start_bot_integration.py",
        "tests/test_phase_broadcast.py",
        "tests/test_phase_transitions.py",
        "tests/test_disconnect_handling.py",
        "tests/test_async_compatibility.py",
        "tests/test_complete_integration.py",
        "tests/test_simultaneous_redeal.py",
        "tests/test_turn_state_debug.py",
        "tests/test_event_sourcing.py",
        "tests/test_game_over_simple.py",
        "tests/test_game_over_transition.py",
        "tests/test_helpers.py",
        "tests/test_async_game.py",
        "tests/test_integration.py",
        "tests/test_all_phases_enterprise.py",
        "tests/test_event_store.py",
        "tests/manual_rate_limit_test.py",
        "tests/test_reconnection_flow.py",
        "tests/test_state_replay.py",
        "tests/test_real_game_integration.py",
        "tests/test_realistic_integration.py",
        "tests/test_prep_debug.py",
        "tests/test_turn_number_sync.py",
        "tests/test_connection_flow.py",
        "tests/test_auto_transition.py",
        "tests/test_round_start_simple.py",
        "tests/test_bot_timing.py",
        "tests/test_enterprise_fixes.py",
        "tests/test_turn_state.py",
        "tests/test_reconnection_trace.py",
        "tests/test_event_store_performance.py",
        "tests/test_state_integration.py",
        "tests/contracts/websocket_contracts.py",
        "tests/contracts/golden_master.py",
        "tests/contracts/__init__.py",
        "tests/contracts/test_websocket_contracts.py",
        "tests/contracts/parallel_runner.py",
        "tests/contracts/monitor_compatibility.py",
        "tests/contracts/capture_golden_masters.py",
        "tests/behavioral/test_game_mechanics.py",
        "tests/behavioral/test_game_flows.py",
        "tests/behavioral/run_behavioral_tests.py",
        "tests/behavioral/test_integration.py",
        "tests/test_reconnection/__init__.py",
        "tests/phase6/run_phase6_tests.py",
        "tests/phase6/utilities/validate_test_setup.py",
        "tests/phase6/utilities/test_event_replay.py",
        "tests/phase6/migration_tools/step_6_4_1/test_state_machine_enterprise.py",
        "tests/phase6/migration_tools/step_6_4_1/test_state_machine_integration.py",
        "tests/phase6/migration_tools/step_6_5_3/final_performance_validation.py",
        "tests/phase6/migration_tools/step_6_5_3/run_regression_tests.py",
        "tests/phase6/migration_tools/step_6_5_2/run_load_tests.py",
        "tests/phase6/migration_tools/step_6_5_2/performance/test_event_throughput.py",
        "tests/phase6/migration_tools/step_6_4_3/test_scoring_system_migration.py",
        "tests/phase6/migration_tools/step_6_4_3/test_scoring_integration.py",
        "tests/phase6/migration_tools/step_6_4_2/test_bot_timing_accuracy.py",
        "tests/phase6/migration_tools/step_6_4_2/test_bot_management_migration.py",
        "tests/phase6/migration_tools/step_6_5_1/test_complete_integration.py",
        "tests/events/run_event_tests.py",
        "tests/events/unit/test_event_broadcast_mapper.py",
        "tests/events/unit/test_event_bus.py",
        "tests/events/integration/test_state_machine_events.py",
        "utils/error_handling.py",
        "backend/test_async_integration.py",
        "backend/test_eventstore_integration.py",
        "api/shadow_mode.py",
        "api/__init__.py",
        "api/shadow_mode_integration.py",
        "api/main.py",
        "api/shadow_mode_manager.py",
        "api/middleware/event_priority.py",
        "api/middleware/__init__.py",
        "api/middleware/websocket_rate_limit.py",
        "api/middleware/rate_limit.py",
        "api/websocket/migration_example.py",
        "api/websocket/async_migration_helper.py",
        "api/websocket/message_queue.py",
        "api/websocket/connection_manager.py",
        "api/websocket/state_sync.py",
        "api/config/__init__.py",
        "api/config/rate_limit_config.py",
        "api/models/__init__.py",
        "api/models/request_models.py",
        "api/models/game_models.py",
        "api/controllers/__init__.py",
        "api/routes/__init__.py",
        "api/routes/debug.py",
        "api/routes/ws_integration_patch.py",
        "api/routes/ws_legacy_handlers.py",
        "api/routes/routes.py",
        "api/services/logging_service.py",
        "api/services/__init__.py",
        "api/services/health_monitor.py",
        "api/services/event_store.py",
        "api/services/recovery_manager.py",
        "api/validation/rest_validators.py",
        "api/validation/websocket_validators.py",
        "api/validation/__init__.py",
        "engine/async_game.py",
        "engine/turn_resolution.py",
        "engine/game.py",
        "engine/scoring.py",
        "engine/ai.py",
        "engine/constants.py",
        "engine/room_manager.py",
        "engine/__init__.py",
        "engine/rules.py",
        "engine/player.py",
        "engine/async_room.py",
        "engine/bot_manager.py",
        "engine/async_room_manager.py",
        "engine/win_conditions.py",
        "engine/async_bot_strategy.py",
        "engine/async_compat.py",
        "engine/piece.py",
        "engine/room.py"
      ],
      "clean": [
        "test_final_performance.py",
        "quick_architecture_check.py",
        "simple_repository_benchmark.py",
        "test_complete_adapter_system.py",
        "test_ultra_optimized_performance.py",
        "capture_golden_masters_integrated.py",
        "test_adapter_performance_optimized.py",
        "simple_cache_test.py",
        "test_adapter_integration.py",
        "test_integrated_adapters.py",
        "compare_specific_mismatch.py",
        "verify_architecture_status.py",
        "tests/test_domain_integration.py",
        "tests/integration/test_game_actions.py",
        "tests/integration/test_room_operations.py",
        "tests/contracts/test_adapter_contracts.py",
        "tests/adapters/test_connection_adapters.py",
        "tests/adapters/test_room_adapters.py",
        "tests/adapters/test_lobby_adapters.py",
        "tests/adapters/test_game_adapters.py",
        "tests/test_infrastructure/test_unit_of_work.py",
        "tests/test_infrastructure/test_dependencies.py",
        "tests/test_infrastructure/test_services.py",
        "tests/test_infrastructure/test_e2e_flow.py",
        "tests/test_infrastructure/test_feature_flags.py",
        "tests/test_infrastructure/test_phase4_complete.py",
        "tests/test_infrastructure/test_clean_architecture_adapter.py",
        "tests/test_infrastructure/test_performance.py",
        "tests/test_infrastructure/test_infrastructure_simple.py",
        "tests/test_infrastructure/test_integration.py",
        "tests/test_reconnection/test_player_disconnection.py",
        "tests/test_reconnection/test_reconnection_adapter.py",
        "tests/test_reconnection/test_player_reconnection.py",
        "tests/test_reconnection/test_message_queue.py",
        "tests/application/test_structure.py",
        "tests/application/test_use_cases.py",
        "tests/phase6/utilities/validate_repository_data.py",
        "tests/phase6/utilities/test_memory_monitoring.py",
        "tests/phase6/utilities/activate_migration_monitoring.py",
        "tests/phase6/utilities/capture_performance_baseline.py",
        "tests/phase6/migration_tools/step_6_5_2/performance/test_cache_performance.py",
        "tests/phase6/migration_tools/step_6_5_2/performance/test_repository_performance.py",
        "tests/phase6/migration_tools/step_6_4_2/test_bot_management_integration.py",
        "tests/phase6/infrastructure/test_websocket_integration.py",
        "tests/phase6/infrastructure/monitoring/test_migration_alerts.py",
        "tests/phase6/infrastructure/monitoring/validate_monitoring_coverage.py",
        "tests/events/validate_event_system.py",
        "tests/events/integration/test_event_performance.py",
        "tests/events/contracts/test_adapter_event_contracts.py",
        "tests/events/shadow/test_shadow_mode.py",
        "tests/infrastructure/test_rate_limiting.py",
        "tests/infrastructure/test_hybrid_persistence.py",
        "tests/infrastructure/test_resilience.py",
        "tests/infrastructure/test_optimized_repositories.py",
        "tests/infrastructure/test_messaging.py",
        "tests/infrastructure/test_observability.py",
        "tests/infrastructure/test_state_persistence.py",
        "tests/infrastructure/test_monitoring.py",
        "tests/infrastructure/test_caching.py",
        "tests/infrastructure/test_event_store.py",
        "tests/infrastructure/test_websocket_integration.py",
        "tests/infrastructure/test_persistence_abstraction.py",
        "tests/domain/__init__.py",
        "tests/domain/value_objects/test_hand_strength.py",
        "tests/domain/value_objects/test_declaration.py",
        "tests/domain/value_objects/__init__.py",
        "tests/domain/value_objects/test_piece.py",
        "tests/domain/services/test_game_rules.py",
        "tests/domain/services/test_scoring_service.py",
        "tests/domain/services/__init__.py",
        "tests/domain/services/test_turn_resolution.py",
        "tests/domain/entities/test_player.py",
        "tests/domain/entities/__init__.py",
        "tests/domain/entities/test_game.py",
        "tests/domain/entities/test_room.py",
        "backend/infrastructure/__init__.py",
        "backend/infrastructure/events/__init__.py",
        "backend/infrastructure/events/event_broadcast_mapper.py",
        "backend/infrastructure/events/in_memory_event_bus.py",
        "backend/infrastructure/events/decorators.py",
        "backend/domain/__init__.py",
        "backend/domain/events/scoring_events.py",
        "backend/domain/events/error_events.py",
        "backend/domain/events/all_events.py",
        "backend/domain/events/__init__.py",
        "backend/domain/events/lobby_events.py",
        "backend/domain/events/room_events.py",
        "backend/domain/events/game_events.py",
        "backend/domain/events/turn_events.py",
        "backend/domain/events/connection_events.py",
        "backend/domain/events/base.py",
        "backend/domain/events/event_types.py",
        "backend/domain/interfaces/__init__.py",
        "backend/domain/interfaces/event_publisher.py",
        "api/adapters/websocket_adapter_integration_ultra_optimized.py",
        "api/adapters/connection_adapters_optimized.py",
        "api/adapters/websocket_adapter_integration_optimized.py",
        "api/adapters/adapter_registry_optimized.py",
        "api/adapters/__init__.py",
        "api/adapters/connection_adapters.py",
        "api/adapters/unified_adapter_handler.py",
        "api/adapters/room_adapters.py",
        "api/adapters/lobby_adapters.py",
        "api/adapters/game_adapters.py",
        "api/adapters/adapter_registry.py",
        "api/adapters/adapter_performance_analysis.py",
        "api/adapters/websocket_adapter_integration.py",
        "api/adapters/connection_adapters_event.py",
        "api/adapters/room_adapters_event.py",
        "api/adapters/integrated_adapter_system.py",
        "api/adapters/game_adapters_event.py",
        "api/adapters/domain_integration.py",
        "api/adapters/websocket_adapter_final.py",
        "api/adapters/game_adapters_domain.py",
        "api/adapters/lobby_adapters_event.py",
        "api/adapters/domain_adapter_wrapper.py",
        "api/adapters/adapter_event_config.py",
        "api/routes/ws_adapter_integration.py",
        "application/__init__.py",
        "application/exceptions.py",
        "application/base.py",
        "application/dto/game.py",
        "application/dto/__init__.py",
        "application/dto/room_management.py",
        "application/dto/connection.py",
        "application/dto/common.py",
        "application/dto/lobby.py",
        "application/dto/base.py",
        "application/use_cases/__init__.py",
        "application/use_cases/connection/handle_player_reconnect.py",
        "application/use_cases/connection/sync_client_state.py",
        "application/use_cases/connection/__init__.py",
        "application/use_cases/connection/mark_client_ready.py",
        "application/use_cases/connection/queue_message_for_player.py",
        "application/use_cases/connection/acknowledge_message.py",
        "application/use_cases/connection/handle_ping.py",
        "application/use_cases/connection/handle_player_disconnect.py",
        "application/use_cases/lobby/get_room_list.py",
        "application/use_cases/lobby/__init__.py",
        "application/use_cases/lobby/get_room_details.py",
        "application/use_cases/game/mark_player_ready.py",
        "application/use_cases/game/start_game.py",
        "application/use_cases/game/accept_redeal.py",
        "application/use_cases/game/leave_game.py",
        "application/use_cases/game/__init__.py",
        "application/use_cases/game/request_redeal.py",
        "application/use_cases/game/play.py",
        "application/use_cases/game/declare.py",
        "application/use_cases/game/decline_redeal.py",
        "application/use_cases/game/handle_redeal_decision.py",
        "application/use_cases/bot/__init__.py",
        "application/use_cases/bot/schedule_bot_action.py",
        "application/use_cases/room_management/remove_player.py",
        "application/use_cases/room_management/__init__.py",
        "application/use_cases/room_management/get_room_state.py",
        "application/use_cases/room_management/join_room.py",
        "application/use_cases/room_management/create_room.py",
        "application/use_cases/room_management/leave_room.py",
        "application/use_cases/room_management/add_bot.py",
        "application/services/game_application_service.py",
        "application/services/__init__.py",
        "application/services/connection_application_service.py",
        "application/services/room_application_service.py",
        "application/services/message_queue_service.py",
        "application/services/lobby_application_service.py",
        "application/services/reconnection_service.py",
        "application/interfaces/services.py",
        "application/interfaces/__init__.py",
        "application/interfaces/repositories.py",
        "application/interfaces/unit_of_work.py",
        "infrastructure/feature_flags.py",
        "infrastructure/dependencies.py",
        "infrastructure/unit_of_work.py",
        "infrastructure/middleware/implementations.py",
        "infrastructure/middleware/base.py",
        "infrastructure/websocket/recovery.py",
        "infrastructure/websocket/__init__.py",
        "infrastructure/websocket/connection_manager.py",
        "infrastructure/websocket/event_propagator.py",
        "infrastructure/websocket/websocket_repository.py",
        "infrastructure/websocket/state_sync.py",
        "infrastructure/websocket/middleware.py",
        "infrastructure/state_persistence/recovery.py",
        "infrastructure/state_persistence/migration_registry.py",
        "infrastructure/state_persistence/transition_log.py",
        "infrastructure/state_persistence/__init__.py",
        "infrastructure/state_persistence/event_sourcing.py",
        "infrastructure/state_persistence/persistence_manager.py",
        "infrastructure/state_persistence/abstractions.py",
        "infrastructure/state_persistence/versioning.py",
        "infrastructure/state_persistence/snapshot.py",
        "infrastructure/state_persistence/migrations/__init__.py",
        "infrastructure/state_persistence/migrations/v2_to_v3.py",
        "infrastructure/state_persistence/migrations/v1_to_v2.py",
        "infrastructure/rate_limiting/sliding_window.py",
        "infrastructure/rate_limiting/token_bucket.py",
        "infrastructure/rate_limiting/__init__.py",
        "infrastructure/rate_limiting/distributed.py",
        "infrastructure/rate_limiting/base.py",
        "infrastructure/rate_limiting/websocket_limiter.py",
        "infrastructure/rate_limiting/middleware.py",
        "infrastructure/optimization/memory_manager.py",
        "infrastructure/optimization/__init__.py",
        "infrastructure/optimization/object_pool.py",
        "infrastructure/optimization/performance_profiler.py",
        "infrastructure/health/__init__.py",
        "infrastructure/health/health_check.py",
        "infrastructure/repositories/connection_repository.py",
        "infrastructure/repositories/application_room_repository.py",
        "infrastructure/repositories/in_memory_room_repository.py",
        "infrastructure/repositories/__init__.py",
        "infrastructure/repositories/optimized_room_repository.py",
        "infrastructure/repositories/optimized_game_repository.py",
        "infrastructure/repositories/in_memory_player_stats_repository.py",
        "infrastructure/repositories/in_memory_unit_of_work.py",
        "infrastructure/repositories/application_game_repository.py",
        "infrastructure/repositories/in_memory_game_repository.py",
        "infrastructure/repositories/message_queue_repository.py",
        "infrastructure/repositories/optimized_player_stats_repository.py",
        "infrastructure/observability/logging.py",
        "infrastructure/observability/metrics.py",
        "infrastructure/observability/tracing.py",
        "infrastructure/observability/health.py",
        "infrastructure/observability/monitoring.py",
        "infrastructure/observability/__init__.py",
        "infrastructure/observability/correlation.py",
        "infrastructure/adapters/__init__.py",
        "infrastructure/adapters/reconnection_adapter.py",
        "infrastructure/adapters/clean_architecture_adapter.py",
        "infrastructure/resilience/load_shedding.py",
        "infrastructure/resilience/timeout.py",
        "infrastructure/resilience/retry.py",
        "infrastructure/resilience/bulkhead.py",
        "infrastructure/resilience/circuit_breaker.py",
        "infrastructure/resilience/connection_pool.py",
        "infrastructure/persistence/hybrid_game_repository.py",
        "infrastructure/persistence/hybrid_repository.py",
        "infrastructure/persistence/filesystem_adapter.py",
        "infrastructure/persistence/repository_factory.py",
        "infrastructure/persistence/__init__.py",
        "infrastructure/persistence/memory_adapter.py",
        "infrastructure/persistence/base.py",
        "infrastructure/persistence/archive/archive_strategy.py",
        "infrastructure/persistence/archive/archive_manager.py",
        "infrastructure/persistence/archive/__init__.py",
        "infrastructure/persistence/archive/archive_worker.py",
        "infrastructure/persistence/archive/archive_backends.py",
        "infrastructure/event_store/hybrid_event_store.py",
        "infrastructure/event_store/__init__.py",
        "infrastructure/event_store/event_sourcing.py",
        "infrastructure/monitoring/tracing.py",
        "infrastructure/monitoring/system_metrics.py",
        "infrastructure/monitoring/__init__.py",
        "infrastructure/monitoring/visualization.py",
        "infrastructure/monitoring/event_stream.py",
        "infrastructure/monitoring/grafana_dashboards.py",
        "infrastructure/monitoring/prometheus_endpoint.py",
        "infrastructure/monitoring/enterprise_monitor.py",
        "infrastructure/monitoring/game_metrics.py",
        "infrastructure/monitoring/correlation.py",
        "infrastructure/events/__init__.py",
        "infrastructure/events/websocket_event_publisher.py",
        "infrastructure/events/in_memory_event_bus.py",
        "infrastructure/events/application_event_publisher.py",
        "infrastructure/caching/memory_cache.py",
        "infrastructure/caching/distributed_cache.py",
        "infrastructure/caching/__init__.py",
        "infrastructure/caching/cache_patterns.py",
        "infrastructure/caching/cache_strategies.py",
        "infrastructure/caching/base.py",
        "infrastructure/messaging/game_integration.py",
        "infrastructure/messaging/handlers.py",
        "infrastructure/messaging/__init__.py",
        "infrastructure/messaging/memory_queue.py",
        "infrastructure/messaging/routing.py",
        "infrastructure/messaging/base.py",
        "infrastructure/messaging/serialization.py",
        "infrastructure/messaging/dead_letter.py",
        "infrastructure/handlers/__init__.py",
        "infrastructure/services/__init__.py",
        "infrastructure/services/console_metrics_collector.py",
        "infrastructure/services/in_memory_cache_service.py",
        "domain/__init__.py",
        "domain/value_objects/hand_strength.py",
        "domain/value_objects/room_status.py",
        "domain/value_objects/identifiers.py",
        "domain/value_objects/connection_status.py",
        "domain/value_objects/__init__.py",
        "domain/value_objects/declaration.py",
        "domain/value_objects/player_role.py",
        "domain/value_objects/piece.py",
        "domain/events/player_events.py",
        "domain/events/__init__.py",
        "domain/events/game_events.py",
        "domain/events/connection_events.py",
        "domain/events/message_queue_events.py",
        "domain/events/base.py",
        "domain/services/turn_resolution.py",
        "domain/services/__init__.py",
        "domain/services/game_rules.py",
        "domain/services/scoring_service.py",
        "domain/entities/game.py",
        "domain/entities/__init__.py",
        "domain/entities/connection.py",
        "domain/entities/message_queue.py",
        "domain/entities/player.py",
        "domain/entities/room.py",
        "domain/interfaces/services.py",
        "domain/interfaces/events.py",
        "domain/interfaces/__init__.py",
        "domain/interfaces/repositories.py"
      ],
      "hybrid": [
        "tests/infrastructure/test_state_persistence_integration.py",
        "backend/infrastructure/events/integrated_broadcast_handler.py",
        "backend/infrastructure/events/broadcast_handlers.py",
        "api/routes/ws.py",
        "infrastructure/event_store/game_event_integration.py",
        "infrastructure/handlers/websocket_broadcast_handler.py",
        "infrastructure/services/simple_bot_service.py",
        "infrastructure/services/websocket_notification_service.py"
      ],
      "bridge": [
        "api/routes/ws_adapter_wrapper.py"
      ],
      "enterprise": [
        "engine/state_machine/base_state.py",
        "engine/state_machine/action_queue.py",
        "engine/state_machine/async_game_adapter.py",
        "engine/state_machine/__init__.py",
        "engine/state_machine/event_integration.py",
        "engine/state_machine/core.py",
        "engine/state_machine/game_state_machine.py",
        "engine/state_machine/event_config.py",
        "engine/state_machine/states/round_start_state.py",
        "engine/state_machine/states/turn_state.py",
        "engine/state_machine/states/__init__.py",
        "engine/state_machine/states/scoring_state.py",
        "engine/state_machine/states/game_over_state.py",
        "engine/state_machine/states/preparation_state.py",
        "engine/state_machine/states/waiting_state.py",
        "engine/state_machine/states/declaration_state.py",
        "engine/state_machine/states/turn_results_state.py"
      ]
    },
    "cross_dependencies": [
      {
        "clean_file": "tests/events/validate_event_system.py",
        "legacy_dependency": "engine.state_machine.core"
      },
      {
        "clean_file": "tests/events/validate_event_system.py",
        "legacy_dependency": "engine.state_machine.event_config"
      },
      {
        "clean_file": "tests/events/validate_event_system.py",
        "legacy_dependency": "engine.state_machine.event_integration"
      },
      {
        "clean_file": "infrastructure/persistence/repository_factory.py",
        "legacy_dependency": "backend.engine.game"
      },
      {
        "clean_file": "infrastructure/events/websocket_event_publisher.py",
        "legacy_dependency": "socket_manager"
      },
      {
        "clean_file": "infrastructure/events/application_event_publisher.py",
        "legacy_dependency": "socket_manager"
      }
    ],
    "recommendations": {
      "immediate_action": 0,
      "phase_7_removal": 202,
      "review_needed": 8
    }
  },
  "file_analyses": [
    {
      "file_path": "verify_adapter_only_mode_simple.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import os",
        "import sys"
      ],
      "dependencies": [
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_final_performance.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "from typing import",
        "import sys",
        "import os",
        "from api.adapters.websocket_adapter_final import"
      ],
      "dependencies": [
        "api.adapters.websocket_adapter_final",
        "asyncio",
        "os",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "capture_from_live_server.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "import websockets",
        "from datetime import",
        "from pathlib import",
        "from typing import",
        "import sys",
        "from tests.contracts.golden_master import",
        "from tests.contracts.websocket_contracts import",
        "import argparse"
      ],
      "dependencies": [
        "argparse",
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "sys",
        "tests.contracts.golden_master",
        "tests.contracts.websocket_contracts",
        "typing",
        "websockets"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "verify_adapter_only_mode.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import os",
        "import sys",
        "import asyncio",
        "from pathlib import",
        "from api.routes.ws_adapter_wrapper import",
        "import traceback"
      ],
      "dependencies": [
        "api.routes.ws_adapter_wrapper",
        "asyncio",
        "os",
        "pathlib",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "quick_architecture_check.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import sys",
        "import requests",
        "import json",
        "from pathlib import",
        "from infrastructure.feature_flags import",
        "import argparse"
      ],
      "dependencies": [
        "argparse",
        "infrastructure.feature_flags",
        "json",
        "pathlib",
        "requests",
        "sys"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "simple_compatibility_check.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from pathlib import",
        "import json",
        "from datetime import",
        "from tests.contracts.websocket_contracts import"
      ],
      "dependencies": [
        "datetime",
        "json",
        "pathlib",
        "tests.contracts.websocket_contracts"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "fix_dto_inheritance.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "import re",
        "from pathlib import"
      ],
      "dependencies": [
        "os",
        "pathlib",
        "re"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_ws_adapter_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import os",
        "from typing import",
        "from api.routes.ws_adapter_wrapper import"
      ],
      "dependencies": [
        "api.routes.ws_adapter_wrapper",
        "asyncio",
        "os",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_adapter_integration_live.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "import os",
        "import websockets",
        "import aiohttp",
        "from datetime import"
      ],
      "dependencies": [
        "aiohttp",
        "asyncio",
        "datetime",
        "json",
        "os",
        "websockets"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "run_tests.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from datetime import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_adapter_initialization.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import websockets",
        "import json"
      ],
      "dependencies": [
        "asyncio",
        "json",
        "websockets"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "start_golden_master_capture.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import sys",
        "import os",
        "from pathlib import",
        "import subprocess",
        "import pytest",
        "import asyncio"
      ],
      "dependencies": [
        "asyncio",
        "os",
        "pathlib",
        "pytest",
        "subprocess",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "extract_legacy_handlers.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import re",
        "import os"
      ],
      "dependencies": [
        "os",
        "re"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "fix_domain_imports.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "import re",
        "from pathlib import"
      ],
      "dependencies": [
        "os",
        "pathlib",
        "re"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "run_phase_tests.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import subprocess",
        "import sys",
        "from pathlib import"
      ],
      "dependencies": [
        "pathlib",
        "subprocess",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_complete_game_flow.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "simple_repository_benchmark.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "from pathlib import",
        "from infrastructure.repositories.optimized_room_repository import",
        "from domain.entities.room import",
        "import psutil"
      ],
      "dependencies": [
        "asyncio",
        "domain.entities.room",
        "infrastructure.repositories.optimized_room_repository",
        "logging",
        "pathlib",
        "psutil",
        "statistics",
        "sys",
        "time"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "identify_architecture_type.py",
      "architecture_type": "legacy",
      "confidence": 0.17910447761194032,
      "indicators": [
        "Uses direct broadcasting (legacy pattern)",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import os",
        "import re",
        "import json",
        "import argparse",
        "from pathlib import",
        "from typing import",
        "from dataclasses import",
        "from datetime import"
      ],
      "dependencies": [
        "argparse",
        "dataclasses",
        "datetime",
        "json",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_complete_adapter_system.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "from typing import",
        "import json",
        "from api.adapters.integrated_adapter_system import"
      ],
      "dependencies": [
        "api.adapters.integrated_adapter_system",
        "asyncio",
        "json",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "benchmark_async.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.async_bot_strategy import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "import sys",
        "from pathlib import",
        "from engine.async_bot_strategy import",
        "from engine.piece import",
        "from engine.player import",
        "import engine.ai"
      ],
      "dependencies": [
        "asyncio",
        "engine.ai",
        "engine.async_bot_strategy",
        "engine.piece",
        "engine.player",
        "pathlib",
        "sys",
        "time"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "analyze_golden_master_mismatches.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import json",
        "import os",
        "from typing import",
        "from collections import"
      ],
      "dependencies": [
        "collections",
        "json",
        "os",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_ultra_optimized_performance.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "from typing import",
        "import sys",
        "import os",
        "from api.adapters.websocket_adapter_integration import",
        "from api.adapters import",
        "from api.adapters import",
        "from api.adapters.websocket_adapter_integration_ultra_optimized import"
      ],
      "dependencies": [
        "api.adapters",
        "api.adapters.websocket_adapter_integration",
        "api.adapters.websocket_adapter_integration_ultra_optimized",
        "asyncio",
        "os",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "adapter_metrics_collector.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "from datetime import",
        "from typing import",
        "from collections import",
        "import json",
        "import os",
        "from dataclasses import"
      ],
      "dependencies": [
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "json",
        "os",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_room_state_sync.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "async_migration_example.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from engine.room_manager import",
        "Legacy import: from engine.async_compat import"
      ],
      "imports": [
        "from engine.room_manager import",
        "from engine.async_compat import",
        "import asyncio",
        "import asyncio"
      ],
      "dependencies": [
        "asyncio",
        "engine.async_compat",
        "engine.room_manager"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "trigger_adapter_init.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import aiohttp",
        "import json"
      ],
      "dependencies": [
        "aiohttp",
        "asyncio",
        "json"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_connection_stability.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import",
        "import websockets",
        "import threading"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "statistics",
        "sys",
        "threading",
        "time",
        "typing",
        "uuid",
        "websockets"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "architecture_status_dashboard.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import requests",
        "import json",
        "from datetime import",
        "from typing import",
        "import subprocess",
        "import argparse"
      ],
      "dependencies": [
        "argparse",
        "asyncio",
        "datetime",
        "json",
        "requests",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "shared_instances.py",
      "architecture_type": "legacy",
      "confidence": 1.0,
      "indicators": [
        "Special case: shared_instances.py"
      ],
      "imports": [
        "from engine.bot_manager import",
        "from engine.async_room_manager import"
      ],
      "dependencies": [
        "engine.async_room_manager",
        "engine.bot_manager"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "capture_golden_masters_integrated.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "import os",
        "from typing import",
        "from datetime import",
        "from api.adapters.integrated_adapter_system import"
      ],
      "dependencies": [
        "api.adapters.integrated_adapter_system",
        "asyncio",
        "datetime",
        "json",
        "os",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "verify_adapter_files.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "import glob"
      ],
      "dependencies": [
        "glob",
        "os"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "check_adapter_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "import json"
      ],
      "dependencies": [
        "json",
        "os"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_adapter_performance_optimized.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "from typing import",
        "import sys",
        "import os",
        "from api.adapters.adapter_registry import",
        "from api.adapters.websocket_adapter_integration import",
        "from api.adapters import",
        "from api.adapters import"
      ],
      "dependencies": [
        "api.adapters",
        "api.adapters.adapter_registry",
        "api.adapters.websocket_adapter_integration",
        "asyncio",
        "os",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "fix_dto_base_classes.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "import re",
        "from pathlib import"
      ],
      "dependencies": [
        "os",
        "pathlib",
        "re"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "simple_cache_test.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "from pathlib import",
        "from infrastructure.caching.memory_cache import",
        "from infrastructure.caching.base import",
        "from datetime import",
        "import psutil"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "infrastructure.caching.base",
        "infrastructure.caching.memory_cache",
        "logging",
        "pathlib",
        "psutil",
        "statistics",
        "sys",
        "time"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "socket_manager.py",
      "architecture_type": "legacy",
      "confidence": 1.0,
      "indicators": [
        "Special case: socket_manager.py"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import time",
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "from fastapi.websockets import",
        "import json",
        "from shared_instances import"
      ],
      "dependencies": [
        "asyncio",
        "dataclasses",
        "datetime",
        "fastapi.websockets",
        "json",
        "shared_instances",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_websocket_room_creation.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from shared_instances import"
      ],
      "imports": [
        "import asyncio",
        "import websockets",
        "import json",
        "import sys",
        "import os",
        "from shared_instances import"
      ],
      "dependencies": [
        "asyncio",
        "json",
        "os",
        "shared_instances",
        "sys",
        "websockets"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_room_manager_direct.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from shared_instances import"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "from shared_instances import"
      ],
      "dependencies": [
        "asyncio",
        "os",
        "shared_instances",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_adapter_integration.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "from datetime import",
        "from api.adapters.websocket_adapter_integration import",
        "from api.adapters.adapter_registry import"
      ],
      "dependencies": [
        "api.adapters.adapter_registry",
        "api.adapters.websocket_adapter_integration",
        "asyncio",
        "datetime",
        "json"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "test_reconnection_scenarios.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import",
        "import websockets",
        "import signal"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "signal",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid",
        "websockets"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_integrated_adapters.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "from typing import",
        "import json",
        "from api.adapters.integrated_adapter_system import",
        "import time"
      ],
      "dependencies": [
        "api.adapters.integrated_adapter_system",
        "asyncio",
        "json",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "compare_specific_mismatch.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import json",
        "import os",
        "import asyncio",
        "from typing import",
        "from api.adapters.integrated_adapter_system import"
      ],
      "dependencies": [
        "api.adapters.integrated_adapter_system",
        "asyncio",
        "json",
        "os",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "monitor_shadow_mode.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "import os",
        "from datetime import",
        "from collections import",
        "from typing import",
        "import aiofiles",
        "import re"
      ],
      "dependencies": [
        "aiofiles",
        "asyncio",
        "collections",
        "datetime",
        "json",
        "os",
        "re",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "test_room_operations.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from shared_instances import"
      ],
      "imports": [
        "import asyncio",
        "import websockets",
        "import json",
        "import sys",
        "import os",
        "from datetime import",
        "from shared_instances import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "os",
        "shared_instances",
        "sys",
        "websockets"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "verify_architecture_status.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "import json",
        "import time",
        "import requests",
        "from pathlib import",
        "from typing import",
        "import logging",
        "from datetime import",
        "from infrastructure.feature_flags import",
        "import argparse"
      ],
      "dependencies": [
        "argparse",
        "asyncio",
        "datetime",
        "infrastructure.feature_flags",
        "json",
        "logging",
        "os",
        "pathlib",
        "requests",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "config/logging_config.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "import sys",
        "import logging",
        "import logging.config",
        "from typing import",
        "import pythonjsonlogger",
        "import socket"
      ],
      "dependencies": [
        "logging",
        "logging.config",
        "os",
        "pythonjsonlogger",
        "socket",
        "sys",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "config/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "config/rate_limits.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "from dataclasses import",
        "from typing import",
        "from api.middleware.rate_limit import"
      ],
      "dependencies": [
        "api.middleware.rate_limit",
        "dataclasses",
        "os",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_broadcast_queue.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.game import"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "from unittest.mock import",
        "from api.websocket.message_queue import",
        "from engine.room import",
        "from engine.player import",
        "from engine.game import",
        "from api.routes.ws import"
      ],
      "dependencies": [
        "api.routes.ws",
        "api.websocket.message_queue",
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.room",
        "os",
        "sys",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_duplicate_names.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import pytest",
        "from engine.room import",
        "from engine.player import"
      ],
      "dependencies": [
        "engine.player",
        "engine.room",
        "pytest"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_async_room_manager.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from backend.engine.async_room_manager import",
        "Legacy import: from backend.engine.async_room import",
        "Legacy import: from backend.engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import pytest",
        "from unittest.mock import",
        "from backend.engine.async_room_manager import",
        "from backend.engine.async_room import",
        "from backend.engine.player import"
      ],
      "dependencies": [
        "asyncio",
        "backend.engine.async_room",
        "backend.engine.async_room_manager",
        "backend.engine.player",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_bot_state_machine_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.core import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_red_general_assignment.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import os",
        "import sys",
        "from engine.game import",
        "from engine.player import"
      ],
      "dependencies": [
        "engine.game",
        "engine.player",
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_rate_limiting.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "from unittest.mock import",
        "import pytest",
        "from fastapi import",
        "from starlette.datastructures import",
        "from api.middleware.rate_limit import",
        "from api.middleware.websocket_rate_limit import"
      ],
      "dependencies": [
        "api.middleware.rate_limit",
        "api.middleware.websocket_rate_limit",
        "asyncio",
        "fastapi",
        "pytest",
        "starlette.datastructures",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_enterprise_architecture.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import",
        "Legacy import: import backend.socket_manager",
        "Legacy import: import backend.socket_manager"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "import backend.socket_manager",
        "import socket_manager",
        "import backend.socket_manager",
        "import socket_manager",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "backend.socket_manager",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "socket_manager",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_turn_progression.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_scoring_delay_investigation.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "import time",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys",
        "time",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_preparation_state.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from datetime import",
        "from unittest.mock import",
        "import pytest",
        "import pytest_asyncio",
        "from engine.state_machine.core import",
        "from engine.state_machine.states.preparation_state import"
      ],
      "dependencies": [
        "datetime",
        "engine.state_machine.core",
        "engine.state_machine.states.preparation_state",
        "pytest",
        "pytest_asyncio",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_phase_transition_errors.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import pytest",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "pytest"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_reliable_messaging.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from socket_manager import",
        "Legacy import: from socket_manager import",
        "Legacy import: from socket_manager import",
        "Legacy import: from socket_manager import",
        "Legacy import: from socket_manager import"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "from unittest.mock import",
        "from socket_manager import",
        "import traceback",
        "from socket_manager import",
        "import traceback",
        "from socket_manager import",
        "from socket_manager import",
        "import traceback",
        "from socket_manager import",
        "from socket_manager import",
        "import traceback",
        "from socket_manager import",
        "import traceback",
        "from socket_manager import",
        "import traceback",
        "from socket_manager import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "socket_manager",
        "sys",
        "time",
        "traceback",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_scoring_object_format.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import os",
        "import sys",
        "from typing import",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.states.scoring_state import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.game_state_machine",
        "engine.state_machine.states.scoring_state",
        "json",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_domain_integration.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "from unittest.mock import",
        "from domain.entities.room import",
        "from domain.entities.player import",
        "from domain.value_objects.piece import",
        "from domain.events.game_events import",
        "from domain.events.player_events import",
        "from domain.events.base import",
        "from infrastructure.repositories import",
        "from infrastructure.events import",
        "from infrastructure.handlers import",
        "from api.adapters.domain_integration import"
      ],
      "dependencies": [
        "api.adapters.domain_integration",
        "asyncio",
        "domain.entities.player",
        "domain.entities.room",
        "domain.events.base",
        "domain.events.game_events",
        "domain.events.player_events",
        "domain.value_objects.piece",
        "infrastructure.events",
        "infrastructure.handlers",
        "infrastructure.repositories",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_route_replacement.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.room import",
        "from engine.state_machine.core import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.room",
        "engine.state_machine.core",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_bot_validation_fix.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_complete_phase_flow.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.constants import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "import sys",
        "from datetime import",
        "from typing import",
        "from engine.constants import",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "engine.constants",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "logging",
        "sys",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_scoring_state.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from unittest.mock import",
        "import pytest",
        "import pytest_asyncio",
        "from engine.state_machine.core import",
        "from engine.state_machine.states.scoring_state import"
      ],
      "dependencies": [
        "engine.state_machine.core",
        "engine.state_machine.states.scoring_state",
        "pytest",
        "pytest_asyncio",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_race_condition_fix.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_state_machine.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "from datetime import",
        "from unittest.mock import",
        "import pytest",
        "import pytest_asyncio",
        "from engine.state_machine.action_queue import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.states.declaration_state import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "engine.state_machine.action_queue",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "engine.state_machine.states.declaration_state",
        "pytest",
        "pytest_asyncio",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_complete_turn_flow.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.core import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_bot_timing_simple.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "from unittest.mock import",
        "import pytest",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.player import"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.player",
        "pytest",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_error_recovery.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from socket_manager import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "import tempfile",
        "import time",
        "from unittest.mock import",
        "from api.services.logging_service import",
        "from api.services.logging_service import",
        "import traceback",
        "from api.services.health_monitor import",
        "import traceback",
        "from api.services.recovery_manager import",
        "import traceback",
        "from api.services.health_monitor import",
        "from api.services.recovery_manager import",
        "import traceback",
        "from api.services.health_monitor import",
        "from api.services.logging_service import",
        "from api.services.recovery_manager import",
        "import traceback",
        "from api.services.health_monitor import",
        "from api.services.logging_service import",
        "import sys",
        "from socket_manager import",
        "import traceback"
      ],
      "dependencies": [
        "api.services.health_monitor",
        "api.services.logging_service",
        "api.services.recovery_manager",
        "asyncio",
        "os",
        "socket_manager",
        "sys",
        "tempfile",
        "time",
        "traceback",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_bot_turn_timing.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "from unittest.mock import",
        "import pytest",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.player import"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.player",
        "pytest",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_websocket_validation.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import pytest",
        "from api.validation import"
      ],
      "dependencies": [
        "api.validation",
        "pytest"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_bot_timing_fix.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.bot_manager import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_reconnect_flow.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json"
      ],
      "dependencies": [
        "asyncio",
        "json"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_end_to_end_scoring_fix.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import os",
        "import sys",
        "from typing import",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.states.scoring_state import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.game_state_machine",
        "engine.state_machine.states.scoring_state",
        "json",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_round_start_phase.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "from unittest.mock import",
        "import pytest",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_bot_redeal_timing.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "from unittest.mock import",
        "import pytest",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "pytest",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/load_test_rate_limits.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "import json",
        "import argparse",
        "import statistics",
        "import psutil",
        "import os",
        "from datetime import",
        "from typing import",
        "from dataclasses import",
        "import aiohttp",
        "import websockets",
        "from collections import",
        "import random"
      ],
      "dependencies": [
        "aiohttp",
        "argparse",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "json",
        "os",
        "psutil",
        "random",
        "statistics",
        "time",
        "typing",
        "websockets"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_async_performance.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.async_room_manager import",
        "Legacy import: from engine.async_room import",
        "Legacy import: from engine.async_game import",
        "Legacy import: from engine.async_compat import",
        "Legacy import: from engine.room_manager import"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "import pytest",
        "from unittest.mock import",
        "import statistics",
        "from engine.async_room_manager import",
        "from engine.async_room import",
        "from engine.async_game import",
        "from engine.async_compat import",
        "from engine.room_manager import",
        "from engine.async_bot_strategy import",
        "from engine.piece import",
        "from engine.player import"
      ],
      "dependencies": [
        "asyncio",
        "engine.async_bot_strategy",
        "engine.async_compat",
        "engine.async_game",
        "engine.async_room",
        "engine.async_room_manager",
        "engine.piece",
        "engine.player",
        "engine.room_manager",
        "pytest",
        "statistics",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_transition_fix.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_refined_deduplication.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.piece",
        "engine.player",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/async_test_utils.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import",
        "Legacy import: from engine.room_manager import",
        "Legacy import: from engine.async_compat import"
      ],
      "imports": [
        "import asyncio",
        "import functools",
        "import pytest",
        "from typing import",
        "from unittest.mock import",
        "from engine.room import",
        "from engine.room_manager import",
        "from engine.async_compat import"
      ],
      "dependencies": [
        "asyncio",
        "engine.async_compat",
        "engine.room",
        "engine.room_manager",
        "functools",
        "pytest",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_weak_hand_scenarios.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from datetime import",
        "from unittest.mock import",
        "import pytest",
        "import pytest_asyncio",
        "from engine.state_machine.core import",
        "from engine.state_machine.states.preparation_state import"
      ],
      "dependencies": [
        "datetime",
        "engine.state_machine.core",
        "engine.state_machine.states.preparation_state",
        "pytest",
        "pytest_asyncio",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_phase4_validation.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import pytest",
        "import sys",
        "import os",
        "import json",
        "from datetime import",
        "from pathlib import",
        "import subprocess",
        "from domain import",
        "from application import",
        "from infrastructure import",
        "import re"
      ],
      "dependencies": [
        "application",
        "datetime",
        "domain",
        "infrastructure",
        "json",
        "os",
        "pathlib",
        "pytest",
        "re",
        "subprocess",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_api_simulation.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.room import",
        "from engine.state_machine.core import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.room",
        "engine.state_machine.core",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_bot_manager_call.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.core import",
        "from engine.state_machine.states.turn_state import"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "engine.state_machine.states.turn_state"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_round_start_scenarios.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "from unittest.mock import",
        "import pytest",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "pytest",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_avatar_colors.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import sys",
        "import os",
        "from engine.room import",
        "from engine.player import"
      ],
      "dependencies": [
        "engine.player",
        "engine.room",
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_game_simulation.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "import logging",
        "from datetime import",
        "from backend.api.services.event_store import",
        "from backend.shared_instances import",
        "from backend.engine.state_machine.core import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "backend.api.services.event_store",
        "backend.engine.state_machine.core",
        "backend.shared_instances",
        "datetime",
        "json",
        "logging",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_phase_flow_simple.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import logging",
        "import sys",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "logging",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_full_game_flow.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from datetime import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from tests.test_helpers import",
        "import traceback",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys",
        "tests.test_helpers",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_immediate_transition_bug.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "import time",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.states.scoring_state import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "engine.state_machine.states.scoring_state",
        "os",
        "sys",
        "time",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_deep_json_check.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "json",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_json_serialization.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "json"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_message_queue.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "from api.websocket.message_queue import",
        "from datetime import"
      ],
      "dependencies": [
        "api.websocket.message_queue",
        "asyncio",
        "datetime",
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_simple_turn_progression.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.states.turn_state import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.states.turn_state"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/analyze_rate_limit_issues.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "import re",
        "import ast",
        "from pathlib import",
        "from typing import"
      ],
      "dependencies": [
        "ast",
        "os",
        "pathlib",
        "re",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_round_start_bot_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "from unittest.mock import",
        "import pytest",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_phase_broadcast.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_phase_transitions.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "import sys",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "logging",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_disconnect_handling.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.game import"
      ],
      "imports": [
        "import asyncio",
        "import pytest",
        "from datetime import",
        "from unittest.mock import",
        "import sys",
        "import os",
        "from api.websocket.connection_manager import",
        "from engine.room import",
        "from engine.player import",
        "from engine.game import",
        "from engine.state_machine.core import"
      ],
      "dependencies": [
        "api.websocket.connection_manager",
        "asyncio",
        "datetime",
        "engine.game",
        "engine.player",
        "engine.room",
        "engine.state_machine.core",
        "os",
        "pytest",
        "sys",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_async_compatibility.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import",
        "Legacy import: from engine.room_manager import",
        "Legacy import: from engine.async_compat import"
      ],
      "imports": [
        "import asyncio",
        "import pytest",
        "from unittest.mock import",
        "from engine.room import",
        "from engine.room_manager import",
        "from engine.async_compat import",
        "from tests.async_test_utils import"
      ],
      "dependencies": [
        "asyncio",
        "engine.async_compat",
        "engine.room",
        "engine.room_manager",
        "pytest",
        "tests.async_test_utils",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_complete_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.room import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.bot_manager import",
        "from engine.player import",
        "from engine.room import",
        "from engine.state_machine.core import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.player",
        "engine.room",
        "engine.state_machine.core",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_simultaneous_redeal.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.states.preparation_state import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.states.preparation_state",
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_turn_state_debug.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_event_sourcing.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "import os",
        "import sys",
        "import tempfile",
        "from pathlib import",
        "from api.services.event_store import",
        "import traceback",
        "from engine.state_machine.action_queue import",
        "from engine.state_machine.core import",
        "import traceback",
        "from api.services.event_store import",
        "import traceback",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "import traceback",
        "from api.services.event_store import",
        "import traceback"
      ],
      "dependencies": [
        "api.services.event_store",
        "asyncio",
        "engine.state_machine.action_queue",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "json",
        "os",
        "pathlib",
        "sys",
        "tempfile",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_game_over_simple.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.win_conditions import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from unittest.mock import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from engine.win_conditions import"
      ],
      "dependencies": [
        "asyncio",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "engine.win_conditions",
        "os",
        "sys",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_game_over_transition.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.win_conditions import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from unittest.mock import",
        "import pytest",
        "import pytest_asyncio",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.states.game_over_state import",
        "from engine.state_machine.states.scoring_state import",
        "from engine.win_conditions import"
      ],
      "dependencies": [
        "asyncio",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "engine.state_machine.states.game_over_state",
        "engine.state_machine.states.scoring_state",
        "engine.win_conditions",
        "os",
        "pytest",
        "pytest_asyncio",
        "sys",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_helpers.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.constants import",
        "Legacy import: from engine.piece import"
      ],
      "imports": [
        "from engine.constants import",
        "from engine.piece import"
      ],
      "dependencies": [
        "engine.constants",
        "engine.piece"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_async_game.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.async_game import",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.win_conditions import",
        "Legacy import: from engine.game import"
      ],
      "imports": [
        "import asyncio",
        "import pytest",
        "from unittest.mock import",
        "from engine.async_game import",
        "from engine.player import",
        "from engine.piece import",
        "from engine.win_conditions import",
        "from engine.state_machine.async_game_adapter import",
        "from engine.game import"
      ],
      "dependencies": [
        "asyncio",
        "engine.async_game",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.async_game_adapter",
        "engine.win_conditions",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.room import",
        "from engine.state_machine.core import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.room",
        "engine.state_machine.core",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_all_phases_enterprise.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import",
        "Legacy import: import backend.socket_manager"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "import backend.socket_manager",
        "import socket_manager",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "backend.socket_manager",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "socket_manager",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_event_store.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import os",
        "import tempfile",
        "import time",
        "from datetime import",
        "import pytest",
        "from api.services.event_store import"
      ],
      "dependencies": [
        "api.services.event_store",
        "asyncio",
        "datetime",
        "os",
        "pytest",
        "tempfile",
        "time"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/manual_rate_limit_test.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "import sys",
        "import time",
        "from datetime import",
        "import websockets",
        "from websockets.exceptions import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "sys",
        "time",
        "websockets",
        "websockets.exceptions"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_reconnection_flow.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.game import"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import pytest",
        "from unittest.mock import",
        "from datetime import",
        "import sys",
        "import os",
        "from api.websocket.connection_manager import",
        "from api.websocket.message_queue import",
        "from engine.room import",
        "from engine.player import",
        "from engine.game import",
        "from engine.state_machine.core import"
      ],
      "dependencies": [
        "api.websocket.connection_manager",
        "api.websocket.message_queue",
        "asyncio",
        "datetime",
        "engine.game",
        "engine.player",
        "engine.room",
        "engine.state_machine.core",
        "json",
        "os",
        "pytest",
        "sys",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_state_replay.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import tempfile",
        "from unittest.mock import",
        "import pytest",
        "from api.services.event_store import",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.core import",
        "from api.services import"
      ],
      "dependencies": [
        "api.services",
        "api.services.event_store",
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "pytest",
        "tempfile",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_real_game_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.room import",
        "from engine.state_machine.core import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.room",
        "engine.state_machine.core",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_realistic_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.room import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.piece import",
        "from engine.room import",
        "from engine.state_machine.core import",
        "from tests.test_helpers import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.piece",
        "engine.room",
        "engine.state_machine.core",
        "os",
        "sys",
        "tests.test_helpers",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_prep_debug.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_turn_number_sync.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys",
        "traceback"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_connection_flow.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.game import"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import pytest",
        "from unittest.mock import",
        "from datetime import",
        "import sys",
        "import os",
        "from api.websocket.connection_manager import",
        "from engine.room import",
        "from engine.player import",
        "from engine.game import"
      ],
      "dependencies": [
        "api.websocket.connection_manager",
        "asyncio",
        "datetime",
        "engine.game",
        "engine.player",
        "engine.room",
        "json",
        "os",
        "pytest",
        "sys",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_auto_transition.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_round_start_simple.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import time",
        "from unittest.mock import",
        "import pytest",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from engine.state_machine.states.round_start_state import",
        "from engine.state_machine.states.preparation_state import",
        "from engine.state_machine.states.preparation_state import",
        "from engine.state_machine.states.preparation_state import"
      ],
      "dependencies": [
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "engine.state_machine.states.preparation_state",
        "engine.state_machine.states.round_start_state",
        "pytest",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_bot_timing.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.bot_manager import",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import random",
        "import time",
        "from unittest.mock import",
        "import pytest",
        "from engine.bot_manager import",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "engine.bot_manager",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "pytest",
        "random",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_enterprise_fixes.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.game import",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from engine.game import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "import sys",
        "from unittest.mock import",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "engine.game",
        "engine.piece",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys",
        "traceback",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_turn_state.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.piece import"
      ],
      "imports": [
        "from datetime import",
        "from unittest.mock import",
        "import pytest",
        "import pytest_asyncio",
        "from engine.piece import",
        "from engine.state_machine.core import",
        "from engine.state_machine.states.turn_state import",
        "from tests.test_helpers import"
      ],
      "dependencies": [
        "datetime",
        "engine.piece",
        "engine.state_machine.core",
        "engine.state_machine.states.turn_state",
        "pytest",
        "pytest_asyncio",
        "tests.test_helpers",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_reconnection_trace.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from engine.room import",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.game import"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "from datetime import",
        "from api.websocket.connection_manager import",
        "from api.websocket.message_queue import",
        "from engine.room import",
        "from engine.player import",
        "from engine.game import",
        "from engine.state_machine.core import"
      ],
      "dependencies": [
        "api.websocket.connection_manager",
        "api.websocket.message_queue",
        "asyncio",
        "datetime",
        "engine.game",
        "engine.player",
        "engine.room",
        "engine.state_machine.core",
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_event_store_performance.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "import statistics",
        "from contextlib import",
        "import tempfile",
        "import os",
        "import pytest",
        "from backend.api.services.event_store import"
      ],
      "dependencies": [
        "asyncio",
        "backend.api.services.event_store",
        "contextlib",
        "os",
        "pytest",
        "statistics",
        "tempfile",
        "time"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_state_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import os",
        "import sys",
        "from datetime import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "os",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/integration/test_game_actions.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "import json",
        "import time",
        "from typing import",
        "from unittest.mock import",
        "import uuid",
        "from datetime import",
        "import sys",
        "from pathlib import",
        "from api.adapters.adapter_registry import",
        "from api.adapters.game_adapters import",
        "from infrastructure.feature_flags import"
      ],
      "dependencies": [
        "api.adapters.adapter_registry",
        "api.adapters.game_adapters",
        "asyncio",
        "datetime",
        "infrastructure.feature_flags",
        "json",
        "pathlib",
        "pytest",
        "sys",
        "time",
        "typing",
        "unittest.mock",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/integration/test_room_operations.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "import json",
        "import time",
        "from typing import",
        "from unittest.mock import",
        "import uuid",
        "from datetime import",
        "import sys",
        "from pathlib import",
        "from api.adapters.adapter_registry import",
        "from api.adapters.room_adapters import",
        "from infrastructure.feature_flags import"
      ],
      "dependencies": [
        "api.adapters.adapter_registry",
        "api.adapters.room_adapters",
        "asyncio",
        "datetime",
        "infrastructure.feature_flags",
        "json",
        "pathlib",
        "pytest",
        "sys",
        "time",
        "typing",
        "unittest.mock",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/contracts/websocket_contracts.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from enum import"
      ],
      "dependencies": [
        "dataclasses",
        "enum",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/contracts/golden_master.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import json",
        "import asyncio",
        "from datetime import",
        "from pathlib import",
        "from typing import",
        "import hashlib",
        "from dataclasses import",
        "import time"
      ],
      "dependencies": [
        "asyncio",
        "dataclasses",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/contracts/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/contracts/test_websocket_contracts.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [
        "Uses direct broadcasting (legacy pattern)"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from typing import",
        "from tests.contracts.websocket_contracts import",
        "from tests.contracts.golden_master import",
        "from tests.contracts.parallel_runner import"
      ],
      "dependencies": [
        "asyncio",
        "pytest",
        "tests.contracts.golden_master",
        "tests.contracts.parallel_runner",
        "tests.contracts.websocket_contracts",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/contracts/parallel_runner.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "import json",
        "from pathlib import",
        "from tests.contracts.golden_master import",
        "from tests.contracts.websocket_contracts import"
      ],
      "dependencies": [
        "asyncio",
        "dataclasses",
        "datetime",
        "json",
        "pathlib",
        "tests.contracts.golden_master",
        "tests.contracts.websocket_contracts",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/contracts/test_adapter_contracts.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "from typing import",
        "import os",
        "import sys",
        "from api.adapters.integrated_adapter_system import",
        "from tests.contracts.websocket_contracts import",
        "from tests.contracts.golden_master import"
      ],
      "dependencies": [
        "api.adapters.integrated_adapter_system",
        "asyncio",
        "json",
        "os",
        "sys",
        "tests.contracts.golden_master",
        "tests.contracts.websocket_contracts",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/contracts/monitor_compatibility.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import json",
        "import time",
        "from datetime import",
        "from pathlib import",
        "from typing import",
        "import asyncio",
        "import sys",
        "from rich.console import",
        "from rich.table import",
        "from rich.panel import",
        "from rich.layout import",
        "from rich.live import",
        "from rich.progress import",
        "import argparse",
        "import rich",
        "import subprocess"
      ],
      "dependencies": [
        "argparse",
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "rich",
        "rich.console",
        "rich.layout",
        "rich.live",
        "rich.panel",
        "rich.progress",
        "rich.table",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/contracts/capture_golden_masters.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "from datetime import",
        "from pathlib import",
        "from typing import",
        "import sys",
        "import os",
        "from tests.contracts.golden_master import",
        "from tests.contracts.websocket_contracts import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "os",
        "pathlib",
        "sys",
        "tests.contracts.golden_master",
        "tests.contracts.websocket_contracts",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/behavioral/test_game_mechanics.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import pytest",
        "from typing import",
        "import json",
        "from tests.contracts.golden_master import",
        "import json",
        "from pathlib import",
        "from datetime import"
      ],
      "dependencies": [
        "datetime",
        "json",
        "pathlib",
        "pytest",
        "tests.contracts.golden_master",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/behavioral/test_game_flows.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "from typing import",
        "import json",
        "from tests.contracts.websocket_contracts import",
        "from tests.contracts.golden_master import",
        "from tests.contracts.capture_golden_masters import",
        "import time",
        "import json",
        "from pathlib import",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "pytest",
        "tests.contracts.capture_golden_masters",
        "tests.contracts.golden_master",
        "tests.contracts.websocket_contracts",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/behavioral/run_behavioral_tests.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "from pathlib import",
        "from datetime import",
        "import json",
        "import subprocess"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "os",
        "pathlib",
        "subprocess",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/behavioral/test_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "from typing import",
        "from pathlib import",
        "import json",
        "from tests.contracts.websocket_contracts import",
        "from tests.contracts.golden_master import",
        "from tests.contracts.parallel_runner import",
        "from datetime import",
        "import time"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "pytest",
        "tests.contracts.golden_master",
        "tests.contracts.parallel_runner",
        "tests.contracts.websocket_contracts",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/adapters/test_connection_adapters.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "from pathlib import",
        "from api.adapters.connection_adapters import",
        "from api.adapters.connection_adapters import",
        "from api.adapters.connection_adapters import"
      ],
      "dependencies": [
        "api.adapters.connection_adapters",
        "asyncio",
        "json",
        "pathlib"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/adapters/test_room_adapters.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "from typing import",
        "from api.adapters.room_adapters import"
      ],
      "dependencies": [
        "api.adapters.room_adapters",
        "asyncio",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/adapters/test_lobby_adapters.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "from typing import",
        "from api.adapters.lobby_adapters import"
      ],
      "dependencies": [
        "api.adapters.lobby_adapters",
        "asyncio",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/adapters/test_game_adapters.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "from typing import",
        "from api.adapters.game_adapters import"
      ],
      "dependencies": [
        "api.adapters.game_adapters",
        "asyncio",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_unit_of_work.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import",
        "from typing import",
        "from infrastructure.unit_of_work import",
        "from infrastructure.repositories import",
        "from domain.entities import",
        "from domain.value_objects import"
      ],
      "dependencies": [
        "domain.entities",
        "domain.value_objects",
        "infrastructure.repositories",
        "infrastructure.unit_of_work",
        "pytest",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_dependencies.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import",
        "from typing import",
        "from infrastructure.dependencies import",
        "from application.interfaces import"
      ],
      "dependencies": [
        "application.interfaces",
        "infrastructure.dependencies",
        "pytest",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_services.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from unittest.mock import",
        "from datetime import",
        "from typing import",
        "from infrastructure.services.websocket_notification_service import",
        "from infrastructure.services.simple_bot_service import",
        "from infrastructure.services.in_memory_cache_service import",
        "from infrastructure.services.console_metrics_collector import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "infrastructure.services.console_metrics_collector",
        "infrastructure.services.in_memory_cache_service",
        "infrastructure.services.simple_bot_service",
        "infrastructure.services.websocket_notification_service",
        "pytest",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_e2e_flow.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import",
        "from datetime import",
        "import asyncio",
        "from domain.entities import",
        "from domain.value_objects import",
        "from domain.exceptions import",
        "from application.use_cases.room_management import",
        "from application.use_cases.game import",
        "from application.dto.room_management import",
        "from application.dto.game import",
        "from infrastructure.unit_of_work import",
        "from infrastructure.events.application_event_publisher import",
        "from infrastructure.services.simple_bot_service import",
        "from infrastructure.feature_flags import"
      ],
      "dependencies": [
        "application.dto.game",
        "application.dto.room_management",
        "application.use_cases.game",
        "application.use_cases.room_management",
        "asyncio",
        "datetime",
        "domain.entities",
        "domain.exceptions",
        "domain.value_objects",
        "infrastructure.events.application_event_publisher",
        "infrastructure.feature_flags",
        "infrastructure.services.simple_bot_service",
        "infrastructure.unit_of_work",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_feature_flags.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import",
        "import json",
        "from typing import",
        "from infrastructure.feature_flags import"
      ],
      "dependencies": [
        "infrastructure.feature_flags",
        "json",
        "pytest",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_phase4_complete.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import os",
        "import pytest",
        "from pathlib import"
      ],
      "dependencies": [
        "os",
        "pathlib",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_clean_architecture_adapter.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import",
        "from typing import",
        "from infrastructure.adapters.clean_architecture_adapter import",
        "from infrastructure.feature_flags import",
        "from application.dto.connection import",
        "from application.dto.room_management import",
        "from application.dto.game import",
        "from application.dto.game import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.dto.game",
        "application.dto.room_management",
        "infrastructure.adapters.clean_architecture_adapter",
        "infrastructure.feature_flags",
        "pytest",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_performance.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import time",
        "import asyncio",
        "from statistics import",
        "from typing import",
        "import gc",
        "from domain.entities import",
        "from domain.value_objects import",
        "from application.use_cases.room_management.create_room import",
        "from application.use_cases.room_management.join_room import",
        "from application.dto.room_management import",
        "from infrastructure.unit_of_work import",
        "from infrastructure.events.application_event_publisher import",
        "from infrastructure.repositories import",
        "from domain.events.room_events import",
        "from datetime import"
      ],
      "dependencies": [
        "application.dto.room_management",
        "application.use_cases.room_management.create_room",
        "application.use_cases.room_management.join_room",
        "asyncio",
        "datetime",
        "domain.entities",
        "domain.events.room_events",
        "domain.value_objects",
        "gc",
        "infrastructure.events.application_event_publisher",
        "infrastructure.repositories",
        "infrastructure.unit_of_work",
        "pytest",
        "statistics",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_infrastructure_simple.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import",
        "from typing import",
        "from infrastructure.feature_flags import",
        "from infrastructure.services.console_metrics_collector import",
        "from infrastructure.services.in_memory_cache_service import",
        "from infrastructure.repositories.in_memory_room_repository import",
        "from infrastructure.repositories.in_memory_game_repository import",
        "from domain.entities import",
        "from domain.value_objects import",
        "import asyncio",
        "from infrastructure.dependencies import",
        "from infrastructure.dependencies import",
        "from application.interfaces import"
      ],
      "dependencies": [
        "application.interfaces",
        "asyncio",
        "domain.entities",
        "domain.value_objects",
        "infrastructure.dependencies",
        "infrastructure.feature_flags",
        "infrastructure.repositories.in_memory_game_repository",
        "infrastructure.repositories.in_memory_room_repository",
        "infrastructure.services.console_metrics_collector",
        "infrastructure.services.in_memory_cache_service",
        "pytest",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_infrastructure/test_integration.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import",
        "from datetime import",
        "import uuid",
        "from domain.entities import",
        "from domain.value_objects import",
        "from domain.events.room_events import",
        "from domain.events.game_events import",
        "from application.use_cases.room_management.create_room import",
        "from application.use_cases.room_management.join_room import",
        "from application.use_cases.game.start_game import",
        "from application.dto.room_management import",
        "from application.dto.game import",
        "from infrastructure.unit_of_work import",
        "from infrastructure.events.application_event_publisher import",
        "from infrastructure.feature_flags import"
      ],
      "dependencies": [
        "application.dto.game",
        "application.dto.room_management",
        "application.use_cases.game.start_game",
        "application.use_cases.room_management.create_room",
        "application.use_cases.room_management.join_room",
        "datetime",
        "domain.entities",
        "domain.events.game_events",
        "domain.events.room_events",
        "domain.value_objects",
        "infrastructure.events.application_event_publisher",
        "infrastructure.feature_flags",
        "infrastructure.unit_of_work",
        "pytest",
        "unittest.mock",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_reconnection/test_player_disconnection.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "from datetime import",
        "from unittest.mock import",
        "from domain.entities.player import",
        "from domain.entities.room import",
        "from domain.entities.game import",
        "from domain.value_objects import",
        "from domain.events import",
        "from application.use_cases.connection import",
        "from application.dto.connection import",
        "from infrastructure.unit_of_work import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.use_cases.connection",
        "datetime",
        "domain.entities.game",
        "domain.entities.player",
        "domain.entities.room",
        "domain.events",
        "domain.value_objects",
        "infrastructure.unit_of_work",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_reconnection/test_reconnection_adapter.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "from unittest.mock import",
        "from domain.entities.room import",
        "from domain.entities.player import",
        "from domain.entities.game import",
        "from infrastructure.adapters import",
        "from infrastructure.feature_flags import"
      ],
      "dependencies": [
        "domain.entities.game",
        "domain.entities.player",
        "domain.entities.room",
        "infrastructure.adapters",
        "infrastructure.feature_flags",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_reconnection/test_player_reconnection.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "from datetime import",
        "from unittest.mock import",
        "from domain.entities.player import",
        "from domain.entities.room import",
        "from domain.entities.game import",
        "from domain.entities.connection import",
        "from domain.entities.message_queue import",
        "from domain.value_objects import",
        "from domain.events import",
        "from application.use_cases.connection import",
        "from application.dto.connection import",
        "from infrastructure.unit_of_work import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.use_cases.connection",
        "datetime",
        "domain.entities.connection",
        "domain.entities.game",
        "domain.entities.message_queue",
        "domain.entities.player",
        "domain.entities.room",
        "domain.events",
        "domain.value_objects",
        "infrastructure.unit_of_work",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/test_reconnection/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/test_reconnection/test_message_queue.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "from datetime import",
        "from unittest.mock import",
        "from domain.entities.message_queue import",
        "from domain.value_objects import",
        "from domain.events import",
        "from application.use_cases.connection import",
        "from application.dto.connection import",
        "from application.services import",
        "from infrastructure.unit_of_work import",
        "from domain.entities.room import",
        "from domain.entities.player import",
        "from domain.entities.room import",
        "from domain.entities.player import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.services",
        "application.use_cases.connection",
        "datetime",
        "domain.entities.message_queue",
        "domain.entities.player",
        "domain.entities.room",
        "domain.events",
        "domain.value_objects",
        "infrastructure.unit_of_work",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/application/test_structure.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import pytest",
        "import importlib",
        "import inspect",
        "from application.base import",
        "from application.exceptions import",
        "from application.interfaces import",
        "from application.dto import",
        "from application.dto.base import",
        "from application.dto.common import",
        "from application import"
      ],
      "dependencies": [
        "application",
        "application.base",
        "application.dto",
        "application.dto.base",
        "application.dto.common",
        "application.exceptions",
        "application.interfaces",
        "importlib",
        "inspect",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/application/test_use_cases.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import pytest",
        "from unittest.mock import",
        "from datetime import",
        "from application.use_cases.connection import",
        "from application.use_cases.room_management import",
        "from application.dto.connection import",
        "from application.dto.room_management import",
        "from application.interfaces import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.dto.room_management",
        "application.interfaces",
        "application.use_cases.connection",
        "application.use_cases.room_management",
        "datetime",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/run_phase6_tests.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "import argparse",
        "import subprocess",
        "import time",
        "import json",
        "from pathlib import",
        "from typing import",
        "import logging"
      ],
      "dependencies": [
        "argparse",
        "asyncio",
        "json",
        "logging",
        "os",
        "pathlib",
        "subprocess",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/utilities/validate_test_setup.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import sys",
        "import os",
        "from pathlib import",
        "import importlib.util",
        "from tests.contracts.websocket_contracts import"
      ],
      "dependencies": [
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "tests.contracts.websocket_contracts"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/utilities/validate_repository_data.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import logging",
        "from pathlib import",
        "from typing import",
        "import json",
        "import uuid",
        "from infrastructure.repositories.optimized_room_repository import",
        "from infrastructure.repositories.optimized_game_repository import",
        "from infrastructure.repositories.in_memory_room_repository import",
        "from domain.entities.room import",
        "from domain.entities.game import",
        "from domain.value_objects.room_status import",
        "from domain.value_objects.player_role import"
      ],
      "dependencies": [
        "asyncio",
        "domain.entities.game",
        "domain.entities.room",
        "domain.value_objects.player_role",
        "domain.value_objects.room_status",
        "infrastructure.repositories.in_memory_room_repository",
        "infrastructure.repositories.optimized_game_repository",
        "infrastructure.repositories.optimized_room_repository",
        "json",
        "logging",
        "pathlib",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/utilities/test_memory_monitoring.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import psutil",
        "import logging",
        "from pathlib import",
        "from typing import",
        "import json",
        "from infrastructure.repositories.optimized_room_repository import",
        "from infrastructure.repositories.optimized_game_repository import",
        "from domain.entities.room import",
        "from domain.value_objects.room_status import",
        "import gc"
      ],
      "dependencies": [
        "asyncio",
        "domain.entities.room",
        "domain.value_objects.room_status",
        "gc",
        "infrastructure.repositories.optimized_game_repository",
        "infrastructure.repositories.optimized_room_repository",
        "json",
        "logging",
        "pathlib",
        "psutil",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/utilities/activate_migration_monitoring.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import logging",
        "from datetime import",
        "from pathlib import",
        "from infrastructure.monitoring.enterprise_monitor import",
        "from infrastructure.monitoring.grafana_dashboards import",
        "from infrastructure.observability.metrics import",
        "from infrastructure.monitoring.event_stream import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "infrastructure.monitoring.enterprise_monitor",
        "infrastructure.monitoring.event_stream",
        "infrastructure.monitoring.grafana_dashboards",
        "infrastructure.observability.metrics",
        "logging",
        "pathlib",
        "sys"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/utilities/test_event_replay.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import logging",
        "import json",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/utilities/capture_performance_baseline.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import json",
        "import argparse",
        "import logging",
        "from datetime import",
        "from pathlib import",
        "from typing import",
        "from infrastructure.monitoring.enterprise_monitor import"
      ],
      "dependencies": [
        "argparse",
        "asyncio",
        "datetime",
        "infrastructure.monitoring.enterprise_monitor",
        "json",
        "logging",
        "pathlib",
        "sys",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_4_1/test_state_machine_enterprise.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_4_1/test_state_machine_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "import json",
        "import time",
        "from typing import",
        "from unittest.mock import",
        "import uuid",
        "from datetime import",
        "import sys",
        "from pathlib import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "pytest",
        "sys",
        "time",
        "typing",
        "unittest.mock",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_5_3/final_performance_validation.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "import random",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import",
        "import random",
        "import random",
        "import random",
        "import random",
        "import random"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "random",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_5_3/run_regression_tests.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import",
        "import random"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "random",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_5_2/run_load_tests.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "import random",
        "import argparse",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import",
        "import psutil",
        "import gc"
      ],
      "dependencies": [
        "argparse",
        "asyncio",
        "datetime",
        "gc",
        "json",
        "logging",
        "pathlib",
        "psutil",
        "random",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_5_2/performance/test_cache_performance.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from infrastructure.caching.memory_cache import",
        "from infrastructure.caching.distributed_cache import",
        "from infrastructure.caching.base import",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "infrastructure.caching.base",
        "infrastructure.caching.distributed_cache",
        "infrastructure.caching.memory_cache",
        "json",
        "logging",
        "pathlib",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_5_2/performance/test_repository_performance.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from infrastructure.repositories.optimized_room_repository import",
        "from infrastructure.repositories.optimized_game_repository import",
        "from infrastructure.repositories.optimized_player_stats_repository import",
        "from infrastructure.repositories.in_memory_room_repository import",
        "from domain.entities.room import",
        "from domain.entities.game import",
        "from domain.value_objects.room_status import",
        "from domain.value_objects.player_role import",
        "import psutil",
        "import json"
      ],
      "dependencies": [
        "asyncio",
        "domain.entities.game",
        "domain.entities.room",
        "domain.value_objects.player_role",
        "domain.value_objects.room_status",
        "infrastructure.repositories.in_memory_room_repository",
        "infrastructure.repositories.optimized_game_repository",
        "infrastructure.repositories.optimized_player_stats_repository",
        "infrastructure.repositories.optimized_room_repository",
        "json",
        "logging",
        "pathlib",
        "psutil",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_5_2/performance/test_event_throughput.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import",
        "import uuid"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_4_3/test_scoring_system_migration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "import random",
        "import math",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "math",
        "pathlib",
        "random",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_4_3/test_scoring_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "import json",
        "import time",
        "from typing import",
        "from unittest.mock import",
        "import uuid",
        "from datetime import",
        "import sys",
        "from pathlib import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "pytest",
        "sys",
        "time",
        "typing",
        "unittest.mock",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_4_2/test_bot_timing_accuracy.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "import random",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "random",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_4_2/test_bot_management_migration.py",
      "architecture_type": "legacy",
      "confidence": 0.2,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "import random",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "random",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_4_2/test_bot_management_integration.py",
      "architecture_type": "clean",
      "confidence": 0.2,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "import json",
        "import time",
        "from typing import",
        "from unittest.mock import",
        "import uuid",
        "from datetime import",
        "import sys",
        "from pathlib import",
        "import random"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "pytest",
        "random",
        "sys",
        "time",
        "typing",
        "unittest.mock",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/migration_tools/step_6_5_1/test_complete_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import time",
        "import statistics",
        "import logging",
        "import json",
        "import random",
        "from pathlib import",
        "from typing import",
        "import uuid",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "random",
        "statistics",
        "sys",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/phase6/infrastructure/test_websocket_integration.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "import json",
        "import time",
        "from typing import",
        "from unittest.mock import",
        "import uuid",
        "from datetime import",
        "import sys",
        "from pathlib import",
        "from api.adapters.websocket_adapter_final import",
        "from api.adapters.adapter_registry import",
        "from api.adapters.connection_adapters import",
        "from infrastructure.feature_flags import"
      ],
      "dependencies": [
        "api.adapters.adapter_registry",
        "api.adapters.connection_adapters",
        "api.adapters.websocket_adapter_final",
        "asyncio",
        "datetime",
        "infrastructure.feature_flags",
        "json",
        "pathlib",
        "pytest",
        "sys",
        "time",
        "typing",
        "unittest.mock",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/infrastructure/monitoring/test_migration_alerts.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import logging",
        "from datetime import",
        "from pathlib import",
        "from typing import",
        "from infrastructure.monitoring.enterprise_monitor import",
        "from infrastructure.monitoring.correlation import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "infrastructure.monitoring.correlation",
        "infrastructure.monitoring.enterprise_monitor",
        "logging",
        "pathlib",
        "sys",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/phase6/infrastructure/monitoring/validate_monitoring_coverage.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "import sys",
        "import logging",
        "from pathlib import",
        "from typing import",
        "from infrastructure.monitoring.enterprise_monitor import"
      ],
      "dependencies": [
        "asyncio",
        "infrastructure.monitoring.enterprise_monitor",
        "logging",
        "pathlib",
        "sys",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/events/run_event_tests.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "import sys",
        "import subprocess",
        "from pathlib import",
        "import re",
        "import argparse"
      ],
      "dependencies": [
        "argparse",
        "os",
        "pathlib",
        "re",
        "subprocess",
        "sys"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/events/validate_event_system.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import sys",
        "import os",
        "from typing import",
        "from datetime import",
        "from backend.domain.events.base import",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from backend.infrastructure.events.event_broadcast_mapper import",
        "from backend.infrastructure.events.integrated_broadcast_handler import",
        "from api.adapters.adapter_event_config import",
        "from engine.state_machine.event_config import",
        "from api.adapters.room_adapters_event import",
        "from engine.state_machine.event_integration import",
        "from engine.state_machine.core import"
      ],
      "dependencies": [
        "api.adapters.adapter_event_config",
        "api.adapters.room_adapters_event",
        "asyncio",
        "backend.domain.events.all_events",
        "backend.domain.events.base",
        "backend.infrastructure.events.event_broadcast_mapper",
        "backend.infrastructure.events.in_memory_event_bus",
        "backend.infrastructure.events.integrated_broadcast_handler",
        "datetime",
        "engine.state_machine.core",
        "engine.state_machine.event_config",
        "engine.state_machine.event_integration",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/events/unit/test_event_broadcast_mapper.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import pytest",
        "from typing import",
        "from datetime import",
        "import sys",
        "import os",
        "from backend.domain.events.base import",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.event_broadcast_mapper import"
      ],
      "dependencies": [
        "backend.domain.events.all_events",
        "backend.domain.events.base",
        "backend.infrastructure.events.event_broadcast_mapper",
        "datetime",
        "os",
        "pytest",
        "sys",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/events/unit/test_event_bus.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "from typing import",
        "from unittest.mock import",
        "import sys",
        "import os",
        "from backend.domain.events.base import",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.in_memory_event_bus import"
      ],
      "dependencies": [
        "asyncio",
        "backend.domain.events.all_events",
        "backend.domain.events.base",
        "backend.infrastructure.events.in_memory_event_bus",
        "os",
        "pytest",
        "sys",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/events/integration/test_state_machine_events.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "from typing import",
        "from unittest.mock import",
        "from datetime import",
        "import sys",
        "import os",
        "from engine.state_machine.base_state import",
        "from engine.state_machine.core import",
        "from engine.state_machine.event_integration import",
        "from engine.state_machine.event_config import",
        "from backend.domain.events.base import",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.in_memory_event_bus import"
      ],
      "dependencies": [
        "asyncio",
        "backend.domain.events.all_events",
        "backend.domain.events.base",
        "backend.infrastructure.events.in_memory_event_bus",
        "datetime",
        "engine.state_machine.base_state",
        "engine.state_machine.core",
        "engine.state_machine.event_config",
        "engine.state_machine.event_integration",
        "os",
        "pytest",
        "sys",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "tests/events/integration/test_event_performance.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "import time",
        "from typing import",
        "from statistics import",
        "from unittest.mock import",
        "import sys",
        "import os",
        "from api.adapters.connection_adapters import",
        "from api.adapters.connection_adapters_event import",
        "from api.adapters.unified_adapter_handler import",
        "from backend.domain.events.base import",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.in_memory_event_bus import"
      ],
      "dependencies": [
        "api.adapters.connection_adapters",
        "api.adapters.connection_adapters_event",
        "api.adapters.unified_adapter_handler",
        "asyncio",
        "backend.domain.events.all_events",
        "backend.domain.events.base",
        "backend.infrastructure.events.in_memory_event_bus",
        "os",
        "pytest",
        "statistics",
        "sys",
        "time",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/events/contracts/test_adapter_event_contracts.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "from typing import",
        "from unittest.mock import",
        "import json",
        "import sys",
        "import os",
        "from api.adapters.connection_adapters import",
        "from api.adapters.connection_adapters_event import",
        "from api.adapters.room_adapters import",
        "from api.adapters.room_adapters_event import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from backend.domain.events.base import",
        "from backend.domain.events.all_events import",
        "from backend.domain.events.all_events import"
      ],
      "dependencies": [
        "api.adapters.connection_adapters",
        "api.adapters.connection_adapters_event",
        "api.adapters.room_adapters",
        "api.adapters.room_adapters_event",
        "asyncio",
        "backend.domain.events.all_events",
        "backend.domain.events.base",
        "backend.infrastructure.events.in_memory_event_bus",
        "json",
        "os",
        "pytest",
        "sys",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/events/shadow/test_shadow_mode.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import pytest",
        "import asyncio",
        "from typing import",
        "from unittest.mock import",
        "import time",
        "import sys",
        "import os",
        "from api.adapters.unified_adapter_handler import",
        "from api.adapters.adapter_event_config import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from api.adapters.connection_adapters import"
      ],
      "dependencies": [
        "api.adapters.adapter_event_config",
        "api.adapters.connection_adapters",
        "api.adapters.unified_adapter_handler",
        "asyncio",
        "backend.infrastructure.events.in_memory_event_bus",
        "os",
        "pytest",
        "sys",
        "time",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_rate_limiting.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from datetime import",
        "from unittest.mock import",
        "from backend.infrastructure.rate_limiting import"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.rate_limiting",
        "datetime",
        "pytest",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_hybrid_persistence.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import pytest",
        "from datetime import",
        "import tempfile",
        "import shutil",
        "from pathlib import",
        "from backend.infrastructure.persistence.archive import",
        "from backend.infrastructure.persistence.hybrid_game_repository import",
        "from backend.domain.entities import"
      ],
      "dependencies": [
        "asyncio",
        "backend.domain.entities",
        "backend.infrastructure.persistence.archive",
        "backend.infrastructure.persistence.hybrid_game_repository",
        "datetime",
        "pathlib",
        "pytest",
        "shutil",
        "tempfile"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_resilience.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import pytest",
        "import time",
        "import random",
        "from datetime import",
        "from unittest.mock import",
        "from backend.infrastructure.resilience.circuit_breaker import",
        "from backend.infrastructure.resilience.retry import",
        "from backend.infrastructure.resilience.bulkhead import",
        "from backend.infrastructure.resilience.timeout import",
        "from backend.infrastructure.resilience.connection_pool import",
        "from backend.infrastructure.resilience.load_shedding import",
        "import threading",
        "import threading",
        "from backend.infrastructure.optimization.memory_manager import"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.optimization.memory_manager",
        "backend.infrastructure.resilience.bulkhead",
        "backend.infrastructure.resilience.circuit_breaker",
        "backend.infrastructure.resilience.connection_pool",
        "backend.infrastructure.resilience.load_shedding",
        "backend.infrastructure.resilience.retry",
        "backend.infrastructure.resilience.timeout",
        "datetime",
        "pytest",
        "random",
        "threading",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_optimized_repositories.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "import time",
        "from datetime import",
        "from unittest.mock import",
        "from domain.entities.room import",
        "from domain.entities.game import",
        "from domain.entities.player import",
        "from domain.value_objects import",
        "from infrastructure.repositories.optimized_room_repository import",
        "from infrastructure.repositories.optimized_game_repository import",
        "from infrastructure.repositories.optimized_player_stats_repository import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "domain.entities.game",
        "domain.entities.player",
        "domain.entities.room",
        "domain.value_objects",
        "infrastructure.repositories.optimized_game_repository",
        "infrastructure.repositories.optimized_player_stats_repository",
        "infrastructure.repositories.optimized_room_repository",
        "pytest",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_messaging.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from datetime import",
        "from typing import",
        "from backend.infrastructure.messaging import"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.messaging",
        "datetime",
        "pytest",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_observability.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "import time",
        "import json",
        "from datetime import",
        "from unittest.mock import",
        "import logging",
        "from backend.infrastructure.observability import",
        "from backend.infrastructure.observability.correlation import"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.observability",
        "backend.infrastructure.observability.correlation",
        "datetime",
        "json",
        "logging",
        "pytest",
        "time",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_state_persistence.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from datetime import",
        "from pathlib import",
        "import tempfile",
        "import shutil",
        "from backend.infrastructure.state_persistence import"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.state_persistence",
        "datetime",
        "pathlib",
        "pytest",
        "shutil",
        "tempfile"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_state_persistence_integration.py",
      "architecture_type": "hybrid",
      "confidence": 0.6,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from backend.engine.game import",
        "Legacy import: from backend.engine.room import",
        "Legacy import: from backend.engine.player import"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from datetime import",
        "from pathlib import",
        "import tempfile",
        "from backend.engine.state_machine.game_state_machine import",
        "from backend.engine.state_machine.game_action import",
        "from backend.engine.state_machine.game_state import",
        "from backend.engine.game import",
        "from backend.engine.room import",
        "from backend.engine.player import",
        "from backend.infrastructure.state_persistence import"
      ],
      "dependencies": [
        "asyncio",
        "backend.engine.game",
        "backend.engine.player",
        "backend.engine.room",
        "backend.engine.state_machine.game_action",
        "backend.engine.state_machine.game_state",
        "backend.engine.state_machine.game_state_machine",
        "backend.infrastructure.state_persistence",
        "datetime",
        "pathlib",
        "pytest",
        "tempfile"
      ],
      "recommendation": "Review for cleanup. May need partial refactoring in Phase 7."
    },
    {
      "file_path": "tests/infrastructure/test_monitoring.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from datetime import",
        "from typing import",
        "import gc",
        "import json",
        "from backend.infrastructure.monitoring import",
        "from backend.infrastructure.monitoring.game_metrics import",
        "from backend.infrastructure.monitoring.correlation import",
        "import logging"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.monitoring",
        "backend.infrastructure.monitoring.correlation",
        "backend.infrastructure.monitoring.game_metrics",
        "datetime",
        "gc",
        "json",
        "logging",
        "pytest",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_caching.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from datetime import",
        "from typing import",
        "from backend.infrastructure.caching import"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.caching",
        "datetime",
        "pytest",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_event_store.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from datetime import",
        "from typing import",
        "import uuid",
        "from backend.infrastructure.event_store import"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.event_store",
        "datetime",
        "pytest",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_websocket_integration.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from datetime import",
        "from unittest.mock import",
        "from typing import",
        "from fastapi import",
        "from starlette.websockets import",
        "from backend.infrastructure.websocket import",
        "from backend.domain.entities import",
        "from backend.domain.value_objects import"
      ],
      "dependencies": [
        "asyncio",
        "backend.domain.entities",
        "backend.domain.value_objects",
        "backend.infrastructure.websocket",
        "datetime",
        "fastapi",
        "pytest",
        "starlette.websockets",
        "typing",
        "unittest.mock"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/infrastructure/test_persistence_abstraction.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import pytest",
        "import asyncio",
        "from datetime import",
        "from typing import",
        "from dataclasses import",
        "from backend.infrastructure.persistence.base import",
        "from backend.infrastructure.persistence.memory_adapter import",
        "from backend.infrastructure.persistence.hybrid_repository import",
        "from backend.infrastructure.persistence.repository_factory import"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.persistence.base",
        "backend.infrastructure.persistence.hybrid_repository",
        "backend.infrastructure.persistence.memory_adapter",
        "backend.infrastructure.persistence.repository_factory",
        "dataclasses",
        "datetime",
        "pytest",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/value_objects/test_hand_strength.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "import pytest",
        "from domain.value_objects.hand_strength import",
        "from domain.value_objects.piece import"
      ],
      "dependencies": [
        "domain.value_objects.hand_strength",
        "domain.value_objects.piece",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/value_objects/test_declaration.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "import pytest",
        "from domain.value_objects.declaration import"
      ],
      "dependencies": [
        "domain.value_objects.declaration",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/value_objects/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/value_objects/test_piece.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "import pytest",
        "from domain.value_objects.piece import"
      ],
      "dependencies": [
        "domain.value_objects.piece",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/services/test_game_rules.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "import pytest",
        "from domain.services.game_rules import",
        "from domain.value_objects.piece import",
        "from domain.entities.player import"
      ],
      "dependencies": [
        "domain.entities.player",
        "domain.services.game_rules",
        "domain.value_objects.piece",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/services/test_scoring_service.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "import pytest",
        "from domain.services.scoring_service import",
        "from domain.entities.player import"
      ],
      "dependencies": [
        "domain.entities.player",
        "domain.services.scoring_service",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/services/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/services/test_turn_resolution.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "import pytest",
        "from domain.services.turn_resolution import",
        "from domain.value_objects.piece import"
      ],
      "dependencies": [
        "domain.services.turn_resolution",
        "domain.value_objects.piece",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/entities/test_player.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "import pytest",
        "from domain.entities.player import",
        "from domain.value_objects.piece import",
        "from domain.events.player_events import"
      ],
      "dependencies": [
        "domain.entities.player",
        "domain.events.player_events",
        "domain.value_objects.piece",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/entities/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/entities/test_game.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "import pytest",
        "from domain.entities.game import",
        "from domain.entities.player import",
        "from domain.value_objects.piece import",
        "from domain.events.game_events import"
      ],
      "dependencies": [
        "domain.entities.game",
        "domain.entities.player",
        "domain.events.game_events",
        "domain.value_objects.piece",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "tests/domain/entities/test_room.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "import pytest",
        "from domain.entities.room import",
        "from domain.entities.player import",
        "from domain.entities.game import"
      ],
      "dependencies": [
        "domain.entities.game",
        "domain.entities.player",
        "domain.entities.room",
        "pytest"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "utils/error_handling.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "import time",
        "import uuid",
        "from typing import",
        "from fastapi import",
        "from fastapi.responses import",
        "from ..shared.error_codes import",
        "import os"
      ],
      "dependencies": [
        "..shared.error_codes",
        "fastapi",
        "fastapi.responses",
        "logging",
        "os",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "backend/test_async_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import websockets",
        "import json",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "datetime",
        "json",
        "websockets"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "backend/test_eventstore_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import requests",
        "import json",
        "from datetime import"
      ],
      "dependencies": [
        "datetime",
        "json",
        "requests"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "backend/infrastructure/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/infrastructure/events/integrated_broadcast_handler.py",
      "architecture_type": "hybrid",
      "confidence": 0.6,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from socket_manager import",
        "Legacy import: from socket_manager import",
        "Uses direct broadcasting (legacy pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "from backend.domain.events.base import",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.decorators import",
        "from backend.infrastructure.events.event_broadcast_mapper import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from room_manager import",
        "from socket_manager import",
        "from socket_manager import"
      ],
      "dependencies": [
        "backend.domain.events.all_events",
        "backend.domain.events.base",
        "backend.infrastructure.events.decorators",
        "backend.infrastructure.events.event_broadcast_mapper",
        "backend.infrastructure.events.in_memory_event_bus",
        "datetime",
        "logging",
        "room_manager",
        "socket_manager",
        "typing"
      ],
      "recommendation": "Review for cleanup. May need partial refactoring in Phase 7."
    },
    {
      "file_path": "backend/infrastructure/events/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/infrastructure/events/event_broadcast_mapper.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from backend.domain.events.base import",
        "from backend.domain.events.all_events import"
      ],
      "dependencies": [
        "backend.domain.events.all_events",
        "backend.domain.events.base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/infrastructure/events/broadcast_handlers.py",
      "architecture_type": "hybrid",
      "confidence": 0.6,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from socket_manager import",
        "Uses direct broadcasting (legacy pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.decorators import",
        "from socket_manager import"
      ],
      "dependencies": [
        "backend.domain.events.all_events",
        "backend.infrastructure.events.decorators",
        "datetime",
        "logging",
        "socket_manager",
        "typing"
      ],
      "recommendation": "Review for cleanup. May need partial refactoring in Phase 7."
    },
    {
      "file_path": "backend/infrastructure/events/in_memory_event_bus.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "from collections import",
        "from dataclasses import",
        "from typing import",
        "from datetime import",
        "from backend.domain.interfaces.event_publisher import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "asyncio",
        "backend.domain.events.base",
        "backend.domain.interfaces.event_publisher",
        "collections",
        "dataclasses",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/infrastructure/events/decorators.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import functools",
        "from typing import",
        "from backend.domain.events.base import",
        "from .in_memory_event_bus import"
      ],
      "dependencies": [
        ".in_memory_event_bus",
        "backend.domain.events.base",
        "functools",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/scoring_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/error_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/all_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from .base import",
        "from .event_types import",
        "from .connection_events import",
        "from .room_events import",
        "from .lobby_events import",
        "from .game_events import",
        "from .turn_events import",
        "from .scoring_events import",
        "from .error_events import"
      ],
      "dependencies": [
        ".base",
        ".connection_events",
        ".error_events",
        ".event_types",
        ".game_events",
        ".lobby_events",
        ".room_events",
        ".scoring_events",
        ".turn_events"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from .base import",
        "from .event_types import"
      ],
      "dependencies": [
        ".base",
        ".event_types"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/lobby_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/room_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/game_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/turn_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/connection_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/base.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from abc import",
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "import uuid"
      ],
      "dependencies": [
        "abc",
        "dataclasses",
        "datetime",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/events/event_types.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from enum import"
      ],
      "dependencies": [
        "enum"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/interfaces/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "backend/domain/interfaces/event_publisher.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from ..events.base import"
      ],
      "dependencies": [
        "..events.base",
        "abc",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/shadow_mode.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "import time",
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import logging",
        "from tests.contracts.golden_master import",
        "import random"
      ],
      "dependencies": [
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "random",
        "tests.contracts.golden_master",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/shadow_mode_integration.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "from typing import",
        "import logging",
        "from api.shadow_mode import",
        "from api.routes.ws import"
      ],
      "dependencies": [
        "api.routes.ws",
        "api.shadow_mode",
        "asyncio",
        "logging",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/main.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "from backend.api.routes.routes import",
        "from backend.api.routes.ws import",
        "from backend.api.routes.debug import",
        "from backend.api.middleware import",
        "from dotenv import",
        "from fastapi import",
        "from fastapi.middleware.cors import",
        "from fastapi.responses import",
        "from fastapi.staticfiles import",
        "from config.logging_config import",
        "from backend.api.routes.ws import"
      ],
      "dependencies": [
        "backend.api.middleware",
        "backend.api.routes.debug",
        "backend.api.routes.routes",
        "backend.api.routes.ws",
        "config.logging_config",
        "dotenv",
        "fastapi",
        "fastapi.middleware.cors",
        "fastapi.responses",
        "fastapi.staticfiles",
        "os"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/shadow_mode_manager.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import json",
        "from typing import",
        "from datetime import",
        "from pathlib import",
        "import asyncio",
        "from api.shadow_mode import",
        "import argparse"
      ],
      "dependencies": [
        "api.shadow_mode",
        "argparse",
        "asyncio",
        "datetime",
        "json",
        "pathlib",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/middleware/event_priority.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from enum import",
        "from typing import",
        "from dataclasses import",
        "import time"
      ],
      "dependencies": [
        "dataclasses",
        "enum",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/middleware/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from .rate_limit import"
      ],
      "dependencies": [
        ".rate_limit"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/middleware/websocket_rate_limit.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "import logging",
        "from typing import",
        "from dataclasses import",
        "import hashlib",
        "from fastapi import",
        "from .rate_limit import",
        "from .event_priority import",
        "import sys",
        "import os",
        "from error_codes import",
        "import sys",
        "import os",
        "from config.rate_limits import"
      ],
      "dependencies": [
        ".event_priority",
        ".rate_limit",
        "asyncio",
        "config.rate_limits",
        "dataclasses",
        "error_codes",
        "fastapi",
        "hashlib",
        "logging",
        "os",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/middleware/rate_limit.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import time",
        "import logging",
        "import json",
        "from collections import",
        "from datetime import",
        "from typing import",
        "from dataclasses import",
        "import hashlib",
        "from fastapi import",
        "from fastapi.responses import",
        "from starlette.middleware.base import",
        "from starlette.types import",
        "import sys",
        "import os",
        "from error_codes import",
        "import sys",
        "import os",
        "from config.rate_limits import"
      ],
      "dependencies": [
        "asyncio",
        "collections",
        "config.rate_limits",
        "dataclasses",
        "datetime",
        "error_codes",
        "fastapi",
        "fastapi.responses",
        "hashlib",
        "json",
        "logging",
        "os",
        "starlette.middleware.base",
        "starlette.types",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/websocket/migration_example.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from backend.engine.async_room_manager import"
      ],
      "imports": [
        "from fastapi import",
        "import logging",
        "from .async_migration_helper import",
        "from backend.shared_instances import",
        "from backend.shared_instances import",
        "from backend.api.websocket.connection_manager import",
        "from backend.shared_instances import",
        "from backend.shared_instances import",
        "from backend.engine.async_room_manager import",
        "import asyncio",
        "from fastapi import",
        "from backend.shared_instances import",
        "from backend.api.websocket.connection_manager import"
      ],
      "dependencies": [
        ".async_migration_helper",
        "asyncio",
        "backend.api.websocket.connection_manager",
        "backend.engine.async_room_manager",
        "backend.shared_instances",
        "fastapi",
        "logging"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/websocket/async_migration_helper.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from backend.engine.room import",
        "Legacy import: from backend.engine.room_manager import",
        "Legacy import: from backend.engine.async_room import",
        "Legacy import: from backend.engine.async_room_manager import",
        "Legacy import: from backend.engine.async_compat import"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from backend.engine.room import",
        "from backend.engine.room_manager import",
        "from backend.engine.async_room import",
        "from backend.engine.async_room_manager import",
        "from backend.engine.async_compat import",
        "import asyncio",
        "import asyncio",
        "from backend.engine.async_compat import",
        "import asyncio",
        "import asyncio",
        "import asyncio",
        "import asyncio",
        "from backend.shared_instances import",
        "import asyncio"
      ],
      "dependencies": [
        "asyncio",
        "backend.engine.async_compat",
        "backend.engine.async_room",
        "backend.engine.async_room_manager",
        "backend.engine.room",
        "backend.engine.room_manager",
        "backend.shared_instances",
        "logging",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/websocket/message_queue.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "from datetime import",
        "from typing import",
        "from dataclasses import",
        "import json",
        "import logging"
      ],
      "dependencies": [
        "asyncio",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/websocket/connection_manager.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "from datetime import",
        "from typing import",
        "from dataclasses import",
        "from enum import",
        "import logging"
      ],
      "dependencies": [
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/websocket/state_sync.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Legacy import: from backend.engine.piece import"
      ],
      "imports": [
        "import logging",
        "from datetime import",
        "from typing import",
        "from backend.engine.state_machine.core import",
        "from backend.engine.piece import"
      ],
      "dependencies": [
        "backend.engine.piece",
        "backend.engine.state_machine.core",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/config/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/config/rate_limit_config.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import os",
        "from typing import",
        "from api.middleware.rate_limit import"
      ],
      "dependencies": [
        "api.middleware.rate_limit",
        "os",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/models/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: models/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/models/request_models.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: models/"
      ],
      "imports": [
        "from typing import",
        "from pydantic import"
      ],
      "dependencies": [
        "pydantic",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/models/game_models.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: models/"
      ],
      "imports": [
        "from typing import",
        "from pydantic import",
        "from enum import"
      ],
      "dependencies": [
        "enum",
        "pydantic",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/adapters/websocket_adapter_integration_ultra_optimized.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from api.adapters.connection_adapters_optimized import",
        "import time",
        "from datetime import"
      ],
      "dependencies": [
        "api.adapters.connection_adapters_optimized",
        "datetime",
        "logging",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/connection_adapters_optimized.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import time",
        "from datetime import"
      ],
      "dependencies": [
        "datetime",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/websocket_adapter_integration_optimized.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from api.adapters.adapter_registry import"
      ],
      "dependencies": [
        "api.adapters.adapter_registry",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/adapter_registry_optimized.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from api.adapters.connection_adapters_optimized import"
      ],
      "dependencies": [
        "api.adapters.connection_adapters_optimized",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/connection_adapters.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import time",
        "from datetime import"
      ],
      "dependencies": [
        "datetime",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/unified_adapter_handler.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "import time",
        "from .adapter_event_config import",
        "from .connection_adapters_event import",
        "from .room_adapters_event import",
        "from .game_adapters_event import",
        "from .lobby_adapters_event import"
      ],
      "dependencies": [
        ".adapter_event_config",
        ".connection_adapters_event",
        ".game_adapters_event",
        ".lobby_adapters_event",
        ".room_adapters_event",
        "logging",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/room_adapters.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import uuid",
        "import logging"
      ],
      "dependencies": [
        "logging",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/lobby_adapters.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging"
      ],
      "dependencies": [
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/game_adapters.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging"
      ],
      "dependencies": [
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/adapter_registry.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from api.adapters.connection_adapters import"
      ],
      "dependencies": [
        "api.adapters.connection_adapters",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/adapter_performance_analysis.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "import cProfile",
        "import pstats",
        "from io import"
      ],
      "dependencies": [
        "asyncio",
        "cProfile",
        "io",
        "pstats",
        "time"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/websocket_adapter_integration.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from api.adapters.adapter_registry import"
      ],
      "dependencies": [
        "api.adapters.adapter_registry",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/connection_adapters_event.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import time",
        "from datetime import",
        "import sys",
        "import os",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from .connection_adapters import",
        "from .connection_adapters import",
        "from .connection_adapters import",
        "from .connection_adapters import"
      ],
      "dependencies": [
        ".connection_adapters",
        "backend.domain.events.all_events",
        "backend.infrastructure.events.in_memory_event_bus",
        "datetime",
        "os",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/room_adapters_event.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import uuid",
        "import logging",
        "import sys",
        "import os",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from .adapter_event_config import",
        "from .room_adapters import",
        "from .room_adapters import",
        "from .room_adapters import",
        "from .room_adapters import",
        "from .room_adapters import",
        "from .room_adapters import"
      ],
      "dependencies": [
        ".adapter_event_config",
        ".room_adapters",
        "backend.domain.events.all_events",
        "backend.infrastructure.events.in_memory_event_bus",
        "logging",
        "os",
        "sys",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/integrated_adapter_system.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from api.adapters.connection_adapters import",
        "from api.adapters.room_adapters import",
        "from api.adapters.lobby_adapters import",
        "from api.adapters.game_adapters import"
      ],
      "dependencies": [
        "api.adapters.connection_adapters",
        "api.adapters.game_adapters",
        "api.adapters.lobby_adapters",
        "api.adapters.room_adapters",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/game_adapters_event.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "import sys",
        "import os",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from .adapter_event_config import",
        "from .game_adapters import",
        "from .game_adapters import",
        "from .game_adapters import",
        "from .game_adapters import",
        "from .game_adapters import",
        "from .game_adapters import",
        "from .game_adapters import"
      ],
      "dependencies": [
        ".adapter_event_config",
        ".game_adapters",
        "backend.domain.events.all_events",
        "backend.infrastructure.events.in_memory_event_bus",
        "logging",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/domain_integration.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: api/adapters/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from domain.interfaces.repositories import",
        "from domain.interfaces.events import",
        "from infrastructure.repositories import",
        "from infrastructure.events import",
        "from infrastructure.handlers import",
        "from .game_adapters_domain import"
      ],
      "dependencies": [
        ".game_adapters_domain",
        "domain.interfaces.events",
        "domain.interfaces.repositories",
        "infrastructure.events",
        "infrastructure.handlers",
        "infrastructure.repositories",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/websocket_adapter_final.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import time",
        "from datetime import"
      ],
      "dependencies": [
        "datetime",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/game_adapters_domain.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: api/adapters/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from domain.entities.room import",
        "from domain.entities.game import",
        "from domain.entities.player import",
        "from domain.services.game_rules import",
        "from domain.services.scoring_service import",
        "from domain.services.turn_resolution import",
        "from domain.value_objects.piece import",
        "from domain.value_objects.declaration import",
        "from domain.events.game_events import",
        "from domain.events.player_events import"
      ],
      "dependencies": [
        "domain.entities.game",
        "domain.entities.player",
        "domain.entities.room",
        "domain.events.game_events",
        "domain.events.player_events",
        "domain.services.game_rules",
        "domain.services.scoring_service",
        "domain.services.turn_resolution",
        "domain.value_objects.declaration",
        "domain.value_objects.piece",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/lobby_adapters_event.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "import sys",
        "import os",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from .adapter_event_config import",
        "from .lobby_adapters import",
        "from .lobby_adapters import"
      ],
      "dependencies": [
        ".adapter_event_config",
        ".lobby_adapters",
        "backend.domain.events.all_events",
        "backend.infrastructure.events.in_memory_event_bus",
        "logging",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/domain_adapter_wrapper.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "import os",
        "from typing import",
        "import logging",
        "from .domain_integration import"
      ],
      "dependencies": [
        ".domain_integration",
        "logging",
        "os",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/adapters/adapter_event_config.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: api/adapters/"
      ],
      "imports": [
        "import os",
        "from typing import",
        "from enum import"
      ],
      "dependencies": [
        "enum",
        "os",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/controllers/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/routes/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from fastapi import",
        "from .routes import",
        "from .ws import"
      ],
      "dependencies": [
        ".routes",
        ".ws",
        "fastapi"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/routes/ws.py",
      "architecture_type": "hybrid",
      "confidence": 1.0,
      "indicators": [
        "Special case: api/routes/ws.py"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "import uuid",
        "from typing import",
        "import backend.socket_manager",
        "from shared_instances import",
        "from backend.socket_manager import",
        "from fastapi import",
        "from api.validation import",
        "from api.middleware.websocket_rate_limit import",
        "from api.websocket.connection_manager import",
        "from api.websocket.message_queue import",
        "from api.routes.ws_adapter_wrapper import",
        "import time",
        "import time",
        "from backend.socket_manager import",
        "from backend.socket_manager import",
        "from .routes import",
        "from .routes import",
        "from backend.socket_manager import",
        "from .routes import",
        "from engine.state_machine.core import",
        "from engine.state_machine.core import",
        "import traceback",
        "from engine.state_machine.core import",
        "from engine.state_machine.core import",
        "from engine.state_machine.core import",
        "from engine.state_machine.core import",
        "from engine.state_machine.core import",
        "from engine.bot_manager import"
      ],
      "dependencies": [
        ".routes",
        "api.middleware.websocket_rate_limit",
        "api.routes.ws_adapter_wrapper",
        "api.validation",
        "api.websocket.connection_manager",
        "api.websocket.message_queue",
        "asyncio",
        "backend.socket_manager",
        "engine.bot_manager",
        "engine.state_machine.core",
        "fastapi",
        "logging",
        "shared_instances",
        "time",
        "traceback",
        "typing",
        "uuid"
      ],
      "recommendation": "Review for cleanup. May need partial refactoring in Phase 7."
    },
    {
      "file_path": "api/routes/ws_adapter_wrapper.py",
      "architecture_type": "bridge",
      "confidence": 1.0,
      "indicators": [
        "Special case: api/routes/ws_adapter_wrapper.py"
      ],
      "imports": [
        "import os",
        "import logging",
        "import random",
        "from typing import",
        "from fastapi import",
        "from api.adapters.integrated_adapter_system import",
        "from shared_instances import",
        "from api.routes.ws_adapter_wrapper import"
      ],
      "dependencies": [
        "api.adapters.integrated_adapter_system",
        "api.routes.ws_adapter_wrapper",
        "fastapi",
        "logging",
        "os",
        "random",
        "shared_instances",
        "typing"
      ],
      "recommendation": "Keep as integration point. Review after Phase 7 for optimization."
    },
    {
      "file_path": "api/routes/ws_adapter_integration.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [],
      "imports": [
        "import os",
        "import logging",
        "import random",
        "from typing import",
        "from fastapi import",
        "from api.adapters.integrated_adapter_system import",
        "from api.shadow_mode_integration import"
      ],
      "dependencies": [
        "api.adapters.integrated_adapter_system",
        "api.shadow_mode_integration",
        "fastapi",
        "logging",
        "os",
        "random",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "api/routes/debug.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import logging",
        "from typing import",
        "from fastapi import",
        "from fastapi.responses import",
        "from api.services.event_store import"
      ],
      "dependencies": [
        "api.services.event_store",
        "fastapi",
        "fastapi.responses",
        "logging",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/routes/ws_integration_patch.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from backend.socket_manager import",
        "Legacy import: from backend.socket_manager import",
        "Legacy import: from shared_instances import"
      ],
      "imports": [
        "from api.routes.ws_adapter_integration import",
        "from api.routes.ws_legacy_handlers import",
        "from backend.socket_manager import",
        "from backend.socket_manager import",
        "from shared_instances import",
        "from fastapi import"
      ],
      "dependencies": [
        "api.routes.ws_adapter_integration",
        "api.routes.ws_legacy_handlers",
        "backend.socket_manager",
        "fastapi",
        "shared_instances"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/routes/ws_legacy_handlers.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from backend.socket_manager import",
        "Legacy import: from shared_instances import",
        "Legacy import: from backend.socket_manager import",
        "Legacy import: from backend.socket_manager import"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "from typing import",
        "from backend.socket_manager import",
        "from shared_instances import",
        "from api.websocket.connection_manager import",
        "from api.websocket.message_queue import",
        "from backend.socket_manager import",
        "from backend.socket_manager import"
      ],
      "dependencies": [
        "api.websocket.connection_manager",
        "api.websocket.message_queue",
        "asyncio",
        "backend.socket_manager",
        "logging",
        "shared_instances",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/routes/routes.py",
      "architecture_type": "legacy",
      "confidence": 0.55,
      "indicators": [
        "Legacy import: from shared_instances import",
        "Legacy import: from socket_manager import",
        "Legacy import: from backend.socket_manager import",
        "Legacy import: from backend.socket_manager import",
        "Legacy import: from backend.socket_manager import"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "from datetime import",
        "from typing import",
        "import socket_manager",
        "from shared_instances import",
        "from socket_manager import",
        "from fastapi import",
        "from fastapi.responses import",
        "from api.models.game_models import",
        "from api.validation import",
        "from engine.state_machine.core import",
        "from . import",
        "from api.services.event_store import",
        "from backend.socket_manager import",
        "from backend.socket_manager import",
        "from backend.socket_manager import",
        "from api.services.health_monitor import",
        "from api.services.health_monitor import",
        "import psutil",
        "from api.middleware.rate_limit import",
        "import sys",
        "from api.services.health_monitor import",
        "from socket_manager import",
        "from fastapi.responses import",
        "from infrastructure.feature_flags import",
        "from pathlib import",
        "from api.services.recovery_manager import",
        "from api.services.recovery_manager import",
        "from api.middleware.rate_limit import",
        "from api.middleware.websocket_rate_limit import",
        "import sys",
        "from api.services.health_monitor import",
        "from api.services.recovery_manager import",
        "from socket_manager import",
        "from api.middleware.rate_limit import",
        "from api.middleware.websocket_rate_limit import",
        "from config.rate_limits import"
      ],
      "dependencies": [
        ".",
        "api.middleware.rate_limit",
        "api.middleware.websocket_rate_limit",
        "api.models.game_models",
        "api.services.event_store",
        "api.services.health_monitor",
        "api.services.recovery_manager",
        "api.validation",
        "asyncio",
        "backend.socket_manager",
        "config.rate_limits",
        "datetime",
        "engine.state_machine.core",
        "fastapi",
        "fastapi.responses",
        "infrastructure.feature_flags",
        "pathlib",
        "psutil",
        "shared_instances",
        "socket_manager",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/services/logging_service.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import json",
        "import logging",
        "import threading",
        "import time",
        "import uuid",
        "from contextlib import",
        "from dataclasses import",
        "from datetime import",
        "from typing import"
      ],
      "dependencies": [
        "contextlib",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "threading",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/services/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/services/health_monitor.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from socket_manager import",
        "Legacy import: from shared_instances import",
        "Legacy import: from socket_manager import"
      ],
      "imports": [
        "import asyncio",
        "import sqlite3",
        "import time",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "from typing import",
        "import psutil",
        "from .logging_service import",
        "from .event_store import",
        "import sys",
        "from socket_manager import",
        "import sys",
        "from shared_instances import",
        "import sys",
        "from socket_manager import"
      ],
      "dependencies": [
        ".event_store",
        ".logging_service",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "psutil",
        "shared_instances",
        "socket_manager",
        "sqlite3",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/services/event_store.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "import asyncio",
        "import json",
        "import logging",
        "import sqlite3",
        "import time",
        "from dataclasses import",
        "from datetime import",
        "from pathlib import",
        "from typing import",
        "import copy"
      ],
      "dependencies": [
        "asyncio",
        "copy",
        "dataclasses",
        "datetime",
        "json",
        "logging",
        "pathlib",
        "sqlite3",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/services/recovery_manager.py",
      "architecture_type": "legacy",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Legacy import: from socket_manager import",
        "Legacy import: from socket_manager import",
        "Legacy import: from shared_instances import",
        "Legacy import: from socket_manager import",
        "Legacy import: from socket_manager import"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "from typing import",
        "from .logging_service import",
        "from .health_monitor import",
        "import sys",
        "from socket_manager import",
        "import sys",
        "from socket_manager import",
        "import sys",
        "from shared_instances import",
        "import sys",
        "from socket_manager import",
        "import sys",
        "from socket_manager import",
        "import sqlite3"
      ],
      "dependencies": [
        ".health_monitor",
        ".logging_service",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "shared_instances",
        "socket_manager",
        "sqlite3",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/validation/rest_validators.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from typing import",
        "from fastapi import"
      ],
      "dependencies": [
        "fastapi",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/validation/websocket_validators.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from typing import",
        "import sys",
        "import os",
        "from error_codes import"
      ],
      "dependencies": [
        "error_codes",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "api/validation/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.0,
      "indicators": [],
      "imports": [
        "from .rest_validators import",
        "from .websocket_validators import"
      ],
      "dependencies": [
        ".rest_validators",
        ".websocket_validators"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "application/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/exceptions.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from typing import"
      ],
      "dependencies": [
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/base.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from dataclasses import",
        "import logging"
      ],
      "dependencies": [
        "abc",
        "dataclasses",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/dto/game.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "from .base import",
        "from .common import"
      ],
      "dependencies": [
        ".base",
        ".common",
        "dataclasses",
        "datetime",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/dto/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from .base import",
        "from .common import"
      ],
      "dependencies": [
        ".base",
        ".common"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/dto/room_management.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "from .base import",
        "from .common import"
      ],
      "dependencies": [
        ".base",
        ".common",
        "dataclasses",
        "datetime",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/dto/connection.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "import uuid",
        "from .base import",
        "from .common import"
      ],
      "dependencies": [
        ".base",
        ".common",
        "dataclasses",
        "datetime",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/dto/common.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "from enum import"
      ],
      "dependencies": [
        "dataclasses",
        "datetime",
        "enum",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/dto/lobby.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "from .base import",
        "from .common import"
      ],
      "dependencies": [
        ".base",
        ".common",
        "dataclasses",
        "datetime",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/dto/base.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from abc import",
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "import uuid"
      ],
      "dependencies": [
        "abc",
        "dataclasses",
        "datetime",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/connection/handle_player_reconnect.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from application.interfaces import",
        "from application.interfaces.services import",
        "from application.dto.connection import",
        "from application.exceptions import",
        "from domain.value_objects import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.exceptions",
        "application.interfaces",
        "application.interfaces.services",
        "dataclasses",
        "domain.value_objects",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/connection/sync_client_state.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from application.base import",
        "from application.dto.connection import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.game import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.connection",
        "application.exceptions",
        "application.interfaces",
        "domain.entities.game",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/connection/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from .handle_ping import",
        "from .mark_client_ready import",
        "from .acknowledge_message import",
        "from .sync_client_state import",
        "from .handle_player_disconnect import",
        "from .handle_player_reconnect import",
        "from .queue_message_for_player import"
      ],
      "dependencies": [
        ".acknowledge_message",
        ".handle_ping",
        ".handle_player_disconnect",
        ".handle_player_reconnect",
        ".mark_client_ready",
        ".queue_message_for_player",
        ".sync_client_state"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/connection/mark_client_ready.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from application.base import",
        "from application.dto.connection import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from backend.domain.events.connection_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.connection",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.connection_events",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/connection/queue_message_for_player.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from application.interfaces import",
        "from application.interfaces.services import",
        "from application.dto.connection import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.exceptions",
        "application.interfaces",
        "application.interfaces.services",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/connection/acknowledge_message.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from datetime import",
        "from application.base import",
        "from application.dto.connection import",
        "from application.interfaces import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.connection",
        "application.exceptions",
        "application.interfaces",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/connection/handle_ping.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from datetime import",
        "from application.base import",
        "from application.dto.connection import",
        "from application.interfaces import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.connection",
        "application.exceptions",
        "application.interfaces",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/connection/handle_player_disconnect.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "from application.interfaces import",
        "from application.interfaces.services import",
        "from application.dto.connection import",
        "from application.exceptions import",
        "from domain.value_objects import",
        "from domain.entities.connection import",
        "from domain.value_objects import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.exceptions",
        "application.interfaces",
        "application.interfaces.services",
        "dataclasses",
        "datetime",
        "domain.entities.connection",
        "domain.value_objects",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/lobby/get_room_list.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "from application.base import",
        "from application.dto.lobby import",
        "from application.interfaces import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.lobby",
        "application.exceptions",
        "application.interfaces",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/lobby/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from .get_room_list import",
        "from .get_room_details import"
      ],
      "dependencies": [
        ".get_room_details",
        ".get_room_list"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/lobby/get_room_details.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.lobby import",
        "from application.dto.common import",
        "from application.interfaces import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.lobby",
        "application.exceptions",
        "application.interfaces",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/mark_player_ready.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.game import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.game import",
        "from domain.events.player_events import",
        "from domain.events.game_events import",
        "from domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "domain.entities.game",
        "domain.events.base",
        "domain.events.game_events",
        "domain.events.player_events",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/start_game.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.game import",
        "from application.dto.common import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.game import",
        "from domain.entities.player import",
        "from domain.services.game_rules import",
        "from backend.domain.events.game_events import",
        "from backend.domain.events.base import",
        "import random"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.game_events",
        "domain.entities.game",
        "domain.entities.player",
        "domain.services.game_rules",
        "logging",
        "random",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/accept_redeal.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.game import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.game import",
        "from backend.domain.events.game_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.game_events",
        "domain.entities.game",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/leave_game.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.game import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.events.player_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "domain.events.player_events",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from .start_game import",
        "from .declare import",
        "from .play import",
        "from .request_redeal import",
        "from .accept_redeal import",
        "from .decline_redeal import",
        "from .handle_redeal_decision import",
        "from .mark_player_ready import",
        "from .leave_game import"
      ],
      "dependencies": [
        ".accept_redeal",
        ".declare",
        ".decline_redeal",
        ".handle_redeal_decision",
        ".leave_game",
        ".mark_player_ready",
        ".play",
        ".request_redeal",
        ".start_game"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/request_redeal.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "import uuid",
        "from application.base import",
        "from application.dto.game import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.game import",
        "from domain.services.game_rules import",
        "from backend.domain.events.game_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.game_events",
        "domain.entities.game",
        "domain.services.game_rules",
        "logging",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/play.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.game import",
        "from application.dto.common import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.game import",
        "from domain.value_objects.piece import",
        "from domain.services.game_rules import",
        "from domain.services.turn_resolution import",
        "from backend.domain.events.game_events import",
        "from domain.events.player_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.game_events",
        "domain.entities.game",
        "domain.events.player_events",
        "domain.services.game_rules",
        "domain.services.turn_resolution",
        "domain.value_objects.piece",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/declare.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.game import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.game import",
        "from domain.events.player_events import",
        "from domain.events.game_events import",
        "from domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "domain.entities.game",
        "domain.events.base",
        "domain.events.game_events",
        "domain.events.player_events",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/decline_redeal.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.game import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.game import",
        "from backend.domain.events.game_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.game_events",
        "domain.entities.game",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/game/handle_redeal_decision.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.game import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.game import",
        "from backend.domain.events.game_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.game_events",
        "domain.entities.game",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/bot/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from .schedule_bot_action import"
      ],
      "dependencies": [
        ".schedule_bot_action"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/bot/schedule_bot_action.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import asyncio",
        "import random",
        "from dataclasses import",
        "from typing import",
        "from application.interfaces.services import",
        "from application.dto.common import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.dto.common",
        "application.exceptions",
        "application.interfaces.services",
        "asyncio",
        "dataclasses",
        "random",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/room_management/remove_player.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "from application.base import",
        "from application.dto.room_management import",
        "from application.dto.common import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from backend.domain.events.room_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.room_management",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.room_events",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/room_management/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from .create_room import",
        "from .join_room import",
        "from .leave_room import",
        "from .get_room_state import",
        "from .add_bot import",
        "from .remove_player import"
      ],
      "dependencies": [
        ".add_bot",
        ".create_room",
        ".get_room_state",
        ".join_room",
        ".leave_room",
        ".remove_player"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/room_management/get_room_state.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.room_management import",
        "from application.dto.common import",
        "from application.interfaces import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.room_management",
        "application.exceptions",
        "application.interfaces",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/room_management/join_room.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.room_management import",
        "from application.dto.common import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.player import",
        "from backend.domain.events.room_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.room_management",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.room_events",
        "domain.entities.player",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/room_management/create_room.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "import random",
        "import string",
        "from application.base import",
        "from application.dto.room_management import",
        "from application.dto.common import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.room import",
        "from domain.entities.player import",
        "from backend.domain.events.base import",
        "import time"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.room_management",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "datetime",
        "domain.entities.player",
        "domain.entities.room",
        "logging",
        "random",
        "string",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/room_management/leave_room.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.dto.room_management import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from backend.domain.events.room_events import",
        "from backend.domain.events.base import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.room_management",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.room_events",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/use_cases/room_management/add_bot.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "import random",
        "from application.base import",
        "from application.dto.room_management import",
        "from application.dto.common import",
        "from application.interfaces import",
        "from application.exceptions import",
        "from domain.entities.player import",
        "from backend.domain.events.room_events import",
        "from backend.domain.events.base import",
        "import time"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.room_management",
        "application.exceptions",
        "application.interfaces",
        "backend.domain.events.base",
        "backend.domain.events.room_events",
        "domain.entities.player",
        "logging",
        "random",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/services/game_application_service.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.interfaces import",
        "from application.use_cases.game import",
        "from application.dto.game import",
        "from application.exceptions import",
        "from application.dto.common import",
        "from application.dto.game import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.game",
        "application.exceptions",
        "application.interfaces",
        "application.use_cases.game",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/services/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from .game_application_service import",
        "from .room_application_service import",
        "from .lobby_application_service import",
        "from .connection_application_service import",
        "from .reconnection_service import",
        "from .message_queue_service import"
      ],
      "dependencies": [
        ".connection_application_service",
        ".game_application_service",
        ".lobby_application_service",
        ".message_queue_service",
        ".reconnection_service",
        ".room_application_service"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/services/connection_application_service.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "from collections import",
        "from application.base import",
        "from application.interfaces import",
        "from application.use_cases.connection import",
        "from application.dto.connection import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.connection",
        "application.exceptions",
        "application.interfaces",
        "application.use_cases.connection",
        "collections",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/services/room_application_service.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.base import",
        "from application.interfaces import",
        "from application.use_cases.room_management import",
        "from application.dto.room_management import",
        "from application.dto.common import",
        "from application.exceptions import",
        "from datetime import",
        "from datetime import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.common",
        "application.dto.room_management",
        "application.exceptions",
        "application.interfaces",
        "application.use_cases.room_management",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/services/message_queue_service.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "import logging",
        "from domain.entities.message_queue import",
        "from domain.value_objects import",
        "from domain.events import",
        "from application.interfaces import",
        "from application.interfaces.services import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.exceptions",
        "application.interfaces",
        "application.interfaces.services",
        "datetime",
        "domain.entities.message_queue",
        "domain.events",
        "domain.value_objects",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/services/lobby_application_service.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "from application.base import",
        "from application.interfaces import",
        "from application.use_cases.lobby import",
        "from application.dto.lobby import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.base",
        "application.dto.lobby",
        "application.exceptions",
        "application.interfaces",
        "application.use_cases.lobby",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/services/reconnection_service.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: application/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "import logging",
        "from domain.entities.player import",
        "from domain.entities.game import",
        "from domain.entities.connection import",
        "from domain.entities.message_queue import",
        "from domain.value_objects import",
        "from domain.events import",
        "from application.interfaces import",
        "from application.interfaces.services import",
        "from application.exceptions import"
      ],
      "dependencies": [
        "application.exceptions",
        "application.interfaces",
        "application.interfaces.services",
        "datetime",
        "domain.entities.connection",
        "domain.entities.game",
        "domain.entities.message_queue",
        "domain.entities.player",
        "domain.events",
        "domain.value_objects",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/interfaces/services.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from domain.events.base import"
      ],
      "dependencies": [
        "abc",
        "domain.events.base",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/interfaces/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from .repositories import",
        "from .services import",
        "from .unit_of_work import"
      ],
      "dependencies": [
        ".repositories",
        ".services",
        ".unit_of_work"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/interfaces/repositories.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from domain.entities.room import",
        "from domain.entities.game import",
        "from domain.entities.connection import",
        "from domain.entities.message_queue import",
        "from domain.value_objects import"
      ],
      "dependencies": [
        "abc",
        "domain.entities.connection",
        "domain.entities.game",
        "domain.entities.message_queue",
        "domain.entities.room",
        "domain.value_objects",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "application/interfaces/unit_of_work.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: application/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from .repositories import"
      ],
      "dependencies": [
        ".repositories",
        "abc",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/feature_flags.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import os",
        "import json",
        "import logging",
        "from typing import",
        "from datetime import",
        "from enum import",
        "import random"
      ],
      "dependencies": [
        "datetime",
        "enum",
        "json",
        "logging",
        "os",
        "random",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/dependencies.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from functools import",
        "from application.interfaces import",
        "from infrastructure.unit_of_work import",
        "from infrastructure.events.application_event_publisher import",
        "from infrastructure.services import",
        "from infrastructure.feature_flags import",
        "from api.services.event_store import"
      ],
      "dependencies": [
        "api.services.event_store",
        "application.interfaces",
        "functools",
        "infrastructure.events.application_event_publisher",
        "infrastructure.feature_flags",
        "infrastructure.services",
        "infrastructure.unit_of_work",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/unit_of_work.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from contextlib import",
        "from application.interfaces import",
        "from infrastructure.repositories import",
        "from infrastructure.repositories.application_room_repository import",
        "from infrastructure.repositories.application_game_repository import"
      ],
      "dependencies": [
        "application.interfaces",
        "contextlib",
        "infrastructure.repositories",
        "infrastructure.repositories.application_game_repository",
        "infrastructure.repositories.application_room_repository",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/middleware/implementations.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "import asyncio",
        "import gzip",
        "import json",
        "import hashlib",
        "import time",
        "from datetime import",
        "from .base import",
        "from ..monitoring.correlation import",
        "from ..resilience.circuit_breaker import",
        "from ..resilience.retry import",
        "from ..caching.cache_manager import",
        "from ..observability.metrics import",
        "from ..monitoring.correlation import",
        "from ..caching.rate_limiter import"
      ],
      "dependencies": [
        "..caching.cache_manager",
        "..caching.rate_limiter",
        "..monitoring.correlation",
        "..observability.metrics",
        "..resilience.circuit_breaker",
        "..resilience.retry",
        ".base",
        "asyncio",
        "dataclasses",
        "datetime",
        "gzip",
        "hashlib",
        "json",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/middleware/base.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from abc import",
        "from dataclasses import",
        "from datetime import",
        "import asyncio",
        "import logging",
        "from contextlib import",
        "import uuid"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "contextlib",
        "dataclasses",
        "datetime",
        "logging",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/websocket/recovery.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import asyncio",
        "import json",
        "import logging",
        "from collections import",
        "from .connection_manager import",
        "from .state_sync import",
        "from .event_propagator import",
        "import uuid"
      ],
      "dependencies": [
        ".connection_manager",
        ".event_propagator",
        ".state_sync",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/websocket/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .connection_manager import",
        "from .websocket_repository import",
        "from .event_propagator import",
        "from .middleware import",
        "from .state_sync import",
        "from .recovery import"
      ],
      "dependencies": [
        ".connection_manager",
        ".event_propagator",
        ".middleware",
        ".recovery",
        ".state_sync",
        ".websocket_repository"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/websocket/connection_manager.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from enum import",
        "from dataclasses import",
        "from datetime import",
        "import asyncio",
        "from abc import",
        "import weakref",
        "from collections import",
        "import logging",
        "from fastapi import",
        "from starlette.websockets import"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "fastapi",
        "logging",
        "starlette.websockets",
        "typing",
        "weakref"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/websocket/event_propagator.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from abc import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import asyncio",
        "import json",
        "from collections import",
        "import logging",
        "from .connection_manager import"
      ],
      "dependencies": [
        ".connection_manager",
        "abc",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/websocket/websocket_repository.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from abc import",
        "import asyncio",
        "from dataclasses import",
        "from datetime import",
        "import weakref",
        "from enum import",
        "from backend.domain.repositories import",
        "from backend.domain.entities import",
        "from backend.infrastructure.repositories import",
        "from .connection_manager import"
      ],
      "dependencies": [
        ".connection_manager",
        "abc",
        "asyncio",
        "backend.domain.entities",
        "backend.domain.repositories",
        "backend.infrastructure.repositories",
        "dataclasses",
        "datetime",
        "enum",
        "typing",
        "weakref"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/websocket/state_sync.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from abc import",
        "from dataclasses import",
        "from datetime import",
        "import asyncio",
        "import json",
        "from enum import",
        "import hashlib",
        "from .connection_manager import",
        "from .event_propagator import"
      ],
      "dependencies": [
        ".connection_manager",
        ".event_propagator",
        "abc",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "hashlib",
        "json",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/websocket/middleware.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from abc import",
        "import asyncio",
        "from datetime import",
        "import json",
        "import logging",
        "from dataclasses import",
        "from contextlib import",
        "from fastapi import",
        "from starlette.websockets import",
        "from backend.infrastructure.observability import",
        "from backend.infrastructure.rate_limiting import",
        "from .connection_manager import"
      ],
      "dependencies": [
        ".connection_manager",
        "abc",
        "asyncio",
        "backend.infrastructure.observability",
        "backend.infrastructure.rate_limiting",
        "contextlib",
        "dataclasses",
        "datetime",
        "fastapi",
        "json",
        "logging",
        "starlette.websockets",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/recovery.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import asyncio",
        "import logging",
        "from abc import",
        "from .abstractions import",
        "from .snapshot import",
        "from .transition_log import"
      ],
      "dependencies": [
        ".abstractions",
        ".snapshot",
        ".transition_log",
        "abc",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/migration_registry.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "import importlib",
        "import pkgutil",
        "from pathlib import",
        "from .versioning import",
        "from .abstractions import"
      ],
      "dependencies": [
        ".abstractions",
        ".versioning",
        "importlib",
        "logging",
        "pathlib",
        "pkgutil",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/transition_log.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import json",
        "import asyncio",
        "from collections import",
        "from pathlib import",
        "import aiofiles",
        "import logging",
        "from .abstractions import"
      ],
      "dependencies": [
        ".abstractions",
        "aiofiles",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .abstractions import",
        "from .snapshot import",
        "from .transition_log import",
        "from .recovery import",
        "from .event_sourcing import",
        "from .versioning import",
        "from .persistence_manager import"
      ],
      "dependencies": [
        ".abstractions",
        ".event_sourcing",
        ".persistence_manager",
        ".recovery",
        ".snapshot",
        ".transition_log",
        ".versioning"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/event_sourcing.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import json",
        "import asyncio",
        "from collections import",
        "import logging",
        "from abc import",
        "import uuid",
        "from .abstractions import",
        "from .transition_log import"
      ],
      "dependencies": [
        ".abstractions",
        ".transition_log",
        "abc",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "logging",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/persistence_manager.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import asyncio",
        "import logging",
        "from collections import",
        "from .abstractions import",
        "from .snapshot import",
        "from .transition_log import",
        "from .recovery import",
        "from .event_sourcing import",
        "from .versioning import"
      ],
      "dependencies": [
        ".abstractions",
        ".event_sourcing",
        ".recovery",
        ".snapshot",
        ".transition_log",
        ".versioning",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/abstractions.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from datetime import",
        "from dataclasses import",
        "from enum import"
      ],
      "dependencies": [
        "abc",
        "dataclasses",
        "datetime",
        "enum",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/versioning.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import json",
        "import asyncio",
        "from abc import",
        "import logging",
        "import hashlib",
        "from .abstractions import"
      ],
      "dependencies": [
        ".abstractions",
        "abc",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "hashlib",
        "json",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/snapshot.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "import json",
        "import gzip",
        "import hashlib",
        "from pathlib import",
        "import asyncio",
        "from collections import",
        "import logging",
        "from .abstractions import"
      ],
      "dependencies": [
        ".abstractions",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "gzip",
        "hashlib",
        "json",
        "logging",
        "pathlib",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/migrations/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .v1_to_v2 import",
        "from .v2_to_v3 import"
      ],
      "dependencies": [
        ".v1_to_v2",
        ".v2_to_v3"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/migrations/v2_to_v3.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from datetime import",
        "from ..versioning import",
        "from ..abstractions import"
      ],
      "dependencies": [
        "..abstractions",
        "..versioning",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/state_persistence/migrations/v1_to_v2.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from ..versioning import",
        "from ..abstractions import"
      ],
      "dependencies": [
        "..abstractions",
        "..versioning",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/rate_limiting/sliding_window.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "from collections import",
        "import bisect",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "asyncio",
        "bisect",
        "collections",
        "datetime",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/rate_limiting/token_bucket.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "import math",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "asyncio",
        "datetime",
        "math",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/rate_limiting/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .base import",
        "from .token_bucket import",
        "from .sliding_window import",
        "from .distributed import",
        "from .middleware import",
        "from .websocket_limiter import",
        "from datetime import",
        "from datetime import"
      ],
      "dependencies": [
        ".base",
        ".distributed",
        ".middleware",
        ".sliding_window",
        ".token_bucket",
        ".websocket_limiter",
        "datetime"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/rate_limiting/distributed.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "import json",
        "import hashlib",
        "from .base import",
        "from .token_bucket import",
        "from .sliding_window import",
        "import socket",
        "import os"
      ],
      "dependencies": [
        ".base",
        ".sliding_window",
        ".token_bucket",
        "asyncio",
        "datetime",
        "hashlib",
        "json",
        "os",
        "socket",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/rate_limiting/base.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from datetime import",
        "from enum import",
        "from dataclasses import",
        "import asyncio"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/rate_limiting/websocket_limiter.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "from dataclasses import",
        "import asyncio",
        "import json",
        "from .base import",
        "from .token_bucket import",
        "from .sliding_window import"
      ],
      "dependencies": [
        ".base",
        ".sliding_window",
        ".token_bucket",
        "asyncio",
        "dataclasses",
        "datetime",
        "json",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/rate_limiting/middleware.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "import logging",
        "from functools import",
        "from fastapi import",
        "from fastapi.responses import",
        "from starlette.middleware.base import",
        "from starlette.types import",
        "from .base import",
        "from .token_bucket import"
      ],
      "dependencies": [
        ".base",
        ".token_bucket",
        "datetime",
        "fastapi",
        "fastapi.responses",
        "functools",
        "logging",
        "starlette.middleware.base",
        "starlette.types",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/optimization/memory_manager.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "import threading",
        "import asyncio",
        "import gc",
        "import weakref",
        "import psutil",
        "import logging",
        "import functools",
        "from contextlib import",
        "from collections import",
        "import tracemalloc",
        "import sys"
      ],
      "dependencies": [
        "asyncio",
        "collections",
        "contextlib",
        "dataclasses",
        "datetime",
        "functools",
        "gc",
        "logging",
        "psutil",
        "sys",
        "threading",
        "tracemalloc",
        "typing",
        "weakref"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/optimization/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .object_pool import",
        "from .performance_profiler import",
        "from .memory_manager import"
      ],
      "dependencies": [
        ".memory_manager",
        ".object_pool",
        ".performance_profiler"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/optimization/object_pool.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "import threading",
        "import asyncio",
        "import time",
        "import logging",
        "import weakref",
        "from abc import",
        "from collections import",
        "from contextlib import"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "collections",
        "contextlib",
        "dataclasses",
        "datetime",
        "logging",
        "threading",
        "time",
        "typing",
        "weakref"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/optimization/performance_profiler.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "import time",
        "import threading",
        "import asyncio",
        "import cProfile",
        "import pstats",
        "import io",
        "import functools",
        "import logging",
        "from contextlib import",
        "from collections import",
        "import tracemalloc",
        "import gc"
      ],
      "dependencies": [
        "asyncio",
        "cProfile",
        "collections",
        "contextlib",
        "dataclasses",
        "datetime",
        "functools",
        "gc",
        "io",
        "logging",
        "pstats",
        "threading",
        "time",
        "tracemalloc",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/health/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .health_check import"
      ],
      "dependencies": [
        ".health_check"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/health/health_check.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import asyncio",
        "import threading",
        "import time",
        "import logging",
        "from abc import",
        "import psutil",
        "import socket",
        "import aiohttp"
      ],
      "dependencies": [
        "abc",
        "aiohttp",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "psutil",
        "socket",
        "threading",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/connection_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "from domain.entities.connection import",
        "from domain.value_objects import",
        "from application.interfaces.repositories import",
        "import copy",
        "import copy"
      ],
      "dependencies": [
        "application.interfaces.repositories",
        "copy",
        "datetime",
        "domain.entities.connection",
        "domain.value_objects",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/application_room_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from copy import",
        "from application.interfaces.repositories import",
        "from domain.entities.room import",
        "from .in_memory_room_repository import"
      ],
      "dependencies": [
        ".in_memory_room_repository",
        "application.interfaces.repositories",
        "copy",
        "domain.entities.room",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/in_memory_room_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from domain.entities.room import",
        "from domain.interfaces.repositories import"
      ],
      "dependencies": [
        "domain.entities.room",
        "domain.interfaces.repositories",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .in_memory_room_repository import",
        "from .in_memory_game_repository import",
        "from .in_memory_player_stats_repository import",
        "from .connection_repository import",
        "from .message_queue_repository import"
      ],
      "dependencies": [
        ".connection_repository",
        ".in_memory_game_repository",
        ".in_memory_player_stats_repository",
        ".in_memory_room_repository",
        ".message_queue_repository"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/optimized_room_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "from typing import",
        "from collections import",
        "from copy import",
        "from application.interfaces.repositories import",
        "from domain.entities.room import",
        "from domain.value_objects import",
        "import logging"
      ],
      "dependencies": [
        "application.interfaces.repositories",
        "asyncio",
        "collections",
        "copy",
        "domain.entities.room",
        "domain.value_objects",
        "logging",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/optimized_game_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "import logging",
        "from typing import",
        "from collections import",
        "from datetime import",
        "from copy import",
        "from application.interfaces.repositories import",
        "from domain.entities.game import"
      ],
      "dependencies": [
        "application.interfaces.repositories",
        "asyncio",
        "collections",
        "copy",
        "datetime",
        "domain.entities.game",
        "logging",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/in_memory_player_stats_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from datetime import",
        "from copy import",
        "from application.interfaces import",
        "from application.dto.common import"
      ],
      "dependencies": [
        "application.dto.common",
        "application.interfaces",
        "copy",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/in_memory_unit_of_work.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "from typing import",
        "from contextlib import",
        "from application.interfaces.unit_of_work import",
        "from application.interfaces.repositories import",
        "from .optimized_room_repository import",
        "from .optimized_game_repository import",
        "from .optimized_player_stats_repository import",
        "from .connection_repository import",
        "from .message_queue_repository import"
      ],
      "dependencies": [
        ".connection_repository",
        ".message_queue_repository",
        ".optimized_game_repository",
        ".optimized_player_stats_repository",
        ".optimized_room_repository",
        "application.interfaces.repositories",
        "application.interfaces.unit_of_work",
        "asyncio",
        "contextlib",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/application_game_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from copy import",
        "from application.interfaces.repositories import",
        "from domain.entities.game import",
        "from .in_memory_game_repository import"
      ],
      "dependencies": [
        ".in_memory_game_repository",
        "application.interfaces.repositories",
        "copy",
        "domain.entities.game",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/in_memory_game_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "import logging",
        "from datetime import",
        "from copy import",
        "from application.interfaces import",
        "from domain.entities.game import"
      ],
      "dependencies": [
        "application.interfaces",
        "copy",
        "datetime",
        "domain.entities.game",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/message_queue_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "from domain.entities.message_queue import",
        "from domain.value_objects import",
        "from application.interfaces.repositories import",
        "import copy",
        "import copy"
      ],
      "dependencies": [
        "application.interfaces.repositories",
        "copy",
        "datetime",
        "domain.entities.message_queue",
        "domain.value_objects",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/repositories/optimized_player_stats_repository.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "import logging",
        "from typing import",
        "from collections import",
        "from dataclasses import",
        "from datetime import",
        "import heapq",
        "from application.interfaces.repositories import"
      ],
      "dependencies": [
        "application.interfaces.repositories",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "heapq",
        "logging",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/observability/logging.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from datetime import",
        "from enum import",
        "import json",
        "import sys",
        "import asyncio",
        "from pathlib import",
        "from contextlib import",
        "from functools import",
        "import traceback",
        "from dataclasses import",
        "import threading",
        "from queue import",
        "import logging"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "contextlib",
        "dataclasses",
        "datetime",
        "enum",
        "functools",
        "json",
        "logging",
        "pathlib",
        "queue",
        "sys",
        "threading",
        "traceback",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/observability/metrics.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from enum import",
        "from dataclasses import",
        "from datetime import",
        "import time",
        "import asyncio",
        "from collections import",
        "import threading",
        "from contextlib import",
        "from functools import",
        "import json"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "collections",
        "contextlib",
        "dataclasses",
        "datetime",
        "enum",
        "functools",
        "json",
        "threading",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/observability/tracing.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from enum import",
        "from dataclasses import",
        "from datetime import",
        "import uuid",
        "import time",
        "import asyncio",
        "from contextlib import",
        "from functools import",
        "import json",
        "import threading",
        "from collections import",
        "import traceback",
        "import random"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "collections",
        "contextlib",
        "dataclasses",
        "datetime",
        "enum",
        "functools",
        "json",
        "random",
        "threading",
        "time",
        "traceback",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/observability/health.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from enum import",
        "from dataclasses import",
        "from datetime import",
        "import asyncio",
        "import time",
        "import psutil",
        "import os",
        "from pathlib import"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "os",
        "pathlib",
        "psutil",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/observability/monitoring.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from enum import",
        "from dataclasses import",
        "from datetime import",
        "import asyncio",
        "import time",
        "from collections import",
        "import statistics",
        "import threading",
        "from abc import"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "statistics",
        "threading",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/observability/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .logging import",
        "from .metrics import",
        "from .tracing import",
        "from .health import",
        "from .correlation import",
        "from .monitoring import",
        "from .metrics import",
        "from .tracing import",
        "from .metrics import",
        "from .tracing import"
      ],
      "dependencies": [
        ".correlation",
        ".health",
        ".logging",
        ".metrics",
        ".monitoring",
        ".tracing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/observability/correlation.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "import uuid",
        "import contextvars",
        "from contextlib import",
        "from functools import",
        "from starlette.middleware.base import",
        "from starlette.requests import",
        "from starlette.responses import",
        "import logging",
        "import asyncio"
      ],
      "dependencies": [
        "asyncio",
        "contextlib",
        "contextvars",
        "functools",
        "logging",
        "starlette.middleware.base",
        "starlette.requests",
        "starlette.responses",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/adapters/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .clean_architecture_adapter import",
        "from .reconnection_adapter import"
      ],
      "dependencies": [
        ".clean_architecture_adapter",
        ".reconnection_adapter"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/adapters/reconnection_adapter.py",
      "architecture_type": "clean",
      "confidence": 0.9,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "import logging",
        "from application.services import",
        "from application.use_cases.connection import",
        "from application.dto.connection import",
        "from infrastructure.unit_of_work import",
        "from infrastructure.services import",
        "from infrastructure.feature_flags import",
        "from infrastructure.services import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.services",
        "application.use_cases.connection",
        "datetime",
        "infrastructure.feature_flags",
        "infrastructure.services",
        "infrastructure.unit_of_work",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/adapters/clean_architecture_adapter.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "import time",
        "from infrastructure.feature_flags import",
        "from infrastructure.dependencies import",
        "from application.dto.connection import",
        "from application.dto.room_management import",
        "from application.dto.game import",
        "from application.use_cases.connection import",
        "from application.use_cases.room_management import",
        "from application.use_cases.game import"
      ],
      "dependencies": [
        "application.dto.connection",
        "application.dto.game",
        "application.dto.room_management",
        "application.use_cases.connection",
        "application.use_cases.game",
        "application.use_cases.room_management",
        "infrastructure.dependencies",
        "infrastructure.feature_flags",
        "logging",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/resilience/load_shedding.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import threading",
        "import asyncio",
        "import time",
        "import logging",
        "import random",
        "from abc import",
        "import psutil",
        "import functools",
        "import uuid"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "functools",
        "logging",
        "psutil",
        "random",
        "threading",
        "time",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/resilience/timeout.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "import asyncio",
        "import threading",
        "import time",
        "import signal",
        "import functools",
        "import logging",
        "from contextlib import",
        "from enum import"
      ],
      "dependencies": [
        "asyncio",
        "contextlib",
        "dataclasses",
        "datetime",
        "enum",
        "functools",
        "logging",
        "signal",
        "threading",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/resilience/retry.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "import asyncio",
        "import time",
        "import random",
        "import logging",
        "from functools import",
        "from enum import"
      ],
      "dependencies": [
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "functools",
        "logging",
        "random",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/resilience/bulkhead.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from contextlib import",
        "from enum import",
        "import asyncio",
        "import threading",
        "import time",
        "import logging",
        "from abc import",
        "import queue",
        "from concurrent.futures import"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "concurrent.futures",
        "contextlib",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "queue",
        "threading",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/resilience/circuit_breaker.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from enum import",
        "from datetime import",
        "from dataclasses import",
        "import asyncio",
        "import threading",
        "from contextlib import",
        "import logging",
        "from abc import",
        "import signal"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "contextlib",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "signal",
        "threading",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/resilience/connection_pool.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from contextlib import",
        "from enum import",
        "import asyncio",
        "import threading",
        "import time",
        "import logging",
        "import queue",
        "from abc import",
        "import weakref"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "contextlib",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "queue",
        "threading",
        "time",
        "typing",
        "weakref"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/hybrid_game_repository.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "import asyncio",
        "import logging",
        "from collections import",
        "from backend.domain.entities import",
        "from backend.application.interfaces import",
        "from backend.infrastructure.persistence.archive import"
      ],
      "dependencies": [
        "asyncio",
        "backend.application.interfaces",
        "backend.domain.entities",
        "backend.infrastructure.persistence.archive",
        "collections",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/hybrid_repository.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "from abc import",
        "from enum import",
        "from .base import",
        "from .memory_adapter import"
      ],
      "dependencies": [
        ".base",
        ".memory_adapter",
        "abc",
        "asyncio",
        "datetime",
        "enum",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/filesystem_adapter.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import os",
        "import json",
        "import asyncio",
        "import aiofiles",
        "from typing import",
        "from datetime import",
        "from pathlib import",
        "import hashlib",
        "from collections import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "aiofiles",
        "asyncio",
        "collections",
        "datetime",
        "hashlib",
        "json",
        "os",
        "pathlib",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/repository_factory.py",
      "architecture_type": "clean",
      "confidence": 0.7000000000000001,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from backend.engine.game import",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from enum import",
        "from dataclasses import",
        "from .base import",
        "from .memory_adapter import",
        "from .filesystem_adapter import",
        "from .hybrid_repository import",
        "from datetime import",
        "from datetime import",
        "from ..repositories.in_memory_unit_of_work import",
        "from domain.entities.room import",
        "from backend.engine.game import",
        "from domain.entities.player_stats import",
        "from domain.entities.connection import"
      ],
      "dependencies": [
        "..repositories.in_memory_unit_of_work",
        ".base",
        ".filesystem_adapter",
        ".hybrid_repository",
        ".memory_adapter",
        "backend.engine.game",
        "dataclasses",
        "datetime",
        "domain.entities.connection",
        "domain.entities.player_stats",
        "domain.entities.room",
        "enum",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .base import",
        "from .memory_adapter import",
        "from .filesystem_adapter import",
        "from .hybrid_repository import",
        "from .repository_factory import"
      ],
      "dependencies": [
        ".base",
        ".filesystem_adapter",
        ".hybrid_repository",
        ".memory_adapter",
        ".repository_factory"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/memory_adapter.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "from collections import",
        "from copy import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "asyncio",
        "collections",
        "copy",
        "datetime",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/base.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from datetime import",
        "from enum import",
        "from dataclasses import"
      ],
      "dependencies": [
        "abc",
        "dataclasses",
        "datetime",
        "enum",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/archive/archive_strategy.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import asyncio",
        "import logging",
        "from abc import",
        "import gzip",
        "import gzip",
        "import json",
        "import json",
        "from backend.domain.entities import"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "backend.domain.entities",
        "dataclasses",
        "datetime",
        "enum",
        "gzip",
        "json",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/archive/archive_manager.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "import asyncio",
        "import logging",
        "from collections import",
        "from enum import",
        "from .archive_strategy import",
        "from .archive_worker import",
        "from .archive_backends import"
      ],
      "dependencies": [
        ".archive_backends",
        ".archive_strategy",
        ".archive_worker",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/archive/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .archive_strategy import",
        "from .archive_worker import",
        "from .archive_backends import",
        "from .archive_manager import"
      ],
      "dependencies": [
        ".archive_backends",
        ".archive_manager",
        ".archive_strategy",
        ".archive_worker"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/archive/archive_worker.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "import asyncio",
        "import logging",
        "from collections import",
        "from enum import",
        "import time",
        "from .archive_strategy import",
        "import psutil"
      ],
      "dependencies": [
        ".archive_strategy",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "psutil",
        "time",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/persistence/archive/archive_backends.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "import asyncio",
        "import logging",
        "import json",
        "import os",
        "from pathlib import",
        "import hashlib",
        "import aiofiles",
        "from abc import",
        "import gzip",
        "import gzip",
        "import gzip",
        "import gzip",
        "import gzip"
      ],
      "dependencies": [
        "abc",
        "aiofiles",
        "asyncio",
        "datetime",
        "gzip",
        "hashlib",
        "json",
        "logging",
        "os",
        "pathlib",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/event_store/hybrid_event_store.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "from collections import",
        "from dataclasses import",
        "import json",
        "from enum import",
        "from backend.infrastructure.persistence.base import",
        "from backend.infrastructure.persistence.hybrid_repository import",
        "from backend.infrastructure.persistence.memory_adapter import",
        "from backend.infrastructure.persistence.filesystem_adapter import",
        "from backend.infrastructure.persistence.repository_factory import"
      ],
      "dependencies": [
        "asyncio",
        "backend.infrastructure.persistence.base",
        "backend.infrastructure.persistence.filesystem_adapter",
        "backend.infrastructure.persistence.hybrid_repository",
        "backend.infrastructure.persistence.memory_adapter",
        "backend.infrastructure.persistence.repository_factory",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/event_store/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .hybrid_event_store import",
        "from .event_sourcing import"
      ],
      "dependencies": [
        ".event_sourcing",
        ".hybrid_event_store"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/event_store/event_sourcing.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from datetime import",
        "import uuid",
        "from .hybrid_event_store import"
      ],
      "dependencies": [
        ".hybrid_event_store",
        "abc",
        "datetime",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/event_store/game_event_integration.py",
      "architecture_type": "hybrid",
      "confidence": 0.6,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from backend.engine.game import",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "import json",
        "from backend.engine.game import",
        "from backend.engine.state_machine.game_state_machine import",
        "from .hybrid_event_store import",
        "from .event_sourcing import"
      ],
      "dependencies": [
        ".event_sourcing",
        ".hybrid_event_store",
        "backend.engine.game",
        "backend.engine.state_machine.game_state_machine",
        "datetime",
        "json",
        "typing"
      ],
      "recommendation": "Review for cleanup. May need partial refactoring in Phase 7."
    },
    {
      "file_path": "infrastructure/monitoring/tracing.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "from contextlib import",
        "from dataclasses import",
        "import uuid",
        "import asyncio",
        "from enum import",
        "from opentelemetry import",
        "from opentelemetry.trace import",
        "from opentelemetry.sdk.trace import",
        "from opentelemetry.sdk.trace.export import",
        "from opentelemetry.sdk.resources import",
        "from opentelemetry.exporter.prometheus import"
      ],
      "dependencies": [
        "asyncio",
        "contextlib",
        "dataclasses",
        "datetime",
        "enum",
        "opentelemetry",
        "opentelemetry.exporter.prometheus",
        "opentelemetry.sdk.resources",
        "opentelemetry.sdk.trace",
        "opentelemetry.sdk.trace.export",
        "opentelemetry.trace",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/monitoring/system_metrics.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import gc",
        "import psutil",
        "import asyncio",
        "import threading",
        "from typing import",
        "from datetime import",
        "from collections import",
        "import os",
        "from ..observability.metrics import"
      ],
      "dependencies": [
        "..observability.metrics",
        "asyncio",
        "collections",
        "datetime",
        "gc",
        "os",
        "psutil",
        "threading",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/monitoring/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .game_metrics import",
        "from .system_metrics import",
        "from .tracing import",
        "from .correlation import",
        "from .event_stream import",
        "from .visualization import",
        "from .prometheus_endpoint import",
        "from .grafana_dashboards import",
        "from .enterprise_monitor import"
      ],
      "dependencies": [
        ".correlation",
        ".enterprise_monitor",
        ".event_stream",
        ".game_metrics",
        ".grafana_dashboards",
        ".prometheus_endpoint",
        ".system_metrics",
        ".tracing",
        ".visualization"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/monitoring/visualization.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "from dataclasses import",
        "from enum import",
        "import json"
      ],
      "dependencies": [
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/monitoring/event_stream.py",
      "architecture_type": "clean",
      "confidence": 0.6000000000000001,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "from dataclasses import",
        "from enum import",
        "import json",
        "from collections import",
        "import uuid",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "json",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/monitoring/grafana_dashboards.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import json",
        "from typing import",
        "from typing import"
      ],
      "dependencies": [
        "json",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/monitoring/prometheus_endpoint.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "import gc",
        "import psutil",
        "from fastapi import",
        "from fastapi.responses import",
        "from ..observability.metrics import",
        "from .game_metrics import",
        "from .system_metrics import",
        "from .visualization import",
        "from ..observability.metrics import",
        "import threading"
      ],
      "dependencies": [
        "..observability.metrics",
        ".game_metrics",
        ".system_metrics",
        ".visualization",
        "datetime",
        "fastapi",
        "fastapi.responses",
        "gc",
        "psutil",
        "threading",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/monitoring/enterprise_monitor.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "import asyncio",
        "import logging",
        "from contextlib import",
        "from ..observability.metrics import",
        "from .game_metrics import",
        "from .system_metrics import",
        "from .tracing import",
        "from .correlation import",
        "from .event_stream import",
        "from .visualization import",
        "from .prometheus_endpoint import"
      ],
      "dependencies": [
        "..observability.metrics",
        ".correlation",
        ".event_stream",
        ".game_metrics",
        ".prometheus_endpoint",
        ".system_metrics",
        ".tracing",
        ".visualization",
        "asyncio",
        "contextlib",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/monitoring/game_metrics.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from datetime import",
        "from dataclasses import",
        "from enum import",
        "import asyncio",
        "from collections import",
        "import statistics",
        "from ..observability.metrics import"
      ],
      "dependencies": [
        "..observability.metrics",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "statistics",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/monitoring/correlation.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import uuid",
        "import asyncio",
        "import threading",
        "from typing import",
        "from contextvars import",
        "from functools import",
        "from datetime import",
        "from datetime import"
      ],
      "dependencies": [
        "asyncio",
        "contextvars",
        "datetime",
        "functools",
        "threading",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/events/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .in_memory_event_bus import",
        "from .websocket_event_publisher import"
      ],
      "dependencies": [
        ".in_memory_event_bus",
        ".websocket_event_publisher"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/events/websocket_event_publisher.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from socket_manager import",
        "Uses direct broadcasting (legacy pattern)"
      ],
      "imports": [
        "from typing import",
        "from domain.interfaces.events import",
        "from domain.events.base import",
        "import logging",
        "from socket_manager import"
      ],
      "dependencies": [
        "domain.events.base",
        "domain.interfaces.events",
        "logging",
        "socket_manager",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/events/in_memory_event_bus.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from domain.events.base import",
        "from domain.interfaces.events import",
        "import asyncio",
        "import logging"
      ],
      "dependencies": [
        "asyncio",
        "domain.events.base",
        "domain.interfaces.events",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/events/application_event_publisher.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from socket_manager import",
        "Uses direct broadcasting (legacy pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "import asyncio",
        "from application.interfaces import",
        "from backend.domain.events.base import",
        "from backend.infrastructure.events.event_broadcast_mapper import",
        "from infrastructure.feature_flags import",
        "from socket_manager import"
      ],
      "dependencies": [
        "application.interfaces",
        "asyncio",
        "backend.domain.events.base",
        "backend.infrastructure.events.event_broadcast_mapper",
        "infrastructure.feature_flags",
        "logging",
        "socket_manager",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/caching/memory_cache.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "from collections import",
        "import heapq",
        "import random",
        "from dataclasses import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "heapq",
        "random",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/caching/distributed_cache.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "import json",
        "import pickle",
        "from typing import",
        "from datetime import",
        "import uuid",
        "from abc import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "abc",
        "asyncio",
        "datetime",
        "json",
        "pickle",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/caching/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from datetime import",
        "from .base import",
        "from .memory_cache import",
        "from .distributed_cache import",
        "from .cache_patterns import",
        "from .cache_strategies import",
        "from datetime import",
        "from datetime import"
      ],
      "dependencies": [
        ".base",
        ".cache_patterns",
        ".cache_strategies",
        ".distributed_cache",
        ".memory_cache",
        "datetime"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/caching/cache_patterns.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "from abc import",
        "import hashlib",
        "import json",
        "from .base import",
        "from datetime import",
        "from datetime import"
      ],
      "dependencies": [
        ".base",
        "abc",
        "asyncio",
        "datetime",
        "hashlib",
        "json",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/caching/cache_strategies.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "from enum import",
        "from dataclasses import",
        "import re",
        "from .base import",
        "from collections import"
      ],
      "dependencies": [
        ".base",
        "asyncio",
        "collections",
        "dataclasses",
        "datetime",
        "enum",
        "re",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/caching/base.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from datetime import",
        "from enum import",
        "from dataclasses import",
        "import asyncio"
      ],
      "dependencies": [
        "abc",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/messaging/game_integration.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import asyncio",
        "import logging",
        "from .base import",
        "from .memory_queue import",
        "from .routing import",
        "from .handlers import",
        "from .dead_letter import"
      ],
      "dependencies": [
        ".base",
        ".dead_letter",
        ".handlers",
        ".memory_queue",
        ".routing",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/messaging/handlers.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from datetime import",
        "import logging",
        "from functools import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "asyncio",
        "datetime",
        "functools",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/messaging/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .base import",
        "from .memory_queue import",
        "from .routing import",
        "from .dead_letter import",
        "from .serialization import",
        "from .handlers import",
        "from .game_integration import"
      ],
      "dependencies": [
        ".base",
        ".dead_letter",
        ".game_integration",
        ".handlers",
        ".memory_queue",
        ".routing",
        ".serialization"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/messaging/memory_queue.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import asyncio",
        "import heapq",
        "from typing import",
        "from datetime import",
        "from collections import",
        "import logging",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "asyncio",
        "collections",
        "datetime",
        "heapq",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/messaging/routing.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import re",
        "import fnmatch",
        "from typing import",
        "from dataclasses import",
        "from abc import",
        "import logging",
        "import asyncio",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "abc",
        "asyncio",
        "dataclasses",
        "fnmatch",
        "logging",
        "re",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/messaging/base.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import uuid"
      ],
      "dependencies": [
        "abc",
        "dataclasses",
        "datetime",
        "enum",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/messaging/serialization.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import json",
        "import pickle",
        "from typing import",
        "from datetime import",
        "import logging",
        "import msgpack",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "datetime",
        "json",
        "logging",
        "msgpack",
        "pickle",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/messaging/dead_letter.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "import logging",
        "import asyncio",
        "from .base import",
        "from .memory_queue import"
      ],
      "dependencies": [
        ".base",
        ".memory_queue",
        "asyncio",
        "dataclasses",
        "datetime",
        "enum",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/handlers/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .websocket_broadcast_handler import"
      ],
      "dependencies": [
        ".websocket_broadcast_handler"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/handlers/websocket_broadcast_handler.py",
      "architecture_type": "hybrid",
      "confidence": 0.6,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from socket_manager import",
        "Uses direct broadcasting (legacy pattern)"
      ],
      "imports": [
        "from typing import",
        "from domain.interfaces.events import",
        "from domain.events.base import",
        "import logging",
        "from socket_manager import",
        "import re"
      ],
      "dependencies": [
        "domain.events.base",
        "domain.interfaces.events",
        "logging",
        "re",
        "socket_manager",
        "typing"
      ],
      "recommendation": "Review for cleanup. May need partial refactoring in Phase 7."
    },
    {
      "file_path": "infrastructure/services/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "from .websocket_notification_service import",
        "from .simple_bot_service import",
        "from .in_memory_cache_service import",
        "from .console_metrics_collector import"
      ],
      "dependencies": [
        ".console_metrics_collector",
        ".in_memory_cache_service",
        ".simple_bot_service",
        ".websocket_notification_service"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/services/console_metrics_collector.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "from collections import",
        "from application.interfaces import"
      ],
      "dependencies": [
        "application.interfaces",
        "collections",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/services/in_memory_cache_service.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "import asyncio",
        "from application.interfaces import"
      ],
      "dependencies": [
        "application.interfaces",
        "asyncio",
        "datetime",
        "logging",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "infrastructure/services/simple_bot_service.py",
      "architecture_type": "hybrid",
      "confidence": 0.6,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from shared_instances import",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.interfaces import",
        "from shared_instances import",
        "import uuid",
        "import random"
      ],
      "dependencies": [
        "application.interfaces",
        "logging",
        "random",
        "shared_instances",
        "typing",
        "uuid"
      ],
      "recommendation": "Review for cleanup. May need partial refactoring in Phase 7."
    },
    {
      "file_path": "infrastructure/services/websocket_notification_service.py",
      "architecture_type": "hybrid",
      "confidence": 0.6,
      "indicators": [
        "Located in clean directory: infrastructure/",
        "Legacy import: from socket_manager import",
        "Uses direct broadcasting (legacy pattern)",
        "Uses dependency injection (clean pattern)"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from application.interfaces import",
        "from socket_manager import",
        "from infrastructure.feature_flags import"
      ],
      "dependencies": [
        "application.interfaces",
        "infrastructure.feature_flags",
        "logging",
        "socket_manager",
        "typing"
      ],
      "recommendation": "Review for cleanup. May need partial refactoring in Phase 7."
    },
    {
      "file_path": "engine/async_game.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [
        "import asyncio",
        "import random",
        "import logging",
        "import time",
        "from typing import",
        "from datetime import",
        "from .game import",
        "from .piece import",
        "from .player import",
        "from .rules import",
        "from .scoring import",
        "from .turn_resolution import",
        "from .win_conditions import"
      ],
      "dependencies": [
        ".game",
        ".piece",
        ".player",
        ".rules",
        ".scoring",
        ".turn_resolution",
        ".win_conditions",
        "asyncio",
        "datetime",
        "logging",
        "random",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/turn_resolution.py",
      "architecture_type": "legacy",
      "confidence": 0.8,
      "indicators": [
        "Located in legacy directory: engine/",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.rules import"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from engine.piece import",
        "from engine.player import",
        "from engine.rules import"
      ],
      "dependencies": [
        "dataclasses",
        "engine.piece",
        "engine.player",
        "engine.rules",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/game.py",
      "architecture_type": "legacy",
      "confidence": 1.0,
      "indicators": [
        "Located in legacy directory: engine/",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.rules import",
        "Legacy import: from engine.scoring import"
      ],
      "imports": [
        "import random",
        "from typing import",
        "import engine.ai",
        "from engine.piece import",
        "from engine.player import",
        "from engine.rules import",
        "from engine.scoring import",
        "from engine.turn_resolution import",
        "from engine.win_conditions import"
      ],
      "dependencies": [
        "engine.ai",
        "engine.piece",
        "engine.player",
        "engine.rules",
        "engine.scoring",
        "engine.turn_resolution",
        "engine.win_conditions",
        "random",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/scoring.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/ai.py",
      "architecture_type": "legacy",
      "confidence": 0.8,
      "indicators": [
        "Located in legacy directory: engine/",
        "Legacy import: from engine.rules import"
      ],
      "imports": [
        "from collections import",
        "from itertools import",
        "from engine.rules import"
      ],
      "dependencies": [
        "collections",
        "engine.rules",
        "itertools"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/constants.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/room_manager.py",
      "architecture_type": "legacy",
      "confidence": 0.8,
      "indicators": [
        "Located in legacy directory: engine/",
        "Legacy import: from engine.room import"
      ],
      "imports": [
        "import uuid",
        "from typing import",
        "from engine.room import"
      ],
      "dependencies": [
        "engine.room",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/__init__.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/rules.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [
        "from collections import"
      ],
      "dependencies": [
        "collections"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/player.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [
        "import random"
      ],
      "dependencies": [
        "random"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/async_room.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "import os",
        "import time",
        "from typing import",
        "from datetime import",
        "from .player import",
        "from .async_game import",
        "from .state_machine.core import",
        "from .state_machine.game_state_machine import",
        "from .bot_manager import"
      ],
      "dependencies": [
        ".async_game",
        ".bot_manager",
        ".player",
        ".state_machine.core",
        ".state_machine.game_state_machine",
        "asyncio",
        "datetime",
        "logging",
        "os",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/bot_manager.py",
      "architecture_type": "legacy",
      "confidence": 1.0,
      "indicators": [
        "Located in legacy directory: engine/",
        "Legacy import: from engine.player import",
        "Legacy import: from engine.async_bot_strategy import",
        "Legacy import: from backend.socket_manager import",
        "Legacy import: from backend.socket_manager import"
      ],
      "imports": [
        "import asyncio",
        "import hashlib",
        "import random",
        "import time",
        "from typing import",
        "import engine.ai",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.async_bot_strategy import",
        "from backend.socket_manager import",
        "import random",
        "from backend.socket_manager import",
        "import traceback",
        "import random",
        "import traceback",
        "from backend.socket_manager import",
        "from engine.rules import",
        "import traceback",
        "import random",
        "import traceback",
        "from backend.socket_manager import",
        "from backend.socket_manager import",
        "from engine.win_conditions import",
        "from backend.socket_manager import",
        "from engine.rules import",
        "import traceback",
        "import traceback"
      ],
      "dependencies": [
        "asyncio",
        "backend.socket_manager",
        "engine.ai",
        "engine.async_bot_strategy",
        "engine.player",
        "engine.rules",
        "engine.state_machine.core",
        "engine.win_conditions",
        "hashlib",
        "random",
        "time",
        "traceback",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/async_room_manager.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [
        "import asyncio",
        "import uuid",
        "import logging",
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from .async_room import",
        "import asyncio",
        "import concurrent.futures",
        "import asyncio",
        "import concurrent.futures",
        "import asyncio",
        "import concurrent.futures",
        "import asyncio",
        "import concurrent.futures"
      ],
      "dependencies": [
        ".async_room",
        "asyncio",
        "concurrent.futures",
        "dataclasses",
        "datetime",
        "logging",
        "typing",
        "uuid"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/win_conditions.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [
        "from enum import"
      ],
      "dependencies": [
        "enum"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/async_bot_strategy.py",
      "architecture_type": "legacy",
      "confidence": 0.8,
      "indicators": [
        "Located in legacy directory: engine/",
        "Legacy import: from engine.piece import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import random",
        "import time",
        "from typing import",
        "import logging",
        "from engine.piece import",
        "from engine.player import",
        "import engine.ai"
      ],
      "dependencies": [
        "asyncio",
        "engine.ai",
        "engine.piece",
        "engine.player",
        "logging",
        "random",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/async_compat.py",
      "architecture_type": "legacy",
      "confidence": 0.4,
      "indicators": [
        "Located in legacy directory: engine/"
      ],
      "imports": [
        "import asyncio",
        "import functools",
        "import logging",
        "from typing import",
        "from concurrent.futures import"
      ],
      "dependencies": [
        "asyncio",
        "concurrent.futures",
        "functools",
        "logging",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/piece.py",
      "architecture_type": "legacy",
      "confidence": 0.8,
      "indicators": [
        "Located in legacy directory: engine/",
        "Legacy import: from engine.constants import"
      ],
      "imports": [
        "from engine.constants import"
      ],
      "dependencies": [
        "engine.constants"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/room.py",
      "architecture_type": "legacy",
      "confidence": 0.8,
      "indicators": [
        "Located in legacy directory: engine/",
        "Legacy import: from engine.game import",
        "Legacy import: from engine.player import"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "import os",
        "import time",
        "from typing import",
        "from engine.game import",
        "from engine.player import",
        "from engine.state_machine.core import",
        "from engine.state_machine.game_state_machine import",
        "from .bot_manager import"
      ],
      "dependencies": [
        ".bot_manager",
        "asyncio",
        "engine.game",
        "engine.player",
        "engine.state_machine.core",
        "engine.state_machine.game_state_machine",
        "logging",
        "os",
        "time",
        "typing"
      ],
      "recommendation": "Schedule for Phase 7 removal. Ensure clean architecture replacement exists."
    },
    {
      "file_path": "engine/state_machine/base_state.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "import time",
        "from abc import",
        "from typing import",
        "from .core import",
        "from .event_integration import",
        "import time",
        "from backend.socket_manager import",
        "import os",
        "import sys",
        "from socket_manager import",
        "from api.services.event_store import",
        "from datetime import",
        "from backend.socket_manager import",
        "import os",
        "import sys",
        "from socket_manager import",
        "from .event_integration import",
        "from backend.domain.events.all_events import"
      ],
      "dependencies": [
        ".core",
        ".event_integration",
        "abc",
        "api.services.event_store",
        "asyncio",
        "backend.domain.events.all_events",
        "backend.socket_manager",
        "datetime",
        "logging",
        "os",
        "socket_manager",
        "sys",
        "time",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/action_queue.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "from typing import",
        "from .core import",
        "from api.services.event_store import"
      ],
      "dependencies": [
        ".core",
        "api.services.event_store",
        "asyncio",
        "logging",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/async_game_adapter.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "from typing import",
        "from engine.game import",
        "from engine.async_game import",
        "from engine.scoring import",
        "from engine.win_conditions import"
      ],
      "dependencies": [
        "asyncio",
        "engine.async_game",
        "engine.game",
        "engine.scoring",
        "engine.win_conditions",
        "logging",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/__init__.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/event_integration.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import logging",
        "from typing import",
        "from datetime import",
        "import sys",
        "import os",
        "from backend.domain.events.all_events import",
        "from backend.infrastructure.events.in_memory_event_bus import",
        "from .core import"
      ],
      "dependencies": [
        ".core",
        "backend.domain.events.all_events",
        "backend.infrastructure.events.in_memory_event_bus",
        "datetime",
        "logging",
        "os",
        "sys",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/core.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from enum import",
        "from typing import"
      ],
      "dependencies": [
        "dataclasses",
        "datetime",
        "enum",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/game_state_machine.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import asyncio",
        "import logging",
        "from datetime import",
        "from typing import",
        "from .action_queue import",
        "from .base_state import",
        "from .core import",
        "from .states import",
        "from .states.game_over_state import",
        "from .states.round_start_state import",
        "from .states.turn_results_state import",
        "from .states.waiting_state import",
        "from .async_game_adapter import",
        "from ..bot_manager import",
        "from engine.async_game import",
        "from engine.game import",
        "from shared_instances import",
        "from shared_instances import"
      ],
      "dependencies": [
        "..bot_manager",
        ".action_queue",
        ".async_game_adapter",
        ".base_state",
        ".core",
        ".states",
        ".states.game_over_state",
        ".states.round_start_state",
        ".states.turn_results_state",
        ".states.waiting_state",
        "asyncio",
        "datetime",
        "engine.async_game",
        "engine.game",
        "logging",
        "shared_instances",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/event_config.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import os",
        "import logging",
        "from .event_integration import",
        "from backend.infrastructure.events.integrated_broadcast_handler import"
      ],
      "dependencies": [
        ".event_integration",
        "backend.infrastructure.events.integrated_broadcast_handler",
        "logging",
        "os"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/states/round_start_state.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import time",
        "from typing import",
        "from ..base_state import",
        "from ..core import"
      ],
      "dependencies": [
        "..base_state",
        "..core",
        "time",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/states/turn_state.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from ...constants import",
        "from ...player import",
        "from ...rules import",
        "from ...turn_resolution import",
        "from ..base_state import",
        "from ..core import",
        "import time",
        "from engine.rules import",
        "import time"
      ],
      "dependencies": [
        "...constants",
        "...player",
        "...rules",
        "...turn_resolution",
        "..base_state",
        "..core",
        "asyncio",
        "engine.rules",
        "time",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/states/__init__.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "from .declaration_state import",
        "from .preparation_state import",
        "from .round_start_state import",
        "from .scoring_state import",
        "from .turn_state import"
      ],
      "dependencies": [
        ".declaration_state",
        ".preparation_state",
        ".round_start_state",
        ".scoring_state",
        ".turn_state"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/states/scoring_state.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "from typing import",
        "from ...scoring import",
        "from ..base_state import",
        "from ..core import",
        "import asyncio",
        "import asyncio"
      ],
      "dependencies": [
        "...scoring",
        "..base_state",
        "..core",
        "asyncio",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/states/game_over_state.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import asyncio",
        "import time",
        "from typing import",
        "from engine.win_conditions import",
        "from ..base_state import",
        "from ..core import"
      ],
      "dependencies": [
        "..base_state",
        "..core",
        "asyncio",
        "engine.win_conditions",
        "time",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/states/preparation_state.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import asyncio",
        "import random",
        "import time",
        "from typing import",
        "from ..base_state import",
        "from ..core import"
      ],
      "dependencies": [
        "..base_state",
        "..core",
        "asyncio",
        "random",
        "time",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/states/waiting_state.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from ..base_state import",
        "from ..core import"
      ],
      "dependencies": [
        "..base_state",
        "..core",
        "asyncio",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/states/declaration_state.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "from typing import",
        "from ..base_state import",
        "from ..core import"
      ],
      "dependencies": [
        "..base_state",
        "..core",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "engine/state_machine/states/turn_results_state.py",
      "architecture_type": "enterprise",
      "confidence": 1.0,
      "indicators": [
        "Special case: engine/state_machine/"
      ],
      "imports": [
        "import asyncio",
        "from typing import",
        "from ..base_state import",
        "from ..core import"
      ],
      "dependencies": [
        "..base_state",
        "..core",
        "asyncio",
        "typing"
      ],
      "recommendation": "Modern implementation. Maintain current patterns."
    },
    {
      "file_path": "domain/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/value_objects/hand_strength.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from domain.value_objects.piece import"
      ],
      "dependencies": [
        "dataclasses",
        "domain.value_objects.piece",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/value_objects/room_status.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from enum import"
      ],
      "dependencies": [
        "enum"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/value_objects/identifiers.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import"
      ],
      "dependencies": [
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/value_objects/connection_status.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from enum import"
      ],
      "dependencies": [
        "enum"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/value_objects/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from .piece import",
        "from .declaration import",
        "from .hand_strength import",
        "from .identifiers import",
        "from .connection_status import",
        "from .room_status import",
        "from .player_role import"
      ],
      "dependencies": [
        ".connection_status",
        ".declaration",
        ".hand_strength",
        ".identifiers",
        ".piece",
        ".player_role",
        ".room_status"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/value_objects/declaration.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import"
      ],
      "dependencies": [
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/value_objects/player_role.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from enum import"
      ],
      "dependencies": [
        "enum"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/value_objects/piece.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import"
      ],
      "dependencies": [
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/events/player_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/events/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from .base import",
        "from .game_events import",
        "from .player_events import",
        "from .connection_events import",
        "from .message_queue_events import"
      ],
      "dependencies": [
        ".base",
        ".connection_events",
        ".game_events",
        ".message_queue_events",
        ".player_events"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/events/game_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/events/connection_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "datetime",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/events/message_queue_events.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from typing import",
        "from .base import"
      ],
      "dependencies": [
        ".base",
        "dataclasses",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/events/base.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from abc import",
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "import uuid"
      ],
      "dependencies": [
        "abc",
        "dataclasses",
        "datetime",
        "typing",
        "uuid"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/services/turn_resolution.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from domain.value_objects.piece import",
        "from domain.entities.player import",
        "from domain.services.game_rules import"
      ],
      "dependencies": [
        "dataclasses",
        "domain.entities.player",
        "domain.services.game_rules",
        "domain.value_objects.piece",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/services/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/services/game_rules.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from typing import",
        "from collections import",
        "from domain.value_objects.piece import",
        "from domain.entities.player import"
      ],
      "dependencies": [
        "collections",
        "domain.entities.player",
        "domain.value_objects.piece",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/services/scoring_service.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from domain.entities.player import"
      ],
      "dependencies": [
        "dataclasses",
        "domain.entities.player",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/entities/game.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from enum import",
        "import random",
        "from domain.entities.player import",
        "from domain.value_objects.piece import",
        "from domain.events.base import",
        "from domain.events.game_events import"
      ],
      "dependencies": [
        "dataclasses",
        "domain.entities.player",
        "domain.events.base",
        "domain.events.game_events",
        "domain.value_objects.piece",
        "enum",
        "random",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/entities/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/entities/connection.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "from domain.value_objects.identifiers import",
        "from domain.value_objects.connection_status import"
      ],
      "dependencies": [
        "dataclasses",
        "datetime",
        "domain.value_objects.connection_status",
        "domain.value_objects.identifiers",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/entities/message_queue.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from dataclasses import",
        "from datetime import",
        "from typing import",
        "from domain.value_objects.identifiers import",
        "from domain.events.base import",
        "from domain.events.message_queue_events import"
      ],
      "dependencies": [
        "dataclasses",
        "datetime",
        "domain.events.base",
        "domain.events.message_queue_events",
        "domain.value_objects.identifiers",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/entities/player.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from datetime import",
        "from domain.value_objects.piece import",
        "from domain.events.base import",
        "from domain.events.player_events import",
        "from domain.events.connection_events import"
      ],
      "dependencies": [
        "dataclasses",
        "datetime",
        "domain.events.base",
        "domain.events.connection_events",
        "domain.events.player_events",
        "domain.value_objects.piece",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/entities/room.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from typing import",
        "from dataclasses import",
        "from enum import",
        "from domain.entities.player import",
        "from domain.entities.game import",
        "from domain.value_objects.piece import",
        "from domain.events.base import"
      ],
      "dependencies": [
        "dataclasses",
        "domain.entities.game",
        "domain.entities.player",
        "domain.events.base",
        "domain.value_objects.piece",
        "enum",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/interfaces/services.py",
      "architecture_type": "clean",
      "confidence": 0.8,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from domain.value_objects.piece import",
        "from domain.entities.player import"
      ],
      "dependencies": [
        "abc",
        "domain.entities.player",
        "domain.value_objects.piece",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/interfaces/events.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from domain.events.base import"
      ],
      "dependencies": [
        "abc",
        "domain.events.base",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/interfaces/__init__.py",
      "architecture_type": "clean",
      "confidence": 0.4,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [],
      "dependencies": [],
      "recommendation": "Ready for production. No migration needed."
    },
    {
      "file_path": "domain/interfaces/repositories.py",
      "architecture_type": "clean",
      "confidence": 1.0,
      "indicators": [
        "Located in clean directory: domain/"
      ],
      "imports": [
        "from abc import",
        "from typing import",
        "from domain.entities.room import",
        "from domain.entities.game import",
        "from domain.entities.player import"
      ],
      "dependencies": [
        "abc",
        "domain.entities.game",
        "domain.entities.player",
        "domain.entities.room",
        "typing"
      ],
      "recommendation": "Ready for production. No migration needed."
    }
  ]
}